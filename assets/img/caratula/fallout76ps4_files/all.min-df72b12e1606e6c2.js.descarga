var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function (global, factory) {

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }
      return factory(w);
    };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

  // Support: Firefox 18+
  // Can't be in strict mode, several libs including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  //"use strict";
  var arr = [];

  var document = window.document;

  var _slice = arr.slice;

  var concat = arr.concat;

  var push = arr.push;

  var indexOf = arr.indexOf;

  var class2type = {};

  var toString = class2type.toString;

  var hasOwn = class2type.hasOwnProperty;

  var support = {};

  var version = "2.2.4",


  // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {

    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  },


  // Support: Android<4.1
  // Make sure we trim BOM and NBSP
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


  // Matches dashed string for camelizing
  rmsPrefix = /^-ms-/,
      rdashAlpha = /-([\da-z])/gi,


  // Used by jQuery.camelCase as callback to replace()
  fcamelCase = function fcamelCase(all, letter) {
    return letter.toUpperCase();
  };

  jQuery.fn = jQuery.prototype = {

    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // Start with an empty selector
    selector: "",

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function toArray() {
      return _slice.call(this);
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      return num != null ?

      // Return just the one element from the set
      num < 0 ? this[num + this.length] : this[num] :

      // Return all the elements in a clean array
      _slice.call(this);
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {

      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      ret.context = this.context;

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },

    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },

    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },

    first: function first() {
      return this.eq(0);
    },

    last: function last() {
      return this.eq(-1);
    },

    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },

    end: function end() {
      return this.prevObject || this.constructor();
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false;

    // Handle a deep copy situation
    if (typeof target === "boolean") {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {

      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {

        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];

          // Prevent never-ending loop
          if (target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {

            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }

            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({

    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function error(msg) {
      throw new Error(msg);
    },

    noop: function noop() {},

    isFunction: function isFunction(obj) {
      return jQuery.type(obj) === "function";
    },

    isArray: Array.isArray,

    isWindow: function isWindow(obj) {
      return obj != null && obj === obj.window;
    },

    isNumeric: function isNumeric(obj) {

      // parseFloat NaNs numeric-cast false positives (null|true|false|"")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      // adding 1 corrects loss of precision from parseFloat (#15100)
      var realStringObj = obj && obj.toString();
      return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
    },

    isPlainObject: function isPlainObject(obj) {
      var key;

      // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window
      if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      }

      // Not own constructor property must be Object
      if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype || {}, "isPrototypeOf")) {
        return false;
      }

      // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own
      for (key in obj) {}

      return key === undefined || hasOwn.call(obj, key);
    },

    isEmptyObject: function isEmptyObject(obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },

    type: function type(obj) {
      if (obj == null) {
        return obj + "";
      }

      // Support: Android<4.0, iOS<6 (functionish RegExp)
      return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
    },

    // Evaluates a script in a global context
    globalEval: function globalEval(code) {
      var script,
          indirect = eval;

      code = jQuery.trim(code);

      if (code) {

        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if (code.indexOf("use strict") === 1) {
          script = document.createElement("script");
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {

          // Otherwise, avoid the DOM node creation, insertion
          // and removal by using an indirect global eval

          indirect(code);
        }
      }
    },

    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE9-11+
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function camelCase(string) {
      return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    },

    nodeName: function nodeName(elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },

    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },

    // Support: Android<4.1
    trim: function trim(text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },

    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },

    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },

    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;

      return first;
    },

    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },

    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return concat.apply([], ret);
    },

    // A global GUID counter for objects
    guid: 1,

    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function proxy(fn, context) {
      var tmp, args, proxy;

      if (typeof context === "string") {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      }

      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if (!jQuery.isFunction(fn)) {
        return undefined;
      }

      // Simulated bind
      args = _slice.call(arguments, 2);
      proxy = function proxy() {
        return fn.apply(context || this, args.concat(_slice.call(arguments)));
      };

      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;

      return proxy;
    },

    now: Date.now,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  // JSHint would error on this code due to the Symbol not being defined in ES5.
  // Defining this global in .jshintrc would create a danger of using the global
  // unguarded in another place, it seems safer to just disable JSHint for these
  // three lines.
  /* jshint ignore: start */
  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }
  /* jshint ignore: end */

  // Populate the class2type map
  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {

    // Support: iOS 8.2 (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = jQuery.type(obj);

    if (type === "function" || jQuery.isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }
  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.2.1
   * http://sizzlejs.com/
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2015-10-17
   */
  function (window) {

    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,


    // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,


    // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }
      return 0;
    },


    // General-purpose constants
    MAX_NEGATIVE = 1 << 31,


    // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,

    // Use a stripped-down indexOf as it's faster than native
    // http://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;
      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }
      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


    // Regular expressions

    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",


    // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


    // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
    // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace +
    // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" +
    // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
    // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
    // 3. anything else (capture 2)
    ".*" + ")\\)|)",


    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,


    // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        rescape = /'|\\/g,


    // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
        funescape = function funescape(_, escaped, escapedWhitespace) {
      var high = "0x" + escaped - 0x10000;
      // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"
      return high !== high || escapedWhitespace ? escaped : high < 0 ?
      // BMP codepoint
      String.fromCharCode(high + 0x10000) :
      // Supplemental Plane codepoint (surrogate pair)
      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },


    // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    };

    // Optimize for push.apply( _, NodeList )
    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
      // Support: Android<4.0
      // Detect silently failing push.apply
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ?

        // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } :

        // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0;
          // Can't trust NodeList.length
          while (target[j++] = els[i++]) {}
          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          nidselect,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,


      // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;

      results = results || [];

      // Return early from calls with invalid selector or context
      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

        return results;
      }

      // Try to shortcut find operations (as opposed to filters) in HTML documents
      if (!seed) {

        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }
        context = context || document;

        if (documentIsHTML) {

          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

            // ID selector
            if (m = match[1]) {

              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {

                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                }

                // Element context
              } else {

                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

                  results.push(elem);
                  return results;
                }
              }

              // Type selector
            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results;

              // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          }

          // Take advantage of querySelectorAll
          if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

            if (nodeType !== 1) {
              newContext = context;
              newSelector = selector;

              // qSA looks outside Element context, which is not what we want
              // Thanks to Andrew Dupont for this workaround technique
              // Support: IE <=8
              // Exclude object elements
            } else if (context.nodeName.toLowerCase() !== "object") {

              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rescape, "\\$&");
              } else {
                context.setAttribute("id", nid = expando);
              }

              // Prefix every selector in the list
              groups = tokenize(selector);
              i = groups.length;
              nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
              while (i--) {
                groups[i] = nidselect + " " + toSelector(groups[i]);
              }
              newSelector = groups.join(",");

              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            }

            if (newSelector) {
              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {} finally {
                if (nid === expando) {
                  context.removeAttribute("id");
                }
              }
            }
          }
        }
      }

      // All others
      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }

    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }
        return cache[key + " "] = value;
      }
      return cache;
    }

    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */
    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }

    /**
     * Support testing using an element
     * @param {Function} fn Passed the created div and expects a boolean result
     */
    function assert(fn) {
      var div = document.createElement("div");

      try {
        return !!fn(div);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (div.parentNode) {
          div.parentNode.removeChild(div);
        }
        // release memory in IE
        div = null;
      }
    }

    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */
    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }

    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */
    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

      // Use IE sourceIndex if available on both nodes
      if (diff) {
        return diff;
      }

      // Check if b follows a
      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }

    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }

    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length;

          // Match elements found at the specified indexes
          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }

    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    }

    // Expose support vars for convenience
    support = Sizzle.support = {};

    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */
    isXML = Sizzle.isXML = function (elem) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false;
    };

    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          parent,
          doc = node ? node.ownerDocument || node : preferredDoc;

      // Return early if doc is invalid or already selected
      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      }

      // Update global variables
      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document);

      // Support: IE 9-11, Edge
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
      if ((parent = document.defaultView) && parent.top !== parent) {
        // Support: IE 11
        if (parent.addEventListener) {
          parent.addEventListener("unload", unloadHandler, false);

          // Support: IE 9 - 10 only
        } else if (parent.attachEvent) {
          parent.attachEvent("onunload", unloadHandler);
        }
      }

      /* Attributes
      ---------------------------------------------------------------------- */

      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)
      support.attributes = assert(function (div) {
        div.className = "i";
        return !div.getAttribute("className");
      });

      /* getElement(s)By*
      ---------------------------------------------------------------------- */

      // Check if getElementsByTagName("*") returns only elements
      support.getElementsByTagName = assert(function (div) {
        div.appendChild(document.createComment(""));
        return !div.getElementsByTagName("*").length;
      });

      // Support: IE<9
      support.getElementsByClassName = rnative.test(document.getElementsByClassName);

      // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programatically-set names,
      // so use a roundabout getElementsByName test
      support.getById = assert(function (div) {
        docElem.appendChild(div).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      });

      // ID find and filter
      if (support.getById) {
        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var m = context.getElementById(id);
            return m ? [m] : [];
          }
        };
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };
      } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find["ID"];

        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        };
      }

      // Tag
      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag);

          // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,

        // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag);

        // Filter out possible comments
        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }
        return results;
      };

      // Class
      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };

      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */

      // QSA and matchesSelector support

      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
      rbuggyMatches = [];

      // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See http://bugs.jquery.com/ticket/13378
      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (div) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // http://bugs.jquery.com/ticket/12359
          docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

          // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
          if (div.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          }

          // Support: IE8
          // Boolean attributes and "value" are not treated correctly
          if (!div.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          }

          // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
          if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          }

          // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests
          if (!div.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          }

          // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibing-combinator selector` fails
          if (!div.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          }
        });

        assert(function (div) {
          // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment
          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          div.appendChild(input).setAttribute("name", "D");

          // Support: IE8
          // Enforce case-sensitivity of name attribute
          if (div.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          }

          // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests
          if (!div.querySelectorAll(":enabled").length) {
            rbuggyQSA.push(":enabled", ":disabled");
          }

          // Opera 10-11 does not throw on post-comma invalid pseudos
          div.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

        assert(function (div) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(div, "div");

          // This should fail with an exception
          // Gecko does not error, returns false instead
          matches.call(div, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

      /* Contains
      ---------------------------------------------------------------------- */
      hasCompare = rnative.test(docElem.compareDocumentPosition);

      // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself
      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }
        return false;
      };

      /* Sorting
      ---------------------------------------------------------------------- */

      // Document order sorting
      sortOrder = hasCompare ? function (a, b) {

        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if (compare) {
          return compare;
        }

        // Calculate position if both inputs belong to the same document
        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

        // Otherwise we know they are disconnected
        1;

        // Disconnected nodes
        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

          // Choose the first element that is related to our preferred document
          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }
          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          }

          // Maintain original order
          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b];

        // Parentless nodes are either documents or disconnected
        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

          // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        }

        // Otherwise we need full lists of their ancestors for comparison
        cur = a;
        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }
        cur = b;
        while (cur = cur.parentNode) {
          bp.unshift(cur);
        }

        // Walk down the tree looking for a discrepancy
        while (ap[i] === bp[i]) {
          i++;
        }

        return i ?
        // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) :

        // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };

      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      // Make sure that attribute selectors are quoted
      expr = expr.replace(rattributeQuotes, "='$1']");

      if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

        try {
          var ret = matches.call(elem, expr);

          // IE 9's matchesSelector returns false on disconnected nodes
          if (ret || support.disconnectedMatch ||
          // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {}
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }
      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],

      // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };

    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0;

      // Unless we *know* we can detect duplicates, assume their presence
      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          results.splice(duplicates[j], 1);
        }
      }

      // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225
      sortInput = null;

      return results;
    };

    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */
    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }
      // Do not include comment or processing instruction nodes

      return ret;
    };

    Expr = Sizzle.selectors = {

      // Can be adjusted by the user
      cacheLength: 50,

      createPseudo: markFunction,

      match: matchExpr,

      attrHandle: {},

      find: {},

      relative: {
        ">": { dir: "parentNode", first: true },
        " ": { dir: "parentNode" },
        "+": { dir: "previousSibling", first: true },
        "~": { dir: "previousSibling" }
      },

      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape);

          // Move the given value to match[3] whether quoted or unquoted
          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },

        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
            1 type (only|nth|...)
            2 what (child|of-type)
            3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
            4 xn-component of xn+y argument ([+-]?\d*n|)
            5 sign of xn-component
            6 x of xn-component
            7 sign of y-component
            8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            }

            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd");

            // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },

        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          }

          // Accept quoted arguments as-is
          if (match[3]) {
            match[2] = match[4] || match[5] || "";

            // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && (
          // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && (
          // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          }

          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice(0, 3);
        }
      },

      filter: {

        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },

        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];

          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },

        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }
            if (!operator) {
              return true;
            }

            result += "";

            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          };
        },

        "CHILD": function CHILD(type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";

          return first === 1 && last === 0 ?

          // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {

              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;
                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

                      return false;
                    }
                  }
                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === "only" && !start && "nextSibling";
                }
                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild];

              // non-xml :nth-child(...) stores cache data on `parent`
              if (forward && useCache) {

                // Seek `elem` from a previously-cached index

                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {});

                // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)
                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || (

                // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {

                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {});

                  // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)
                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                }

                // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {});

                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              }

              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },

        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does
          if (fn[expando]) {
            return fn(argument);
          }

          // But maintain support for old signatures
          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;
              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },

      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));

          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length;

            // Match elements unmatched by `matcher`
            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results);
            // Don't keep the element (issue #299)
            input[0] = null;
            return !results.pop();
          };
        }),

        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),

        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
          };
        }),

        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }
          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);
            return false;
          };
        }),

        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },

        "root": function root(elem) {
          return elem === docElem;
        },

        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },

        // Boolean properties
        "enabled": function enabled(elem) {
          return elem.disabled === false;
        },

        "disabled": function disabled(elem) {
          return elem.disabled === true;
        },

        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },

        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },

        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },

        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },

        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },

        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },

        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },

        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

          // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },

        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),

        "last": createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),

        "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),

        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),

        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),

        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; --i >= 0;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),

        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; ++i < length;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        })
      }
    };

    Expr.pseudos["nth"] = Expr.pseudos["eq"];

    // Add button/input type pseudos
    for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in { submit: true, reset: true }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }

    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {

        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }

        matched = false;

        // Combinators
        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        }

        // Filters
        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      }

      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
      // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";
      for (; i < len; i++) {
        selector += tokens[i].value;
      }
      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          checkNonElements = base && dir === "parentNode",
          doneName = done++;

      return combinator.first ?
      // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
      } :

      // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName];

        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});

              // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)
              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[dir] = newCache;

                // A match means we're done; a fail means we have to keep checking
                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;
        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;
      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }
      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);
            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }
      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }
      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,


        // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


        // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ?
        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ?

        // ...intermediate processing is necessary
        [] :

        // ...otherwise use results directly
        results : matcherIn;

        // Find primary matches
        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        }

        // Apply postFilter
        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml);

          // Un-match failing elements by moving them back to matcherIn
          i = temp.length;
          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;
              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }
              postFinder(null, matcherOut = [], temp, xml);
            }

            // Move matched elements from seed to results to keep them synchronized
            i = matcherOut.length;
            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                seed[temp] = !(results[temp] = elem);
              }
            }
          }

          // Add elements to results, through postFinder if defined
        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,


      // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
        // Avoid hanging onto element (issue #299)
        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

          // Return special upon seeing a positional matcher
          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,

        // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),

        // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          outermostContext = context === document || context || outermost;
        }

        // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0;
            if (!context && elem.ownerDocument !== document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }
            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
            }
          }

          // Track unmatched elements for set filters
          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            }

            // Lengthen the array for every element, matched or not
            if (seed) {
              unmatched.push(elem);
            }
          }
        }

        // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.
        matchedCount += i;

        // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.
        if (bySet && i !== matchedCount) {
          j = 0;
          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            }

            // Discard index placeholder values to get only actual matches
            setMatched = condense(setMatched);
          }

          // Add matches to results
          push.apply(results, setMatched);

          // Seedless set matches succeeding multiple successful matchers stipulate sorting
          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

            Sizzle.uniqueSort(results);
          }
        }

        // Override manipulation of globals by nested matchers
        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }
        i = match.length;
        while (i--) {
          cached = matcherFromTokens(match[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }

        // Cache the compiled function
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

        // Save selector and tokenization
        cached.selector = selector;
      }
      return cached;
    };

    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */
    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);

      results = results || [];

      // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)
      if (match.length === 1) {

        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);
        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
          if (!context) {
            return results;

            // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        }

        // Fetch a seed set for right-to-left matching
        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
        while (i--) {
          token = tokens[i];

          // Abort if we hit a combinator
          if (Expr.relative[type = token.type]) {
            break;
          }
          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);
              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      }

      // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above
      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    };

    // One-time assignments

    // Sort stability
    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

    // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function
    support.detectDuplicates = !!hasDuplicate;

    // Initialize against the default document
    setDocument();

    // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function (div1) {
      // Should return 1, but returns 4 (following)
      return div1.compareDocumentPosition(document.createElement("div")) & 1;
    });

    // Support: IE<8
    // Prevent attribute/property "interpolation"
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!assert(function (div) {
      div.innerHTML = "<a href='#'></a>";
      return div.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    }

    // Support: IE<9
    // Use defaultValue in place of getAttribute("value")
    if (!support.attributes || !assert(function (div) {
      div.innerHTML = "<input/>";
      div.firstChild.setAttribute("value", "");
      return div.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    }

    // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies
    if (!assert(function (div) {
      return div.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;
        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };

  var _siblings = function _siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;

  var risSimple = /^.[^:#\[\.,]*$/;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        /* jshint -W018 */
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }

    if (typeof qualifier === "string") {
      if (risSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }

      qualifier = jQuery.filter(qualifier, elements);
    }

    return jQuery.grep(elements, function (elem) {
      return indexOf.call(qualifier, elem) > -1 !== not;
    });
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          len = this.length,
          ret = [],
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      // Needed because $( selector, context ) becomes $( context ).find( selector )
      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + " " + selector : selector;
      return ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this,

      // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });

  // Initialize a jQuery object


  // A central reference to the root jQuery(document)
  var rootjQuery,


  // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem;

    // HANDLE: $(""), $(null), $(undefined), $(false)
    if (!selector) {
      return this;
    }

    // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)
    root = root || rootjQuery;

    // Handle HTML strings
    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      }

      // Match html or make sure no context is specified for #id
      if (match && (match[1] || !context)) {

        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context;

          // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present
          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

          // HANDLE: $(html, props)
          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {

              // Properties of context are called as methods if possible
              if (jQuery.isFunction(this[match])) {
                this[match](context[match]);

                // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this;

          // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          // Support: Blackberry 4.6
          // gEBID returns nodes no longer in the document (#6963)
          if (elem && elem.parentNode) {

            // Inject the element directly into the jQuery object
            this.length = 1;
            this[0] = elem;
          }

          this.context = document;
          this.selector = selector;
          return this;
        }

        // HANDLE: $(expr, $(...))
      } else if (!context || context.jquery) {
        return (context || root).find(selector);

        // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      }

      // HANDLE: $(DOMElement)
    } else if (selector.nodeType) {
      this.context = this[0] = selector;
      this.length = 1;
      return this;

      // HANDLE: $(function)
      // Shortcut for document ready
    } else if (jQuery.isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) :

      // Execute immediately if ready is not present
      selector(jQuery);
    }

    if (selector.selector !== undefined) {
      this.selector = selector.selector;
      this.context = selector.context;
    }

    return jQuery.makeArray(selector, this);
  };

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery(document);

  var rparentsprev = /^(?:parents|prev(?:Until|All))/,


  // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };

  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;

      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },

    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

          // Always skip document fragments
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

          // Don't pass non-elements to Sizzle
          cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

            matched.push(cur);
            break;
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },

    // Determine the position of an element within the set
    index: function index(elem) {

      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }

      // Index in selector
      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(this,

      // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },

    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },

    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {

        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        }

        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnotwhite = /\S+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function (options) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,


    // Last fire value for non-forgettable lists
    memory,


    // Flag to know if list was already fired
    _fired,


    // Flag to prevent firing
    _locked,


    // Actual callback list
    list = [],


    // Queue of execution data for repeatable lists
    queue = [],


    // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,


    // Fire callbacks
    fire = function fire() {

      // Enforce single-firing
      _locked = options.once;

      // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes
      _fired = firing = true;
      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();
        while (++firingIndex < list.length) {

          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      }

      // Forget the data if we're done with it
      if (!options.memory) {
        memory = false;
      }

      firing = false;

      // Clean up if we're done firing for good
      if (_locked) {

        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = [];

          // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },


    // Actual Callbacks object
    self = {

      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {

          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (jQuery.isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && jQuery.type(arg) !== "string") {

                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }
        return this;
      },

      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;
          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1);

            // Handle firing indexes
            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },

      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },

      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }
        return this;
      },

      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },

      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];
        if (!memory) {
          list = memory = "";
        }
        return this;
      },
      locked: function locked() {
        return !!_locked;
      },

      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);
          if (!firing) {
            fire();
          }
        }
        return this;
      },

      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },

      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  jQuery.extend({

    Deferred: function Deferred(func) {
      var tuples = [

      // action, add listener, listener list, final state
      ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        then: function then() /* fnDone, fnFail, fnProgress */{
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (i, tuple) {
              var fn = jQuery.isFunction(fns[i]) && fns[i];

              // deferred[ done | fail | progress ] for forwarding actions to newDefer
              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);
                if (returned && jQuery.isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },

        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {};

      // Keep pipe for back-compat
      _promise.pipe = _promise.then;

      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[3];

        // promise[ done | fail | progress ] = list.add
        _promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(function () {

            // state = [ resolved | rejected ]
            _state = stateString;

            // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        }

        // deferred[ resolve | reject | notify ]
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
          return this;
        };
        deferred[tuple[0] + "With"] = list.fireWith;
      });

      // Make the deferred a promise
      _promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function when(subordinate /* , ..., subordinateN */) {
      var i = 0,
          resolveValues = _slice.call(arguments),
          length = resolveValues.length,


      // the count of uncompleted subordinates
      remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


      // the master Deferred.
      // If resolveValues consist of only a single Deferred, just use that.
      deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


      // Update function for both resolve and progress values
      updateFunc = function updateFunc(i, contexts, values) {
        return function (value) {
          contexts[i] = this;
          values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
          if (values === progressValues) {
            deferred.notifyWith(contexts, values);
          } else if (! --remaining) {
            deferred.resolveWith(contexts, values);
          }
        };
      },
          progressValues,
          progressContexts,
          resolveContexts;

      // Add listeners to Deferred subordinates; treat others as resolved
      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);
        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
          } else {
            --remaining;
          }
        }
      }

      // If we're not waiting on anything, resolve the master
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }

      return deferred.promise();
    }
  });

  // The deferred used on DOM ready
  var readyList;

  jQuery.fn.ready = function (fn) {

    // Add the callback
    jQuery.ready.promise().done(fn);

    return this;
  };

  jQuery.extend({

    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Hold (or release) the ready event
    holdReady: function holdReady(hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },

    // Handle when the DOM is ready
    ready: function ready(wait) {

      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);

      // Trigger any bound ready events
      if (jQuery.fn.triggerHandler) {
        jQuery(document).triggerHandler("ready");
        jQuery(document).off("ready");
      }
    }
  });

  /**
   * The ready event handler and self cleanup method
   */
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  }

  jQuery.ready.promise = function (obj) {
    if (!readyList) {

      readyList = jQuery.Deferred();

      // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE9-10 only
      // Older IE sometimes signals "interactive" too soon
      if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);
      } else {

        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed);

        // A fallback to window.onload, that will always work
        window.addEventListener("load", completed);
      }
    }
    return readyList.promise(obj);
  };

  // Kick off the DOM ready check even if the user does not
  jQuery.ready.promise();

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null;

    // Sets many values
    if (jQuery.type(key) === "object") {
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;

      if (!jQuery.isFunction(value)) {
        raw = true;
      }

      if (bulk) {

        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function fn(elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    return chainable ? elems :

    // Gets
    bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
  };
  var acceptData = function acceptData(owner) {

    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;

  Data.prototype = {

    register: function register(owner, initial) {
      var value = initial || {};

      // If it is a node unlikely to be stringify-ed or looped over
      // use plain assignment
      if (owner.nodeType) {
        owner[this.expando] = value;

        // Otherwise secure it in a non-enumerable, non-writable property
        // configurability must be true to allow the property to be
        // deleted with the delete operator
      } else {
        Object.defineProperty(owner, this.expando, {
          value: value,
          writable: true,
          configurable: true
        });
      }
      return owner[this.expando];
    },
    cache: function cache(owner) {

      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return an empty object.
      if (!acceptData(owner)) {
        return {};
      }

      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.
        if (acceptData(owner)) {

          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      if (typeof data === "string") {
        cache[data] = value;

        // Handle: [ owner, { properties } ] args
      } else {

        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[prop] = data[prop];
        }
      }
      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][key];
    },
    access: function access(owner, key, value) {
      var stored;

      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {

        stored = this.get(owner, key);

        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          name,
          camel,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key === undefined) {
        this.register(owner);
      } else {

        // Support array or space separated string of keys
        if (jQuery.isArray(key)) {

          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);

          // Try the string as a key before any manipulation
          if (key in cache) {
            name = [key, camel];
          } else {

            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ? [name] : name.match(rnotwhite) || [];
          }
        }

        i = name.length;

        while (i--) {
          delete cache[name[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || jQuery.isEmptyObject(cache)) {

        // Support: Chrome <= 35-45+
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://code.google.com/p/chromium/issues/detail?id=378607
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();

  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = data === "true" ? true : data === "false" ? false : data === "null" ? null :

          // Only convert to a number if it doesn't change the string
          +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },

    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },

    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },

    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });

  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {

              // Support: IE11+
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf("data-") === 0) {
                  name = jQuery.camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      }

      // Sets multiple values
      if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data, camelKey;

        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {

          // Attempt to get data from the cache
          // with the key as-is
          data = dataUser.get(elem, key) ||

          // Try to find dashed key if it exists (gh-2779)
          // This is for 2.2.x only
          dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

          if (data !== undefined) {
            return data;
          }

          camelKey = jQuery.camelCase(key);

          // Attempt to get data from the cache
          // with the key camelized
          data = dataUser.get(elem, camelKey);
          if (data !== undefined) {
            return data;
          }

          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, camelKey, undefined);
          if (data !== undefined) {
            return data;
          }

          // We tried really hard, but the data doesn't exist.
          return;
        }

        // Set the data...
        camelKey = jQuery.camelCase(key);
        this.each(function () {

          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = dataUser.get(this, camelKey);

          // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*
          dataUser.set(this, camelKey, value);

          // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.
          if (key.indexOf("-") > -1 && data !== undefined) {
            dataUser.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },

    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });

  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },

    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {

        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });

  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);

        // Ensure a hooks for this queue
        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },

    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

  var cssExpand = ["Top", "Right", "Bottom", "Left"];

  var isHidden = function isHidden(elem, el) {

    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale = 1,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


    // Starting value computation is required for potential unit mismatches
    initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;

      do {

        // If previous iteration zeroed out, double until we get *something*.
        // Use string for doubling so we don't accidentally see scale as unchanged below
        scale = scale || ".5";

        // Adjust and apply
        initialInUnit = initialInUnit / scale;
        jQuery.style(elem, prop, initialInUnit + unit);

        // Update scale, tolerating zero or NaN from tween.cur()
        // Break the loop if scale is unchanged or perfect, or if we've just had enough.
      } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }
  var rcheckableType = /^(?:checkbox|radio)$/i;

  var rtagName = /<([\w:-]+)/;

  var rscriptType = /^$|\/(?:java|ecma)script/i;

  // We have to close these tags to support XHTML (#13200)
  var wrapMap = {

    // Support: IE9
    option: [1, "<select multiple='multiple'>", "</select>"],

    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

    _default: [0, "", ""]
  };

  // Support: IE9
  wrapMap.optgroup = wrapMap.option;

  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function getAll(context, tag) {

    // Support: IE9-11+
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : [];

    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        contains,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {

        // Add nodes directly
        if (jQuery.type(elem) === "object") {

          // Support: Android<4.1, PhantomJS<2
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div"));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android<4.1, PhantomJS<2
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (#12392)
          tmp.textContent = "";
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = "";

    i = 0;
    while (elem = nodes[i++]) {

      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }

      contains = jQuery.contains(elem.ownerDocument, elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), "script");

      // Preserve script evaluation history
      if (contains) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input");

    // Support: Android 4.0-4.3, Safari<=5.1
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");

    div.appendChild(input);

    // Support: Safari<=5.1, Android<4.2
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE<=11+
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  })();

  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  // Support: IE9
  // See #13393 for more info
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

      // ( types-Object, selector, data )
      if (typeof selector !== "string") {

        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }

    if (data == null && fn == null) {

      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {

        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {

        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;
      fn = function fn(event) {

        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }
    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {

    global: {},

    add: function add(elem, types, handler, data, selector) {

      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem);

      // Don't attach events to noData or text/comment nodes (but allow plain objects)
      if (!elemData) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {

          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || "").match(rnotwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn);

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },

    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {

      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || "").match(rnotwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },

    dispatch: function dispatch(event) {

      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(event);

      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue = [],
          args = _slice.call(arguments),
          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
          special = jQuery.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;

        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

          // Triggered event must either 1) have no namespace, or 2) have namespace(s)
          // a subset or equal to those in the bound event (both can have no namespace).
          if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

            event.handleObj = handleObj;
            event.data = handleObj.data;

            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },

    handlers: function handlers(event, _handlers) {
      var i,
          matches,
          sel,
          handleObj,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target;

      // Support (at least): Chrome, IE9
      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      //
      // Support: Firefox<=42+
      // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
      if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

        for (; cur !== this; cur = cur.parentNode || this) {

          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
            matches = [];
            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i];

              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + " ";

              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matches[sel]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({ elem: cur, handlers: matches });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      if (delegateCount < _handlers.length) {
        handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
      }

      return handlerQueue;
    },

    // Includes some event props shared by KeyEvent and MouseEvent
    props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

    fixHooks: {},

    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function filter(event, original) {

        // Add which for key events
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }

        return event;
      }
    },

    mouseHooks: {
      props: ("button buttons clientX clientY offsetX offsetY pageX pageY " + "screenX screenY toElement").split(" "),
      filter: function filter(event, original) {
        var eventDoc,
            doc,
            body,
            button = original.button;

        // Calculate pageX/Y if missing and clientX/Y available
        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;

          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }

        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }

        return event;
      }
    },

    fix: function fix(event) {
      if (event[jQuery.expando]) {
        return event;
      }

      // Create a writable copy of the event object and normalize some properties
      var i,
          prop,
          copy,
          type = event.type,
          originalEvent = event,
          fixHook = this.fixHooks[type];

      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

      event = new jQuery.Event(originalEvent);

      i = copy.length;
      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      }

      // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't
      if (!event.target) {
        event.target = document;
      }

      // Support: Safari 6.0+, Chrome<28
      // Target should not be a text node (#504, #13143)
      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }

      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },

    special: {
      load: {

        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      focus: {

        // Fire native event if possible so blur/focus sequence is correct
        trigger: function trigger() {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: "focusout"
      },
      click: {

        // For checkbox, fire native event so checked state will be right
        trigger: function trigger() {
          if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
            this.click();
            return false;
          }
        },

        // For cross-browser consistency, don't fire native .click() on links
        _default: function _default(event) {
          return jQuery.nodeName(event.target, "a");
        }
      },

      beforeunload: {
        postDispatch: function postDispatch(event) {

          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  jQuery.removeEvent = function (elem, type, handle) {

    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {

    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

      // Support: Android<4.0
      src.returnValue === false ? returnTrue : returnFalse;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();

    // Mark it as fixed
    this[jQuery.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,

    preventDefault: function preventDefault() {
      var e = this.originalEvent;

      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;

      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;

      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  };

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://code.google.com/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,

      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj;

        // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });

  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {

        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {

        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });

  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,


  // Support: IE 10-11, Edge 10240+
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,


  // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rscriptTypeMasked = /^true\/(.*)/,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

  // Manipulating tables requires a tbody
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);

    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.access(src);
      pdataCur = dataPriv.set(dest, pdataOld);
      events = pdataOld.events;

      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);

      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {

    // Flatten any nested arrays
    args = concat.apply([], args);

    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        isFunction = jQuery.isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (isFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).
        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {

              // Support: Android<4.1, PhantomJS<2
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Reenable scripts
          jQuery.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

              if (node.src) {

                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl) {
                  jQuery._evalUrl(node.src);
                }
              } else {
                jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && jQuery.contains(node.ownerDocument, node)) {
          setGlobalEval(getAll(node, "script"));
        }
        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html.replace(rxhtmlTag, "<$1></$2>");
    },

    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = jQuery.contains(elem.ownerDocument, elem);

      // Fix IE cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }

      // Return the cloned set
      return clone;
    },

    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <= 35-45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {

            // Support: Chrome <= 35-45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });

  jQuery.fn.extend({

    // Keep domManip exposed until 3.0 (gh-2225)
    domManip: domManip,

    detach: function detach(selector) {
      return _remove(this, selector, true);
    },

    remove: function remove(selector) {
      return _remove(this, selector);
    },

    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },

    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },

    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },

    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },

    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },

    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {

          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }

      return this;
    },

    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },

    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }

        // See if we can take a shortcut and just use innerHTML
        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {};

              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0;

            // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },

    replaceWith: function replaceWith() {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));
          if (parent) {
            parent.replaceChild(elem, this);
          }
        }

        // Force callback invocation
      }, ignored);
    }
  });

  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);

        // Support: QtWebKit
        // .get() because push.apply(_, arraylike) throws
        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });

  var iframe,
      elemdisplay = {

    // Support: Firefox
    // We have to pre-define these values for FF (#10227)
    HTML: "block",
    BODY: "block"
  };

  /**
   * Retrieve the actual display of a element
   * @param {String} name nodeName of the element
   * @param {Object} doc Document object
   */

  // Called only from within defaultDisplay
  function actualDisplay(name, doc) {
    var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
        display = jQuery.css(elem[0], "display");

    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();

    return display;
  }

  /**
   * Try to determine the default display value of an element
   * @param {String} nodeName
   */
  function defaultDisplay(nodeName) {
    var doc = document,
        display = elemdisplay[nodeName];

    if (!display) {
      display = actualDisplay(nodeName, doc);

      // If the simple way fails, read from inside an iframe
      if (display === "none" || !display) {

        // Use the already-created iframe if possible
        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

        // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
        doc = iframe[0].contentDocument;

        // Support: IE
        doc.write();
        doc.close();

        display = actualDisplay(nodeName, doc);
        iframe.detach();
      }

      // Store the correct default display
      elemdisplay[nodeName] = display;
    }

    return display;
  }
  var rmargin = /^margin/;

  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {

    // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function swap(elem, options, callback, args) {
    var ret,
        name,
        old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.apply(elem, args || []);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var documentElement = document.documentElement;

  (function () {
    var pixelPositionVal,
        boxSizingReliableVal,
        pixelMarginRightVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div");

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE9-11+
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
    container.appendChild(div);

    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      div.style.cssText =

      // Support: Firefox<29, Android 2.3
      // Vendor-prefix box-sizing
      "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
      div.innerHTML = "";
      documentElement.appendChild(container);

      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";
      reliableMarginLeftVal = divStyle.marginLeft === "2px";
      boxSizingReliableVal = divStyle.width === "4px";

      // Support: Android 4.0 - 4.3 only
      // Some styles come back with percentage values, even though they shouldn't
      div.style.marginRight = "50%";
      pixelMarginRightVal = divStyle.marginRight === "4px";

      documentElement.removeChild(container);
    }

    jQuery.extend(support, {
      pixelPosition: function pixelPosition() {

        // This test is executed only once but we still do memoizing
        // since we can use the boxSizingReliable pre-computing.
        // No need to check if the test was already performed, though.
        computeStyleTests();
        return pixelPositionVal;
      },
      boxSizingReliable: function boxSizingReliable() {
        if (boxSizingReliableVal == null) {
          computeStyleTests();
        }
        return boxSizingReliableVal;
      },
      pixelMarginRight: function pixelMarginRight() {

        // Support: Android 4.0-4.3
        // We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
        // since that compresses better and they're computed together anyway.
        if (boxSizingReliableVal == null) {
          computeStyleTests();
        }
        return pixelMarginRightVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {

        // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
        if (boxSizingReliableVal == null) {
          computeStyleTests();
        }
        return reliableMarginLeftVal;
      },
      reliableMarginRight: function reliableMarginRight() {

        // Support: Android 2.3
        // Check if div with explicit width and no margin-right incorrectly
        // gets computed margin-right based on width of container. (#3333)
        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
        // This support function is only executed once so no memoizing is needed.
        var ret,
            marginDiv = div.appendChild(document.createElement("div"));

        // Reset CSS: box-sizing; display; margin; border; padding
        marginDiv.style.cssText = div.style.cssText =

        // Support: Android 2.3
        // Vendor-prefix box-sizing
        "-webkit-box-sizing:content-box;box-sizing:content-box;" + "display:block;margin:0;border:0;padding:0";
        marginDiv.style.marginRight = marginDiv.style.width = "0";
        div.style.width = "1px";
        documentElement.appendChild(container);

        ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);

        documentElement.removeChild(container);
        div.removeChild(marginDiv);

        return ret;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        style = elem.style;

    computed = computed || getStyles(elem);
    ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

    // Support: Opera 12.1x only
    // Fall back to style even without computed
    // computed is undefined for elems on document fragments
    if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
      ret = jQuery.style(elem, name);
    }

    // Support: IE9
    // getPropertyValue is only needed for .css('filter') (#12537)
    if (computed) {

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // http://dev.w3.org/csswg/cssom/#resolved-values
      if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ?

    // Support: IE9-11+
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {

    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {

          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var

  // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      cssShow = { position: "absolute", visibility: "hidden", display: "block" },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      cssPrefixes = ["Webkit", "O", "Moz", "ms"],
      emptyStyle = document.createElement("div").style;

  // Return a css property mapped to a potentially vendor prefixed property
  function vendorPropName(name) {

    // Shortcut for names that are not vendor prefixed
    if (name in emptyStyle) {
      return name;
    }

    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  function setPositiveNumber(elem, value, subtract) {

    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ?

    // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    var i = extra === (isBorderBox ? "border" : "content") ?

    // If we already have the right measurement, avoid augmentation
    4 :

    // Otherwise initialize for horizontal or vertical properties
    name === "width" ? 1 : 0,
        val = 0;

    for (; i < 4; i += 2) {

      // Both box models exclude margin, so add it if we want it
      if (extra === "margin") {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }

      if (isBorderBox) {

        // border-box includes padding, so remove it if we want content
        if (extra === "content") {
          val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        }

        // At this point, extra isn't border nor margin, so remove border
        if (extra !== "margin") {
          val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      } else {

        // At this point, extra isn't content, so add padding
        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

        // At this point, extra isn't content nor padding, so add border
        if (extra !== "padding") {
          val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }

    return val;
  }

  function getWidthOrHeight(elem, name, extra) {

    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true,
        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
        styles = getStyles(elem),
        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

    // Some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if (val <= 0 || val == null) {

      // Fall back to computed then uncomputed css if necessary
      val = curCSS(elem, name, styles);
      if (val < 0 || val == null) {
        val = elem.style[name];
      }

      // Computed unit is not pixels. Stop here and return.
      if (rnumnonpx.test(val)) {
        return val;
      }

      // Check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

      // Normalize "", auto, and prepare for extra
      val = parseFloat(val) || 0;
    }

    // Use the active box-sizing model to add/subtract irrelevant styles
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
  }

  function showHide(elements, show) {
    var display,
        elem,
        hidden,
        values = [],
        index = 0,
        length = elements.length;

    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }

      values[index] = dataPriv.get(elem, "olddisplay");
      display = elem.style.display;
      if (show) {

        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if (!values[index] && display === "none") {
          elem.style.display = "";
        }

        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if (elem.style.display === "" && isHidden(elem)) {
          values[index] = dataPriv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
        }
      } else {
        hidden = isHidden(elem);

        if (display !== "none" || !hidden) {
          dataPriv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
        }
      }
    }

    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for (index = 0; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      if (!show || elem.style.display === "none" || elem.style.display === "") {
        elem.style.display = show ? values[index] || "" : "none";
      }
    }

    return elements;
  }

  jQuery.extend({

    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {

            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
      "float": "cssFloat"
    },

    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {

      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
          type,
          hooks,
          origName = jQuery.camelCase(name),
          style = elem.style;

      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value === "undefined" ? "undefined" : _typeof(value);

        // Convert "+=" or "-=" to relative numbers (#7345)
        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug #9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (#7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        if (type === "number") {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        }

        // Support: IE9-11+
        // background-* props affect original clone's values
        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

          style[name] = value;
        }
      } else {

        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },

    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = jQuery.camelCase(name);

      // Make sure that we're working with the right name
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }
      return val;
    }
  });

  jQuery.each(["height", "width"], function (i, name) {
    jQuery.cssHooks[name] = {
      get: function get(elem, computed, extra) {
        if (computed) {

          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, name, extra);
          }) : getWidthOrHeight(elem, name, extra);
        }
      },

      set: function set(elem, value, extra) {
        var matches,
            styles = extra && getStyles(elem),
            subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

        // Convert to pixels if value adjustment is needed
        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

          elem.style[name] = value;
          value = jQuery.css(elem, name);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });

  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  });

  // Support: Android 2.3
  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
    if (computed) {
      return swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
    }
  });

  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},


        // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (!rmargin.test(prefix)) {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });

  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];

      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, "");

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {

        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };

  // Support: IE9
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };

  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };

  jQuery.fx = Tween.prototype.init;

  // Back Compat <1.8 extension point
  jQuery.fx.step = {};

  var fxNow,
      timerId,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = jQuery.now();
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {

        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    /* jshint validthis: true */
    var prop,
        value,
        toggle,
        tween,
        hooks,
        oldfire,
        display,
        checkDisplay,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHidden(elem),
        dataShow = dataPriv.get(elem, "fxshow");

    // Handle queue: false promises
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function () {

        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Height/width overflow pass
    if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      display = jQuery.css(elem, "display");

      // Test default display if display is currently "none"
      checkDisplay = display === "none" ? dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

      if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
        style.display = "inline-block";
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // show/hide pass
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.exec(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";
        if (value === (hidden ? "hide" : "show")) {

          // If there is dataShow left over from a stopped hide or show
          // and we are going to proceed with show, we should pretend to be hidden
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

        // Any non-fx value stops us from restoring the original display value
      } else {
        display = undefined;
      }
    }

    if (!jQuery.isEmptyObject(orig)) {
      if (dataShow) {
        if ("hidden" in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = dataPriv.access(elem, "fxshow", {});
      }

      // Store state if its toggle - enables .stop().toggle() to "reverse"
      if (toggle) {
        dataShow.hidden = !hidden;
      }
      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function () {
          jQuery(elem).hide();
        });
      }
      anim.done(function () {
        var prop;

        dataPriv.remove(elem, "fxshow");
        for (prop in orig) {
          jQuery.style(elem, prop, orig[prop]);
        }
      });
      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;
          if (hidden) {
            tween.end = tween.start;
            tween.start = prop === "width" || prop === "height" ? 1 : 0;
          }
        }
      }

      // If this is a noop like .hide().hide(), restore an overwritten display value
    } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
      style.display = display;
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = jQuery.camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (jQuery.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];
      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {

      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }
      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


      // Support: Android 2.3
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]);

      if (percent < 1 && length) {
        return remaining;
      } else {
        deferred.resolveWith(elem, [animation]);
        return false;
      }
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,


        // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;
        if (stopped) {
          return this;
        }
        stopped = true;
        for (; index < length; index++) {
          animation.tweens[index].run(1);
        }

        // Resolve when we played the last frame; otherwise, reject
        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }
        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        if (jQuery.isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
        }
        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (jQuery.isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));

    // attach callbacks from options
    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },

    tweener: function tweener(props, callback) {
      if (jQuery.isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnotwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },

    prefilters: [defaultPrefilter],

    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
    };

    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function () {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {

      // Show any hidden elements after setting opacity to 0
      return this.filter(isHidden).css("opacity", 0).show()

      // Animate to the value specified
      .end().animate({ opacity: to }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {

        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall);

        // Empty animations, or finishing resolves immediately
        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };
      doAnimation.finish = doAnimation;

      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue && type !== false) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }
      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    }
  });

  jQuery.each(["toggle", "show", "hide"], function (i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });

  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;

    fxNow = jQuery.now();

    for (; i < timers.length; i++) {
      timer = timers[i];

      // Checks the timer has not already been removed
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    if (timer()) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };

  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (!timerId) {
      timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };

  jQuery.fx.stop = function () {
    window.clearInterval(timerId);

    timerId = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,

    // Default speed
    _default: 400
  };

  // Based off of the plugin by Clint Helfers, with permission.
  // http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";

    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));

    input.type = "checkbox";

    // Support: iOS<=5.1, Android<=4.2+
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE<=11+
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: Android<=2.3
    // Options inside disabled selects are incorrectly marked as disabled
    select.disabled = true;
    support.optDisabled = !opt.disabled;

    // Support: IE<=11+
    // An input loses its value after becoming a radio
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;

  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },

    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });

  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      }

      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },

    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },

    removeAttr: function removeAttr(elem, value) {
      var name,
          propName,
          i = 0,
          attrNames = value && value.match(rnotwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name;

          // Boolean attributes get special treatment (#10870)
          if (jQuery.expr.match.bool.test(name)) {

            // Set corresponding property to false
            elem[propName] = false;
          }

          elem.removeAttribute(name);
        }
      }
    }
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {

        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;
      if (!isXML) {

        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }
      return ret;
    };
  });

  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;

  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },

    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });

  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },

    propHooks: {
      tabIndex: {
        get: function get(elem) {

          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
        }
      }
    },

    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function set(elem) {
        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });

  var rclass = /[\t\r\n\f]/g;

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      if (typeof value === "string" && value) {
        classes = value.match(rnotwhite) || [];

        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = jQuery.trim(cur);
            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },

    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      if (typeof value === "string" && value) {
        classes = value.match(rnotwhite) || [];

        while (elem = this[i++]) {
          curValue = getClass(elem);

          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {

              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = jQuery.trim(cur);
            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },

    toggleClass: function toggleClass(value, stateVal) {
      var type = typeof value === "undefined" ? "undefined" : _typeof(value);

      if (typeof stateVal === "boolean" && type === "string") {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (type === "string") {

          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = value.match(rnotwhite) || [];

          while (className = classNames[i++]) {

            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === "boolean") {
          className = getClass(this);
          if (className) {

            // Store className if set
            dataPriv.set(this, "__className__", className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },

    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;

      className = " " + selector + " ";
      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });

  var rreturn = /\r/g,
      rspaces = /[\x20\t\r\n\f]+/g;

  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          isFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value;

          return typeof ret === "string" ?

          // Handle most common string cases
          ret.replace(rreturn, "") :

          // Handle cases where value is null/undef or number
          ret == null ? "" : ret;
        }

        return;
      }

      isFunction = jQuery.isFunction(value);

      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {

          var val = jQuery.find.attr(elem, "value");
          return val != null ? val :

          // Support: IE10-11+
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          jQuery.trim(jQuery.text(elem)).replace(rspaces, " ");
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one" || index < 0,
              values = one ? null : [],
              max = one ? index + 1 : options.length,
              i = index < 0 ? max : one ? index : 0;

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // IE8-9 doesn't update selected after form reset (#2551)
            if ((option.selected || i === index) && (

            // Don't return options that are disabled or in a disabled optgroup
            support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

              // Get the specific value for the option
              value = jQuery(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }

          return values;
        },

        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });

  // Radios and checkboxes getter/setter
  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion


  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

  jQuery.extend(jQuery.event, {

    trigger: function trigger(event, data, elem, onlyHandlers) {

      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

      cur = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {

        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {

        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },

    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });

      jQuery.event.trigger(e, null, elem);
    }

  });

  jQuery.fn.extend({

    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });

  jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });

  jQuery.fn.extend({
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });

  support.focusin = "onfocusin" in window;

  // Support: Firefox
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome, Safari
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
  if (!support.focusin) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }
  var location = window.location;

  var nonce = jQuery.now();

  var rquery = /\?/;

  // Support: Android 2.3
  // Workaround failure to string-cast null input
  jQuery.parseJSON = function (data) {
    return JSON.parse(data + "");
  };

  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml;
    if (!data || typeof data !== "string") {
      return null;
    }

    // Support: IE9
    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }

    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }
    return xml;
  };

  var rhash = /#.*$/,
      rts = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


  // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,


  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},


  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},


  // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),


  // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {

    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {

      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

      if (jQuery.isFunction(func)) {

        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {

          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {

    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {

      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},


    // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {

      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {

        // There's only work to do if current dataType is non-auto
        if (current === "*") {

          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {

          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {

              // If conv2 outputs current
              tmp = conv2.split(" ");
              if (tmp[1] === current) {

                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {

                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {

            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return { state: "success", data: response };
  }

  jQuery.extend({

    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },

      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },

      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },

      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {

        // Convert anything to text
        "* text": String,

        // Text to html (true = no transformation)
        "text html": true,

        // Evaluate text as a json expression
        "text json": jQuery.parseJSON,

        // Parse text as xml
        "text xml": jQuery.parseXML
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ?

      // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

      // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },

    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),

    // Main method
    ajax: function ajax(url, options) {

      // If url is an object, simulate pre-1.5 signature
      if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var transport,


      // URL without anti-cache param
      cacheURL,


      // Response headers
      responseHeadersString,
          responseHeaders,


      // timeout handle
      timeoutTimer,


      // Url cleanup var
      urlAnchor,


      // To know if global events are to be dispatched
      fireGlobals,


      // Loop variable
      i,


      // Create the final options object
      s = jQuery.ajaxSetup({}, options),


      // Callbacks context
      callbackContext = s.context || s,


      // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


      // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),


      // Status-dependent callbacks
      _statusCode = s.statusCode || {},


      // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},


      // The jqXHR state
      state = 0,


      // Default abort message
      strAbort = "canceled",


      // Fake xhr
      jqXHR = {
        readyState: 0,

        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;
          if (state === 2) {
            if (!responseHeaders) {
              responseHeaders = {};
              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase()] = match[2];
              }
            }
            match = responseHeaders[key.toLowerCase()];
          }
          return match == null ? null : match;
        },

        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return state === 2 ? responseHeadersString : null;
        },

        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          var lname = name.toLowerCase();
          if (!state) {
            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
            requestHeaders[name] = value;
          }
          return this;
        },

        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (!state) {
            s.mimeType = type;
          }
          return this;
        },

        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;
          if (map) {
            if (state < 2) {
              for (code in map) {

                // Lazy-add the new callback in a way that preserves old ones
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            } else {

              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            }
          }
          return this;
        },

        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;
          if (transport) {
            transport.abort(finalText);
          }
          done(0, finalText);
          return this;
        }
      };

      // Attach deferreds
      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;

      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + "").replace(rhash, "").replace(rprotocol, location.protocol + "//");

      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        // Support: IE8-11+
        // IE throws exception if url is malformed, e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE8-11+
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {

          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (state === 2) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      cacheURL = s.url;

      // More options handling for requests with no content
      if (!s.hasContent) {

        // If data is available, append data to url
        if (s.data) {
          cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;

          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add anti-cache in url if needed
        if (s.cache === false) {
          s.url = rts.test(cacheURL) ?

          // If there is already a '_' parameter, set its value
          cacheURL.replace(rts, "$1_=" + nonce++) :

          // Otherwise add one to the end
          cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
        }
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      for (i in { success: 1, error: 1, complete: 1 }) {
        jqXHR[i](s[i]);
      }

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (state === 2) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {

          // Propagate exception as error if not done
          if (state < 2) {
            done(-1, e);

            // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText;

        // Called once
        if (state === 2) {
          return;
        }

        // State is "done" now
        state = 2;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {

          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";

            // if not modified
          } else if (status === 304) {
            statusText = "notmodified";

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {

          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

          // Handle the global AJAX counter
          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },

    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },

    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });

  jQuery.each(["get", "post"], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {

      // Shift arguments if data argument was omitted
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });

  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,

      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      async: false,
      global: false,
      "throws": true
    });
  };

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapAll(html.call(this, i));
        });
      }

      if (this[0]) {

        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },

    wrapInner: function wrapInner(html) {
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },

    wrap: function wrap(html) {
      var isFunction = jQuery.isFunction(html);

      return this.each(function (i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },

    unwrap: function unwrap() {
      return this.parent().each(function () {
        if (!jQuery.nodeName(this, "body")) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });

  jQuery.expr.filters.hidden = function (elem) {
    return !jQuery.expr.filters.visible(elem);
  };
  jQuery.expr.filters.visible = function (elem) {

    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    // Use OR instead of AND as the element is not visible if either is true
    // See tickets #10406 and #13132
    return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
  };

  var r20 = /%20/g,
      rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (jQuery.isArray(obj)) {

      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {

          // Treat each array item as a scalar.
          add(prefix, v);
        } else {

          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === "object") {

      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {

      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, value) {

      // If value is a function, invoke it and return its value
      value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
    };

    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {

      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join("&").replace(r20, "+");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {

        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;

        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();

        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
        }) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
      }).get();
    }
  });

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {

    // File protocol always yields status code 0, assume 200
    0: 200,

    // Support: IE9
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();

  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;

  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();

          xhr.open(options.type, options.url, options.async, options.username, options.password);

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {

                  // Support: IE9
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete(

                    // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

                  // Support: IE9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                }
              }
            };
          };

          // Listen to events
          xhr.onload = _callback();
          errorCallback = xhr.onerror = _callback("error");

          // Support: IE9
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {

              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {

                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          _callback = _callback("abort");

          try {

            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {

            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },

        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  });

  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport("script", function (s) {

    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, _callback2;
      return {
        send: function send(_, complete) {
          script = jQuery("<script>").prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;
            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          });

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });

  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
      this[callback] = true;
      return callback;
    }
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === "jsonp") {

      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = "json";

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {

        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {

          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && jQuery.isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (!data || typeof data !== "string") {
      return null;
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }
    context = context || document;

    var parsed = rsingleTag.exec(data),
        scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  // Keep a copy of the old load method
  var _load = jQuery.fn.load;

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== "string" && _load) {
      return _load.apply(this, arguments);
    }

    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = jQuery.trim(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (jQuery.isFunction(params)) {

      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery.ajax({
        url: url,

        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {

        // Save response for use in complete callback
        response = arguments;

        self.html(selector ?

        // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

        // Otherwise use the full result
        responseText);

        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  };

  // Attach a bunch of functions for handling common AJAX events
  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });

  jQuery.expr.filters.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  /**
   * Gets a window from an element
   */
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
  }

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (jQuery.isFunction(options)) {

        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };

  jQuery.fn.extend({
    offset: function offset(options) {
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var docElem,
          win,
          elem = this[0],
          box = { top: 0, left: 0 },
          doc = elem && elem.ownerDocument;

      if (!doc) {
        return;
      }

      docElem = doc.documentElement;

      // Make sure it's not a disconnected DOM node
      if (!jQuery.contains(docElem, elem)) {
        return box;
      }

      box = elem.getBoundingClientRect();
      win = getWindow(doc);
      return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
      };
    },

    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          elem = this[0],
          parentOffset = { top: 0, left: 0 };

      // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
      // because it is its only offset parent
      if (jQuery.css(elem, "position") === "fixed") {

        // Assume getBoundingClientRect is there when computed position is fixed
        offset = elem.getBoundingClientRect();
      } else {

        // Get *real* offsetParent
        offsetParent = this.offsetParent();

        // Get correct offsets
        offset = this.offset();
        if (!jQuery.nodeName(offsetParent[0], "html")) {
          parentOffset = offsetParent.offset();
        }

        // Add offsetParent borders
        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
      }

      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },

    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        var win = getWindow(elem);

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  });

  // Support: Safari<7-8+, Chrome<37-44+
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each(["top", "left"], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);

        // If curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
    jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

        return access(this, function (elem, type, value) {
          var doc;

          if (jQuery.isWindow(elem)) {

            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement["client" + name];
          }

          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;

            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ?

          // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) :

          // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable, null);
      };
    });
  });

  jQuery.fn.extend({

    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },

    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {

      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    size: function size() {
      return this.length;
    }
  });

  jQuery.fn.andSelf = jQuery.fn.addBack;

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return jQuery;
    });
  }

  var

  // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,


  // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if (!noGlobal) {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
/*!
** Unobtrusive Ajax support library for jQuery
** Copyright (C) Microsoft Corporation. All rights reserved.
*/

/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */
/*global window: false, jQuery: false */

(function ($) {
    var data_click = "unobtrusiveAjaxClick",
        data_validation = "unobtrusiveValidation";

    function getFunction(code, argNames) {
        var fn = window,
            parts = (code || "").split(".");
        while (fn && parts.length) {
            fn = fn[parts.shift()];
        }
        if (typeof fn === "function") {
            return fn;
        }
        argNames.push(code);
        return Function.constructor.apply(null, argNames);
    }

    function isMethodProxySafe(method) {
        return method === "GET" || method === "POST";
    }

    function asyncOnBeforeSend(xhr, method) {
        if (!isMethodProxySafe(method)) {
            xhr.setRequestHeader("X-HTTP-Method-Override", method);
        }
    }

    function asyncOnSuccess(element, data, contentType) {
        var mode;

        if (contentType.indexOf("application/x-javascript") !== -1) {
            // jQuery already executes JavaScript for us
            return;
        }

        mode = (element.getAttribute("data-ajax-mode") || "").toUpperCase();
        $(element.getAttribute("data-ajax-update")).each(function (i, update) {
            var top;

            switch (mode) {
                case "BEFORE":
                    top = update.firstChild;
                    $("<div />").html(data).contents().each(function () {
                        update.insertBefore(this, top);
                    });
                    break;
                case "AFTER":
                    $("<div />").html(data).contents().each(function () {
                        update.appendChild(this);
                    });
                    break;
                default:
                    $(update).html(data);
                    break;
            }
        });
    }

    function asyncRequest(element, options) {
        var confirm, loading, method, duration;

        confirm = element.getAttribute("data-ajax-confirm");
        if (confirm && !window.confirm(confirm)) {
            return;
        }

        loading = $(element.getAttribute("data-ajax-loading"));
        duration = element.getAttribute("data-ajax-loading-duration") || 0;

        $.extend(options, {
            type: element.getAttribute("data-ajax-method") || undefined,
            url: element.getAttribute("data-ajax-url") || undefined,
            beforeSend: function beforeSend(xhr) {
                var result;
                asyncOnBeforeSend(xhr, method);
                result = getFunction(element.getAttribute("data-ajax-begin"), ["xhr"]).apply(this, arguments);
                if (result !== false) {
                    loading.show(duration);
                }
                return result;
            },
            complete: function complete() {
                loading.hide(duration);
                getFunction(element.getAttribute("data-ajax-complete"), ["xhr", "status"]).apply(this, arguments);
            },
            success: function success(data, status, xhr) {
                asyncOnSuccess(element, data, xhr.getResponseHeader("Content-Type") || "text/html");
                getFunction(element.getAttribute("data-ajax-success"), ["data", "status", "xhr"]).apply(this, arguments);
            },
            error: getFunction(element.getAttribute("data-ajax-failure"), ["xhr", "status", "error"])
        });

        options.data.push({ name: "X-Requested-With", value: "XMLHttpRequest" });

        method = options.type.toUpperCase();
        if (!isMethodProxySafe(method)) {
            options.type = "POST";
            options.data.push({ name: "X-HTTP-Method-Override", value: method });
        }

        $.ajax(options);
    }

    function validate(form) {
        var validationInfo = $(form).data(data_validation);
        return !validationInfo || !validationInfo.validate || validationInfo.validate();
    }

    $(document).on("click", "a[data-ajax=true]", function (evt) {
        evt.preventDefault();
        asyncRequest(this, {
            url: this.href,
            type: "GET",
            data: []
        });
    });

    $(document).on("click", "form[data-ajax=true] input[type=image]", function (evt) {
        var name = evt.target.name,
            $target = $(evt.target),
            form = $target.parents("form")[0],
            offset = $target.offset();

        $(form).data(data_click, [{ name: name + ".x", value: Math.round(evt.pageX - offset.left) }, { name: name + ".y", value: Math.round(evt.pageY - offset.top) }]);

        setTimeout(function () {
            $(form).removeData(data_click);
        }, 0);
    });

    $(document).on("click", "form[data-ajax=true] :submit", function (evt) {
        var name = evt.target.name,
            form = $(evt.target).parents("form")[0];

        $(form).data(data_click, name ? [{ name: name, value: evt.target.value }] : []);

        setTimeout(function () {
            $(form).removeData(data_click);
        }, 0);
    });

    $(document).on("submit", "form[data-ajax=true]", function (evt) {
        var clickInfo = $(this).data(data_click) || [];
        evt.preventDefault();
        if (!validate(this)) {
            return;
        }
        asyncRequest(this, {
            url: this.action,
            type: this.method || "GET",
            data: clickInfo.concat($(this).serializeArray())
        });
    });
})(jQuery);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! jQuery UI - v1.12.1 - 2018-02-20
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/draggable.js, widgets/resizable.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/selectmenu.js, widgets/slider.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function (factory) {
  if (typeof define === "function" && define.amd) {

    // AMD. Register as an anonymous module.
    define(["jquery"], factory);
  } else {

    // Browser globals
    factory(jQuery);
  }
})(function ($) {

  $.ui = $.ui || {};

  var version = $.ui.version = "1.12.1";

  /*!
   * jQuery UI Widget 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Widget
  //>>group: Core
  //>>description: Provides a factory for creating stateful widgets with a common API.
  //>>docs: http://api.jqueryui.com/jQuery.widget/
  //>>demos: http://jqueryui.com/widget/


  var widgetUuid = 0;
  var widgetSlice = Array.prototype.slice;

  $.cleanData = function (orig) {
    return function (elems) {
      var events, elem, i;
      for (i = 0; (elem = elems[i]) != null; i++) {
        try {

          // Only trigger remove when necessary to save time
          events = $._data(elem, "events");
          if (events && events.remove) {
            $(elem).triggerHandler("remove");
          }

          // Http://bugs.jquery.com/ticket/8235
        } catch (e) {}
      }
      orig(elems);
    };
  }($.cleanData);

  $.widget = function (name, base, prototype) {
    var existingConstructor, constructor, basePrototype;

    // ProxiedPrototype allows the provided prototype to remain unmodified
    // so that it can be used as a mixin for multiple widgets (#8876)
    var proxiedPrototype = {};

    var namespace = name.split(".")[0];
    name = name.split(".")[1];
    var fullName = namespace + "-" + name;

    if (!prototype) {
      prototype = base;
      base = $.Widget;
    }

    if ($.isArray(prototype)) {
      prototype = $.extend.apply(null, [{}].concat(prototype));
    }

    // Create selector for plugin
    $.expr[":"][fullName.toLowerCase()] = function (elem) {
      return !!$.data(elem, fullName);
    };

    $[namespace] = $[namespace] || {};
    existingConstructor = $[namespace][name];
    constructor = $[namespace][name] = function (options, element) {

      // Allow instantiation without "new" keyword
      if (!this._createWidget) {
        return new constructor(options, element);
      }

      // Allow instantiation without initializing for simple inheritance
      // must use "new" keyword (the code above always passes args)
      if (arguments.length) {
        this._createWidget(options, element);
      }
    };

    // Extend with the existing constructor to carry over any static properties
    $.extend(constructor, existingConstructor, {
      version: prototype.version,

      // Copy the object used to create the prototype in case we need to
      // redefine the widget later
      _proto: $.extend({}, prototype),

      // Track widgets that inherit from this widget in case this widget is
      // redefined after a widget inherits from it
      _childConstructors: []
    });

    basePrototype = new base();

    // We need to make the options hash a property directly on the new instance
    // otherwise we'll modify the options hash on the prototype that we're
    // inheriting from
    basePrototype.options = $.widget.extend({}, basePrototype.options);
    $.each(prototype, function (prop, value) {
      if (!$.isFunction(value)) {
        proxiedPrototype[prop] = value;
        return;
      }
      proxiedPrototype[prop] = function () {
        function _super() {
          return base.prototype[prop].apply(this, arguments);
        }

        function _superApply(args) {
          return base.prototype[prop].apply(this, args);
        }

        return function () {
          var __super = this._super;
          var __superApply = this._superApply;
          var returnValue;

          this._super = _super;
          this._superApply = _superApply;

          returnValue = value.apply(this, arguments);

          this._super = __super;
          this._superApply = __superApply;

          return returnValue;
        };
      }();
    });
    constructor.prototype = $.widget.extend(basePrototype, {

      // TODO: remove support for widgetEventPrefix
      // always use the name + a colon as the prefix, e.g., draggable:start
      // don't prefix for widgets that aren't DOM-based
      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
    }, proxiedPrototype, {
      constructor: constructor,
      namespace: namespace,
      widgetName: name,
      widgetFullName: fullName
    });

    // If this widget is being redefined then we need to find all widgets that
    // are inheriting from it and redefine all of them so that they inherit from
    // the new version of this widget. We're essentially trying to replace one
    // level in the prototype chain.
    if (existingConstructor) {
      $.each(existingConstructor._childConstructors, function (i, child) {
        var childPrototype = child.prototype;

        // Redefine the child widget using the same prototype that was
        // originally used, but inherit from the new version of the base
        $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
      });

      // Remove the list of existing child constructors from the old constructor
      // so the old child constructors can be garbage collected
      delete existingConstructor._childConstructors;
    } else {
      base._childConstructors.push(constructor);
    }

    $.widget.bridge(name, constructor);

    return constructor;
  };

  $.widget.extend = function (target) {
    var input = widgetSlice.call(arguments, 1);
    var inputIndex = 0;
    var inputLength = input.length;
    var key;
    var value;

    for (; inputIndex < inputLength; inputIndex++) {
      for (key in input[inputIndex]) {
        value = input[inputIndex][key];
        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {

          // Clone objects
          if ($.isPlainObject(value)) {
            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) :

            // Don't extend strings, arrays, etc. with objects
            $.widget.extend({}, value);

            // Copy everything else by reference
          } else {
            target[key] = value;
          }
        }
      }
    }
    return target;
  };

  $.widget.bridge = function (name, object) {
    var fullName = object.prototype.widgetFullName || name;
    $.fn[name] = function (options) {
      var isMethodCall = typeof options === "string";
      var args = widgetSlice.call(arguments, 1);
      var returnValue = this;

      if (isMethodCall) {

        // If this is an empty collection, we need to have the instance method
        // return undefined instead of the jQuery instance
        if (!this.length && options === "instance") {
          returnValue = undefined;
        } else {
          this.each(function () {
            var methodValue;
            var instance = $.data(this, fullName);

            if (options === "instance") {
              returnValue = instance;
              return false;
            }

            if (!instance) {
              return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
            }

            if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
              return $.error("no such method '" + options + "' for " + name + " widget instance");
            }

            methodValue = instance[options].apply(instance, args);

            if (methodValue !== instance && methodValue !== undefined) {
              returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
              return false;
            }
          });
        }
      } else {

        // Allow multiple hashes to be passed on init
        if (args.length) {
          options = $.widget.extend.apply(null, [options].concat(args));
        }

        this.each(function () {
          var instance = $.data(this, fullName);
          if (instance) {
            instance.option(options || {});
            if (instance._init) {
              instance._init();
            }
          } else {
            $.data(this, fullName, new object(options, this));
          }
        });
      }

      return returnValue;
    };
  };

  $.Widget = function () /* options, element */{};
  $.Widget._childConstructors = [];

  $.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",

    options: {
      classes: {},
      disabled: false,

      // Callbacks
      create: null
    },

    _createWidget: function _createWidget(options, element) {
      element = $(element || this.defaultElement || this)[0];
      this.element = $(element);
      this.uuid = widgetUuid++;
      this.eventNamespace = "." + this.widgetName + this.uuid;

      this.bindings = $();
      this.hoverable = $();
      this.focusable = $();
      this.classesElementLookup = {};

      if (element !== this) {
        $.data(element, this.widgetFullName, this);
        this._on(true, this.element, {
          remove: function remove(event) {
            if (event.target === element) {
              this.destroy();
            }
          }
        });
        this.document = $(element.style ?

        // Element within the document
        element.ownerDocument :

        // Element is window or document
        element.document || element);
        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
      }

      this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);

      this._create();

      if (this.options.disabled) {
        this._setOptionDisabled(this.options.disabled);
      }

      this._trigger("create", null, this._getCreateEventData());
      this._init();
    },

    _getCreateOptions: function _getCreateOptions() {
      return {};
    },

    _getCreateEventData: $.noop,

    _create: $.noop,

    _init: $.noop,

    destroy: function destroy() {
      var that = this;

      this._destroy();
      $.each(this.classesElementLookup, function (key, value) {
        that._removeClass(value, key);
      });

      // We can probably remove the unbind calls in 2.0
      // all event bindings should go through this._on()
      this.element.off(this.eventNamespace).removeData(this.widgetFullName);
      this.widget().off(this.eventNamespace).removeAttr("aria-disabled");

      // Clean up events and states
      this.bindings.off(this.eventNamespace);
    },

    _destroy: $.noop,

    widget: function widget() {
      return this.element;
    },

    option: function option(key, value) {
      var options = key;
      var parts;
      var curOption;
      var i;

      if (arguments.length === 0) {

        // Don't return a reference to the internal hash
        return $.widget.extend({}, this.options);
      }

      if (typeof key === "string") {

        // Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
        options = {};
        parts = key.split(".");
        key = parts.shift();
        if (parts.length) {
          curOption = options[key] = $.widget.extend({}, this.options[key]);
          for (i = 0; i < parts.length - 1; i++) {
            curOption[parts[i]] = curOption[parts[i]] || {};
            curOption = curOption[parts[i]];
          }
          key = parts.pop();
          if (arguments.length === 1) {
            return curOption[key] === undefined ? null : curOption[key];
          }
          curOption[key] = value;
        } else {
          if (arguments.length === 1) {
            return this.options[key] === undefined ? null : this.options[key];
          }
          options[key] = value;
        }
      }

      this._setOptions(options);

      return this;
    },

    _setOptions: function _setOptions(options) {
      var key;

      for (key in options) {
        this._setOption(key, options[key]);
      }

      return this;
    },

    _setOption: function _setOption(key, value) {
      if (key === "classes") {
        this._setOptionClasses(value);
      }

      this.options[key] = value;

      if (key === "disabled") {
        this._setOptionDisabled(value);
      }

      return this;
    },

    _setOptionClasses: function _setOptionClasses(value) {
      var classKey, elements, currentElements;

      for (classKey in value) {
        currentElements = this.classesElementLookup[classKey];
        if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {
          continue;
        }

        // We are doing this to create a new jQuery object because the _removeClass() call
        // on the next line is going to destroy the reference to the current elements being
        // tracked. We need to save a copy of this collection so that we can add the new classes
        // below.
        elements = $(currentElements.get());
        this._removeClass(currentElements, classKey);

        // We don't use _addClass() here, because that uses this.options.classes
        // for generating the string of classes. We want to use the value passed in from
        // _setOption(), this is the new value of the classes option which was passed to
        // _setOption(). We pass this value directly to _classes().
        elements.addClass(this._classes({
          element: elements,
          keys: classKey,
          classes: value,
          add: true
        }));
      }
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value);

      // If the widget is becoming disabled, then nothing is interactive
      if (value) {
        this._removeClass(this.hoverable, null, "ui-state-hover");
        this._removeClass(this.focusable, null, "ui-state-focus");
      }
    },

    enable: function enable() {
      return this._setOptions({ disabled: false });
    },

    disable: function disable() {
      return this._setOptions({ disabled: true });
    },

    _classes: function _classes(options) {
      var full = [];
      var that = this;

      options = $.extend({
        element: this.element,
        classes: this.options.classes || {}
      }, options);

      function processClassString(classes, checkOption) {
        var current, i;
        for (i = 0; i < classes.length; i++) {
          current = that.classesElementLookup[classes[i]] || $();
          if (options.add) {
            current = $($.unique(current.get().concat(options.element.get())));
          } else {
            current = $(current.not(options.element).get());
          }
          that.classesElementLookup[classes[i]] = current;
          full.push(classes[i]);
          if (checkOption && options.classes[classes[i]]) {
            full.push(options.classes[classes[i]]);
          }
        }
      }

      this._on(options.element, {
        "remove": "_untrackClassesElement"
      });

      if (options.keys) {
        processClassString(options.keys.match(/\S+/g) || [], true);
      }
      if (options.extra) {
        processClassString(options.extra.match(/\S+/g) || []);
      }

      return full.join(" ");
    },

    _untrackClassesElement: function _untrackClassesElement(event) {
      var that = this;
      $.each(that.classesElementLookup, function (key, value) {
        if ($.inArray(event.target, value) !== -1) {
          that.classesElementLookup[key] = $(value.not(event.target).get());
        }
      });
    },

    _removeClass: function _removeClass(element, keys, extra) {
      return this._toggleClass(element, keys, extra, false);
    },

    _addClass: function _addClass(element, keys, extra) {
      return this._toggleClass(element, keys, extra, true);
    },

    _toggleClass: function _toggleClass(element, keys, extra, add) {
      add = typeof add === "boolean" ? add : extra;
      var shift = typeof element === "string" || element === null,
          options = {
        extra: shift ? keys : extra,
        keys: shift ? element : keys,
        element: shift ? this.element : element,
        add: add
      };
      options.element.toggleClass(this._classes(options), add);
      return this;
    },

    _on: function _on(suppressDisabledCheck, element, handlers) {
      var delegateElement;
      var instance = this;

      // No suppressDisabledCheck flag, shuffle arguments
      if (typeof suppressDisabledCheck !== "boolean") {
        handlers = element;
        element = suppressDisabledCheck;
        suppressDisabledCheck = false;
      }

      // No element argument, shuffle and use this.element
      if (!handlers) {
        handlers = element;
        element = this.element;
        delegateElement = this.widget();
      } else {
        element = delegateElement = $(element);
        this.bindings = this.bindings.add(element);
      }

      $.each(handlers, function (event, handler) {
        function handlerProxy() {

          // Allow widgets to customize the disabled handling
          // - disabled as an array instead of boolean
          // - disabled class as method for disabling individual parts
          if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
            return;
          }
          return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
        }

        // Copy the guid so direct unbinding works
        if (typeof handler !== "string") {
          handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
        }

        var match = event.match(/^([\w:-]*)\s*(.*)$/);
        var eventName = match[1] + instance.eventNamespace;
        var selector = match[2];

        if (selector) {
          delegateElement.on(eventName, selector, handlerProxy);
        } else {
          element.on(eventName, handlerProxy);
        }
      });
    },

    _off: function _off(element, eventName) {
      eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
      element.off(eventName).off(eventName);

      // Clear the stack to avoid memory leaks (#10056)
      this.bindings = $(this.bindings.not(element).get());
      this.focusable = $(this.focusable.not(element).get());
      this.hoverable = $(this.hoverable.not(element).get());
    },

    _delay: function _delay(handler, delay) {
      function handlerProxy() {
        return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
      }
      var instance = this;
      return setTimeout(handlerProxy, delay || 0);
    },

    _hoverable: function _hoverable(element) {
      this.hoverable = this.hoverable.add(element);
      this._on(element, {
        mouseenter: function mouseenter(event) {
          this._addClass($(event.currentTarget), null, "ui-state-hover");
        },
        mouseleave: function mouseleave(event) {
          this._removeClass($(event.currentTarget), null, "ui-state-hover");
        }
      });
    },

    _focusable: function _focusable(element) {
      this.focusable = this.focusable.add(element);
      this._on(element, {
        focusin: function focusin(event) {
          this._addClass($(event.currentTarget), null, "ui-state-focus");
        },
        focusout: function focusout(event) {
          this._removeClass($(event.currentTarget), null, "ui-state-focus");
        }
      });
    },

    _trigger: function _trigger(type, event, data) {
      var prop, orig;
      var callback = this.options[type];

      data = data || {};
      event = $.Event(event);
      event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();

      // The original event may come from any element
      // so we need to reset the target on the new event
      event.target = this.element[0];

      // Copy original event properties over to the new event
      orig = event.originalEvent;
      if (orig) {
        for (prop in orig) {
          if (!(prop in event)) {
            event[prop] = orig[prop];
          }
        }
      }

      this.element.trigger(event, data);
      return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
    }
  };

  $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) {
    $.Widget.prototype["_" + method] = function (element, options, callback) {
      if (typeof options === "string") {
        options = { effect: options };
      }

      var hasOptions;
      var effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;

      options = options || {};
      if (typeof options === "number") {
        options = { duration: options };
      }

      hasOptions = !$.isEmptyObject(options);
      options.complete = callback;

      if (options.delay) {
        element.delay(options.delay);
      }

      if (hasOptions && $.effects && $.effects.effect[effectName]) {
        element[method](options);
      } else if (effectName !== method && element[effectName]) {
        element[effectName](options.duration, options.easing, callback);
      } else {
        element.queue(function (next) {
          $(this)[method]();
          if (callback) {
            callback.call(element[0]);
          }
          next();
        });
      }
    };
  });

  var widget = $.widget;

  /*!
   * jQuery UI Position 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   *
   * http://api.jqueryui.com/position/
   */

  //>>label: Position
  //>>group: Core
  //>>description: Positions elements relative to other elements.
  //>>docs: http://api.jqueryui.com/position/
  //>>demos: http://jqueryui.com/position/


  (function () {
    var cachedScrollbarWidth,
        max = Math.max,
        abs = Math.abs,
        rhorizontal = /left|center|right/,
        rvertical = /top|center|bottom/,
        roffset = /[\+\-]\d+(\.[\d]+)?%?/,
        rposition = /^\w+/,
        rpercent = /%$/,
        _position = $.fn.position;

    function getOffsets(offsets, width, height) {
      return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];
    }

    function parseCss(element, property) {
      return parseInt($.css(element, property), 10) || 0;
    }

    function getDimensions(elem) {
      var raw = elem[0];
      if (raw.nodeType === 9) {
        return {
          width: elem.width(),
          height: elem.height(),
          offset: { top: 0, left: 0 }
        };
      }
      if ($.isWindow(raw)) {
        return {
          width: elem.width(),
          height: elem.height(),
          offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
        };
      }
      if (raw.preventDefault) {
        return {
          width: 0,
          height: 0,
          offset: { top: raw.pageY, left: raw.pageX }
        };
      }
      return {
        width: elem.outerWidth(),
        height: elem.outerHeight(),
        offset: elem.offset()
      };
    }

    $.position = {
      scrollbarWidth: function scrollbarWidth() {
        if (cachedScrollbarWidth !== undefined) {
          return cachedScrollbarWidth;
        }
        var w1,
            w2,
            div = $("<div " + "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" + "<div style='height:100px;width:auto;'></div></div>"),
            innerDiv = div.children()[0];

        $("body").append(div);
        w1 = innerDiv.offsetWidth;
        div.css("overflow", "scroll");

        w2 = innerDiv.offsetWidth;

        if (w1 === w2) {
          w2 = div[0].clientWidth;
        }

        div.remove();

        return cachedScrollbarWidth = w1 - w2;
      },
      getScrollInfo: function getScrollInfo(within) {
        var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"),
            overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"),
            hasOverflowX = overflowX === "scroll" || overflowX === "auto" && within.width < within.element[0].scrollWidth,
            hasOverflowY = overflowY === "scroll" || overflowY === "auto" && within.height < within.element[0].scrollHeight;
        return {
          width: hasOverflowY ? $.position.scrollbarWidth() : 0,
          height: hasOverflowX ? $.position.scrollbarWidth() : 0
        };
      },
      getWithinInfo: function getWithinInfo(element) {
        var withinElement = $(element || window),
            isWindow = $.isWindow(withinElement[0]),
            isDocument = !!withinElement[0] && withinElement[0].nodeType === 9,
            hasOffset = !isWindow && !isDocument;
        return {
          element: withinElement,
          isWindow: isWindow,
          isDocument: isDocument,
          offset: hasOffset ? $(element).offset() : { left: 0, top: 0 },
          scrollLeft: withinElement.scrollLeft(),
          scrollTop: withinElement.scrollTop(),
          width: withinElement.outerWidth(),
          height: withinElement.outerHeight()
        };
      }
    };

    $.fn.position = function (options) {
      if (!options || !options.of) {
        return _position.apply(this, arguments);
      }

      // Make a copy, we don't want to modify arguments
      options = $.extend({}, options);

      var atOffset,
          targetWidth,
          targetHeight,
          targetOffset,
          basePosition,
          dimensions,
          target = $(options.of),
          within = $.position.getWithinInfo(options.within),
          scrollInfo = $.position.getScrollInfo(within),
          collision = (options.collision || "flip").split(" "),
          offsets = {};

      dimensions = getDimensions(target);
      if (target[0].preventDefault) {

        // Force left top to allow flipping
        options.at = "left top";
      }
      targetWidth = dimensions.width;
      targetHeight = dimensions.height;
      targetOffset = dimensions.offset;

      // Clone to reuse original targetOffset later
      basePosition = $.extend({}, targetOffset);

      // Force my and at to have valid horizontal and vertical positions
      // if a value is missing or invalid, it will be converted to center
      $.each(["my", "at"], function () {
        var pos = (options[this] || "").split(" "),
            horizontalOffset,
            verticalOffset;

        if (pos.length === 1) {
          pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"];
        }
        pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
        pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";

        // Calculate offsets
        horizontalOffset = roffset.exec(pos[0]);
        verticalOffset = roffset.exec(pos[1]);
        offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];

        // Reduce to just the positions without the offsets
        options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];
      });

      // Normalize collision option
      if (collision.length === 1) {
        collision[1] = collision[0];
      }

      if (options.at[0] === "right") {
        basePosition.left += targetWidth;
      } else if (options.at[0] === "center") {
        basePosition.left += targetWidth / 2;
      }

      if (options.at[1] === "bottom") {
        basePosition.top += targetHeight;
      } else if (options.at[1] === "center") {
        basePosition.top += targetHeight / 2;
      }

      atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
      basePosition.left += atOffset[0];
      basePosition.top += atOffset[1];

      return this.each(function () {
        var collisionPosition,
            using,
            elem = $(this),
            elemWidth = elem.outerWidth(),
            elemHeight = elem.outerHeight(),
            marginLeft = parseCss(this, "marginLeft"),
            marginTop = parseCss(this, "marginTop"),
            collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width,
            collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height,
            position = $.extend({}, basePosition),
            myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());

        if (options.my[0] === "right") {
          position.left -= elemWidth;
        } else if (options.my[0] === "center") {
          position.left -= elemWidth / 2;
        }

        if (options.my[1] === "bottom") {
          position.top -= elemHeight;
        } else if (options.my[1] === "center") {
          position.top -= elemHeight / 2;
        }

        position.left += myOffset[0];
        position.top += myOffset[1];

        collisionPosition = {
          marginLeft: marginLeft,
          marginTop: marginTop
        };

        $.each(["left", "top"], function (i, dir) {
          if ($.ui.position[collision[i]]) {
            $.ui.position[collision[i]][dir](position, {
              targetWidth: targetWidth,
              targetHeight: targetHeight,
              elemWidth: elemWidth,
              elemHeight: elemHeight,
              collisionPosition: collisionPosition,
              collisionWidth: collisionWidth,
              collisionHeight: collisionHeight,
              offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
              my: options.my,
              at: options.at,
              within: within,
              elem: elem
            });
          }
        });

        if (options.using) {

          // Adds feedback as second argument to using callback, if present
          using = function using(props) {
            var left = targetOffset.left - position.left,
                right = left + targetWidth - elemWidth,
                top = targetOffset.top - position.top,
                bottom = top + targetHeight - elemHeight,
                feedback = {
              target: {
                element: target,
                left: targetOffset.left,
                top: targetOffset.top,
                width: targetWidth,
                height: targetHeight
              },
              element: {
                element: elem,
                left: position.left,
                top: position.top,
                width: elemWidth,
                height: elemHeight
              },
              horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
              vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
            };
            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
              feedback.horizontal = "center";
            }
            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
              feedback.vertical = "middle";
            }
            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
              feedback.important = "horizontal";
            } else {
              feedback.important = "vertical";
            }
            options.using.call(this, props, feedback);
          };
        }

        elem.offset($.extend(position, { using: using }));
      });
    };

    $.ui.position = {
      fit: {
        left: function left(position, data) {
          var within = data.within,
              withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
              outerWidth = within.width,
              collisionPosLeft = position.left - data.collisionPosition.marginLeft,
              overLeft = withinOffset - collisionPosLeft,
              overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
              newOverRight;

          // Element is wider than within
          if (data.collisionWidth > outerWidth) {

            // Element is initially over the left side of within
            if (overLeft > 0 && overRight <= 0) {
              newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
              position.left += overLeft - newOverRight;

              // Element is initially over right side of within
            } else if (overRight > 0 && overLeft <= 0) {
              position.left = withinOffset;

              // Element is initially over both left and right sides of within
            } else {
              if (overLeft > overRight) {
                position.left = withinOffset + outerWidth - data.collisionWidth;
              } else {
                position.left = withinOffset;
              }
            }

            // Too far left -> align with left edge
          } else if (overLeft > 0) {
            position.left += overLeft;

            // Too far right -> align with right edge
          } else if (overRight > 0) {
            position.left -= overRight;

            // Adjust based on position and margin
          } else {
            position.left = max(position.left - collisionPosLeft, position.left);
          }
        },
        top: function top(position, data) {
          var within = data.within,
              withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
              outerHeight = data.within.height,
              collisionPosTop = position.top - data.collisionPosition.marginTop,
              overTop = withinOffset - collisionPosTop,
              overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
              newOverBottom;

          // Element is taller than within
          if (data.collisionHeight > outerHeight) {

            // Element is initially over the top of within
            if (overTop > 0 && overBottom <= 0) {
              newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
              position.top += overTop - newOverBottom;

              // Element is initially over bottom of within
            } else if (overBottom > 0 && overTop <= 0) {
              position.top = withinOffset;

              // Element is initially over both top and bottom of within
            } else {
              if (overTop > overBottom) {
                position.top = withinOffset + outerHeight - data.collisionHeight;
              } else {
                position.top = withinOffset;
              }
            }

            // Too far up -> align with top
          } else if (overTop > 0) {
            position.top += overTop;

            // Too far down -> align with bottom edge
          } else if (overBottom > 0) {
            position.top -= overBottom;

            // Adjust based on position and margin
          } else {
            position.top = max(position.top - collisionPosTop, position.top);
          }
        }
      },
      flip: {
        left: function left(position, data) {
          var within = data.within,
              withinOffset = within.offset.left + within.scrollLeft,
              outerWidth = within.width,
              offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
              collisionPosLeft = position.left - data.collisionPosition.marginLeft,
              overLeft = collisionPosLeft - offsetLeft,
              overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
              myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0,
              atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0,
              offset = -2 * data.offset[0],
              newOverRight,
              newOverLeft;

          if (overLeft < 0) {
            newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
            if (newOverRight < 0 || newOverRight < abs(overLeft)) {
              position.left += myOffset + atOffset + offset;
            }
          } else if (overRight > 0) {
            newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
              position.left += myOffset + atOffset + offset;
            }
          }
        },
        top: function top(position, data) {
          var within = data.within,
              withinOffset = within.offset.top + within.scrollTop,
              outerHeight = within.height,
              offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
              collisionPosTop = position.top - data.collisionPosition.marginTop,
              overTop = collisionPosTop - offsetTop,
              overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
              top = data.my[1] === "top",
              myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0,
              atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0,
              offset = -2 * data.offset[1],
              newOverTop,
              newOverBottom;
          if (overTop < 0) {
            newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
            if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
              position.top += myOffset + atOffset + offset;
            }
          } else if (overBottom > 0) {
            newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
            if (newOverTop > 0 || abs(newOverTop) < overBottom) {
              position.top += myOffset + atOffset + offset;
            }
          }
        }
      },
      flipfit: {
        left: function left() {
          $.ui.position.flip.left.apply(this, arguments);
          $.ui.position.fit.left.apply(this, arguments);
        },
        top: function top() {
          $.ui.position.flip.top.apply(this, arguments);
          $.ui.position.fit.top.apply(this, arguments);
        }
      }
    };
  })();

  var position = $.ui.position;

  /*!
   * jQuery UI :data 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: :data Selector
  //>>group: Core
  //>>description: Selects elements which have data stored under the specified key.
  //>>docs: http://api.jqueryui.com/data-selector/


  var data = $.extend($.expr[":"], {
    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
      return function (elem) {
        return !!$.data(elem, dataName);
      };
    }) :

    // Support: jQuery <1.8
    function (elem, i, match) {
      return !!$.data(elem, match[3]);
    }
  });

  /*!
   * jQuery UI Disable Selection 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: disableSelection
  //>>group: Core
  //>>description: Disable selection of text content within the set of matched elements.
  //>>docs: http://api.jqueryui.com/disableSelection/

  // This file is deprecated


  var disableSelection = $.fn.extend({
    disableSelection: function () {
      var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";

      return function () {
        return this.on(eventType + ".ui-disableSelection", function (event) {
          event.preventDefault();
        });
      };
    }(),

    enableSelection: function enableSelection() {
      return this.off(".ui-disableSelection");
    }
  });

  /*!
   * jQuery UI Focusable 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: :focusable Selector
  //>>group: Core
  //>>description: Selects elements which can be focused.
  //>>docs: http://api.jqueryui.com/focusable-selector/


  // Selectors
  $.ui.focusable = function (element, hasTabindex) {
    var map,
        mapName,
        img,
        focusableIfVisible,
        fieldset,
        nodeName = element.nodeName.toLowerCase();

    if ("area" === nodeName) {
      map = element.parentNode;
      mapName = map.name;
      if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
        return false;
      }
      img = $("img[usemap='#" + mapName + "']");
      return img.length > 0 && img.is(":visible");
    }

    if (/^(input|select|textarea|button|object)$/.test(nodeName)) {
      focusableIfVisible = !element.disabled;

      if (focusableIfVisible) {

        // Form controls within a disabled fieldset are disabled.
        // However, controls within the fieldset's legend do not get disabled.
        // Since controls generally aren't placed inside legends, we skip
        // this portion of the check.
        fieldset = $(element).closest("fieldset")[0];
        if (fieldset) {
          focusableIfVisible = !fieldset.disabled;
        }
      }
    } else if ("a" === nodeName) {
      focusableIfVisible = element.href || hasTabindex;
    } else {
      focusableIfVisible = hasTabindex;
    }

    return focusableIfVisible && $(element).is(":visible") && visible($(element));
  };

  // Support: IE 8 only
  // IE 8 doesn't resolve inherit to visible/hidden for computed values
  function visible(element) {
    var visibility = element.css("visibility");
    while (visibility === "inherit") {
      element = element.parent();
      visibility = element.css("visibility");
    }
    return visibility !== "hidden";
  }

  $.extend($.expr[":"], {
    focusable: function focusable(element) {
      return $.ui.focusable(element, $.attr(element, "tabindex") != null);
    }
  });

  var focusable = $.ui.focusable;

  // Support: IE8 Only
  // IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
  // with a string, so we need to find the proper form.
  var form = $.fn.form = function () {
    return typeof this[0].form === "string" ? this.closest("form") : $(this[0].form);
  };

  /*!
   * jQuery UI Form Reset Mixin 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Form Reset Mixin
  //>>group: Core
  //>>description: Refresh input widgets when their form is reset
  //>>docs: http://api.jqueryui.com/form-reset-mixin/


  var formResetMixin = $.ui.formResetMixin = {
    _formResetHandler: function _formResetHandler() {
      var form = $(this);

      // Wait for the form reset to actually happen before refreshing
      setTimeout(function () {
        var instances = form.data("ui-form-reset-instances");
        $.each(instances, function () {
          this.refresh();
        });
      });
    },

    _bindFormResetHandler: function _bindFormResetHandler() {
      this.form = this.element.form();
      if (!this.form.length) {
        return;
      }

      var instances = this.form.data("ui-form-reset-instances") || [];
      if (!instances.length) {

        // We don't use _on() here because we use a single event handler per form
        this.form.on("reset.ui-form-reset", this._formResetHandler);
      }
      instances.push(this);
      this.form.data("ui-form-reset-instances", instances);
    },

    _unbindFormResetHandler: function _unbindFormResetHandler() {
      if (!this.form.length) {
        return;
      }

      var instances = this.form.data("ui-form-reset-instances");
      instances.splice($.inArray(this, instances), 1);
      if (instances.length) {
        this.form.data("ui-form-reset-instances", instances);
      } else {
        this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset");
      }
    }
  };

  /*!
   * jQuery UI Support for jQuery core 1.7.x 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   *
   */

  //>>label: jQuery 1.7 Support
  //>>group: Core
  //>>description: Support version 1.7.x of jQuery core


  // Support: jQuery 1.7 only
  // Not a great way to check versions, but since we only support 1.7+ and only
  // need to detect <1.8, this is a simple check that should suffice. Checking
  // for "1.7." would be a bit safer, but the version string is 1.7, not 1.7.0
  // and we'll never reach 1.70.0 (if we do, we certainly won't be supporting
  // 1.7 anymore). See #11197 for why we're not using feature detection.
  if ($.fn.jquery.substring(0, 3) === "1.7") {

    // Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()
    // Unlike jQuery Core 1.8+, these only support numeric values to set the
    // dimensions in pixels
    $.each(["Width", "Height"], function (i, name) {
      var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
          type = name.toLowerCase(),
          orig = {
        innerWidth: $.fn.innerWidth,
        innerHeight: $.fn.innerHeight,
        outerWidth: $.fn.outerWidth,
        outerHeight: $.fn.outerHeight
      };

      function reduce(elem, size, border, margin) {
        $.each(side, function () {
          size -= parseFloat($.css(elem, "padding" + this)) || 0;
          if (border) {
            size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
          }
          if (margin) {
            size -= parseFloat($.css(elem, "margin" + this)) || 0;
          }
        });
        return size;
      }

      $.fn["inner" + name] = function (size) {
        if (size === undefined) {
          return orig["inner" + name].call(this);
        }

        return this.each(function () {
          $(this).css(type, reduce(this, size) + "px");
        });
      };

      $.fn["outer" + name] = function (size, margin) {
        if (typeof size !== "number") {
          return orig["outer" + name].call(this, size);
        }

        return this.each(function () {
          $(this).css(type, reduce(this, size, true, margin) + "px");
        });
      };
    });

    $.fn.addBack = function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    };
  }

  ;
  /*!
   * jQuery UI Keycode 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Keycode
  //>>group: Core
  //>>description: Provide keycodes as keynames
  //>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/


  var keycode = $.ui.keyCode = {
    BACKSPACE: 8,
    COMMA: 188,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    LEFT: 37,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SPACE: 32,
    TAB: 9,
    UP: 38
  };

  // Internal use only
  var escapeSelector = $.ui.escapeSelector = function () {
    var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
    return function (selector) {
      return selector.replace(selectorEscape, "\\$1");
    };
  }();

  /*!
   * jQuery UI Labels 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: labels
  //>>group: Core
  //>>description: Find all the labels associated with a given input
  //>>docs: http://api.jqueryui.com/labels/


  var labels = $.fn.labels = function () {
    var ancestor, selector, id, labels, ancestors;

    // Check control.labels first
    if (this[0].labels && this[0].labels.length) {
      return this.pushStack(this[0].labels);
    }

    // Support: IE <= 11, FF <= 37, Android <= 2.3 only
    // Above browsers do not support control.labels. Everything below is to support them
    // as well as document fragments. control.labels does not work on document fragments
    labels = this.eq(0).parents("label");

    // Look for the label based on the id
    id = this.attr("id");
    if (id) {

      // We don't search against the document in case the element
      // is disconnected from the DOM
      ancestor = this.eq(0).parents().last();

      // Get a full set of top level ancestors
      ancestors = ancestor.add(ancestor.length ? ancestor.siblings() : this.siblings());

      // Create a selector for the label based on the id
      selector = "label[for='" + $.ui.escapeSelector(id) + "']";

      labels = labels.add(ancestors.find(selector).addBack(selector));
    }

    // Return whatever we have found for labels
    return this.pushStack(labels);
  };

  /*!
   * jQuery UI Scroll Parent 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: scrollParent
  //>>group: Core
  //>>description: Get the closest ancestor element that is scrollable.
  //>>docs: http://api.jqueryui.com/scrollParent/


  var scrollParent = $.fn.scrollParent = function (includeHidden) {
    var position = this.css("position"),
        excludeStaticParent = position === "absolute",
        overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
        scrollParent = this.parents().filter(function () {
      var parent = $(this);
      if (excludeStaticParent && parent.css("position") === "static") {
        return false;
      }
      return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
    }).eq(0);

    return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
  };

  /*!
   * jQuery UI Tabbable 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: :tabbable Selector
  //>>group: Core
  //>>description: Selects elements which can be tabbed to.
  //>>docs: http://api.jqueryui.com/tabbable-selector/


  var tabbable = $.extend($.expr[":"], {
    tabbable: function tabbable(element) {
      var tabIndex = $.attr(element, "tabindex"),
          hasTabindex = tabIndex != null;
      return (!hasTabindex || tabIndex >= 0) && $.ui.focusable(element, hasTabindex);
    }
  });

  /*!
   * jQuery UI Unique ID 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: uniqueId
  //>>group: Core
  //>>description: Functions to generate and remove uniqueId's
  //>>docs: http://api.jqueryui.com/uniqueId/


  var uniqueId = $.fn.extend({
    uniqueId: function () {
      var uuid = 0;

      return function () {
        return this.each(function () {
          if (!this.id) {
            this.id = "ui-id-" + ++uuid;
          }
        });
      };
    }(),

    removeUniqueId: function removeUniqueId() {
      return this.each(function () {
        if (/^ui-id-\d+$/.test(this.id)) {
          $(this).removeAttr("id");
        }
      });
    }
  });

  // This file is deprecated
  var ie = $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());

  /*!
   * jQuery UI Mouse 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Mouse
  //>>group: Widgets
  //>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
  //>>docs: http://api.jqueryui.com/mouse/


  var mouseHandled = false;
  $(document).on("mouseup", function () {
    mouseHandled = false;
  });

  var widgetsMouse = $.widget("ui.mouse", {
    version: "1.12.1",
    options: {
      cancel: "input, textarea, button, select, option",
      distance: 1,
      delay: 0
    },
    _mouseInit: function _mouseInit() {
      var that = this;

      this.element.on("mousedown." + this.widgetName, function (event) {
        return that._mouseDown(event);
      }).on("click." + this.widgetName, function (event) {
        if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
          $.removeData(event.target, that.widgetName + ".preventClickEvent");
          event.stopImmediatePropagation();
          return false;
        }
      });

      this.started = false;
    },

    // TODO: make sure destroying one instance of mouse doesn't mess with
    // other instances of mouse
    _mouseDestroy: function _mouseDestroy() {
      this.element.off("." + this.widgetName);
      if (this._mouseMoveDelegate) {
        this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
      }
    },

    _mouseDown: function _mouseDown(event) {

      // don't let more than one widget handle mouseStart
      if (mouseHandled) {
        return;
      }

      this._mouseMoved = false;

      // We may have missed mouseup (out of window)
      this._mouseStarted && this._mouseUp(event);

      this._mouseDownEvent = event;

      var that = this,
          btnIsLeft = event.which === 1,


      // event.target.nodeName works around a bug in IE 8 with
      // disabled inputs (#7620)
      elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
        return true;
      }

      this.mouseDelayMet = !this.options.delay;
      if (!this.mouseDelayMet) {
        this._mouseDelayTimer = setTimeout(function () {
          that.mouseDelayMet = true;
        }, this.options.delay);
      }

      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        this._mouseStarted = this._mouseStart(event) !== false;
        if (!this._mouseStarted) {
          event.preventDefault();
          return true;
        }
      }

      // Click event may never have fired (Gecko & Opera)
      if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
        $.removeData(event.target, this.widgetName + ".preventClickEvent");
      }

      // These delegates are required to keep context
      this._mouseMoveDelegate = function (event) {
        return that._mouseMove(event);
      };
      this._mouseUpDelegate = function (event) {
        return that._mouseUp(event);
      };

      this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate);

      event.preventDefault();

      mouseHandled = true;
      return true;
    },

    _mouseMove: function _mouseMove(event) {

      // Only check for mouseups outside the document if you've moved inside the document
      // at least once. This prevents the firing of mouseup in the case of IE<9, which will
      // fire a mousemove event if content is placed under the cursor. See #7778
      // Support: IE <9
      if (this._mouseMoved) {

        // IE mouseup check - mouseup happened when mouse was out of window
        if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
          return this._mouseUp(event);

          // Iframe mouseup check - mouseup occurred in another document
        } else if (!event.which) {

          // Support: Safari <=8 - 9
          // Safari sets which to 0 if you press any of the following keys
          // during a drag (#14461)
          if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {
            this.ignoreMissingWhich = true;
          } else if (!this.ignoreMissingWhich) {
            return this._mouseUp(event);
          }
        }
      }

      if (event.which || event.button) {
        this._mouseMoved = true;
      }

      if (this._mouseStarted) {
        this._mouseDrag(event);
        return event.preventDefault();
      }

      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
      }

      return !this._mouseStarted;
    },

    _mouseUp: function _mouseUp(event) {
      this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);

      if (this._mouseStarted) {
        this._mouseStarted = false;

        if (event.target === this._mouseDownEvent.target) {
          $.data(event.target, this.widgetName + ".preventClickEvent", true);
        }

        this._mouseStop(event);
      }

      if (this._mouseDelayTimer) {
        clearTimeout(this._mouseDelayTimer);
        delete this._mouseDelayTimer;
      }

      this.ignoreMissingWhich = false;
      mouseHandled = false;
      event.preventDefault();
    },

    _mouseDistanceMet: function _mouseDistanceMet(event) {
      return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
    },

    _mouseDelayMet: function _mouseDelayMet() /* event */{
      return this.mouseDelayMet;
    },

    // These are placeholder methods, to be overriden by extending plugin
    _mouseStart: function _mouseStart() /* event */{},
    _mouseDrag: function _mouseDrag() /* event */{},
    _mouseStop: function _mouseStop() /* event */{},
    _mouseCapture: function _mouseCapture() /* event */{
      return true;
    }
  });

  // $.ui.plugin is deprecated. Use $.widget() extensions instead.
  var plugin = $.ui.plugin = {
    add: function add(module, option, set) {
      var i,
          proto = $.ui[module].prototype;
      for (i in set) {
        proto.plugins[i] = proto.plugins[i] || [];
        proto.plugins[i].push([option, set[i]]);
      }
    },
    call: function call(instance, name, args, allowDisconnected) {
      var i,
          set = instance.plugins[name];

      if (!set) {
        return;
      }

      if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
        return;
      }

      for (i = 0; i < set.length; i++) {
        if (instance.options[set[i][0]]) {
          set[i][1].apply(instance.element, args);
        }
      }
    }
  };

  var safeActiveElement = $.ui.safeActiveElement = function (document) {
    var activeElement;

    // Support: IE 9 only
    // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
    try {
      activeElement = document.activeElement;
    } catch (error) {
      activeElement = document.body;
    }

    // Support: IE 9 - 11 only
    // IE may return null instead of an element
    // Interestingly, this only seems to occur when NOT in an iframe
    if (!activeElement) {
      activeElement = document.body;
    }

    // Support: IE 11 only
    // IE11 returns a seemingly empty object in some cases when accessing
    // document.activeElement from an <iframe>
    if (!activeElement.nodeName) {
      activeElement = document.body;
    }

    return activeElement;
  };

  var safeBlur = $.ui.safeBlur = function (element) {

    // Support: IE9 - 10 only
    // If the <body> is blurred, IE will switch windows, see #9420
    if (element && element.nodeName.toLowerCase() !== "body") {
      $(element).trigger("blur");
    }
  };

  /*!
   * jQuery UI Draggable 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Draggable
  //>>group: Interactions
  //>>description: Enables dragging functionality for any element.
  //>>docs: http://api.jqueryui.com/draggable/
  //>>demos: http://jqueryui.com/draggable/
  //>>css.structure: ../../themes/base/draggable.css


  $.widget("ui.draggable", $.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "drag",
    options: {
      addClasses: true,
      appendTo: "parent",
      axis: false,
      connectToSortable: false,
      containment: false,
      cursor: "auto",
      cursorAt: false,
      grid: false,
      handle: false,
      helper: "original",
      iframeFix: false,
      opacity: false,
      refreshPositions: false,
      revert: false,
      revertDuration: 500,
      scope: "default",
      scroll: true,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      snap: false,
      snapMode: "both",
      snapTolerance: 20,
      stack: false,
      zIndex: false,

      // Callbacks
      drag: null,
      start: null,
      stop: null
    },
    _create: function _create() {

      if (this.options.helper === "original") {
        this._setPositionRelative();
      }
      if (this.options.addClasses) {
        this._addClass("ui-draggable");
      }
      this._setHandleClassName();

      this._mouseInit();
    },

    _setOption: function _setOption(key, value) {
      this._super(key, value);
      if (key === "handle") {
        this._removeHandleClassName();
        this._setHandleClassName();
      }
    },

    _destroy: function _destroy() {
      if ((this.helper || this.element).is(".ui-draggable-dragging")) {
        this.destroyOnClear = true;
        return;
      }
      this._removeHandleClassName();
      this._mouseDestroy();
    },

    _mouseCapture: function _mouseCapture(event) {
      var o = this.options;

      // Among others, prevent a drag on a resizable-handle
      if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
        return false;
      }

      //Quit if we're not on a valid handle
      this.handle = this._getHandle(event);
      if (!this.handle) {
        return false;
      }

      this._blurActiveElement(event);

      this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);

      return true;
    },

    _blockFrames: function _blockFrames(selector) {
      this.iframeBlocks = this.document.find(selector).map(function () {
        var iframe = $(this);

        return $("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];
      });
    },

    _unblockFrames: function _unblockFrames() {
      if (this.iframeBlocks) {
        this.iframeBlocks.remove();
        delete this.iframeBlocks;
      }
    },

    _blurActiveElement: function _blurActiveElement(event) {
      var activeElement = $.ui.safeActiveElement(this.document[0]),
          target = $(event.target);

      // Don't blur if the event occurred on an element that is within
      // the currently focused element
      // See #10527, #12472
      if (target.closest(activeElement).length) {
        return;
      }

      // Blur any element that currently has focus, see #4261
      $.ui.safeBlur(activeElement);
    },

    _mouseStart: function _mouseStart(event) {

      var o = this.options;

      //Create and append the visible helper
      this.helper = this._createHelper(event);

      this._addClass(this.helper, "ui-draggable-dragging");

      //Cache the helper size
      this._cacheHelperProportions();

      //If ddmanager is used for droppables, set the global draggable
      if ($.ui.ddmanager) {
        $.ui.ddmanager.current = this;
      }

      /*
       * - Position generation -
       * This block generates everything position related - it's the core of draggables.
       */

      //Cache the margins of the original element
      this._cacheMargins();

      //Store the helper's css position
      this.cssPosition = this.helper.css("position");
      this.scrollParent = this.helper.scrollParent(true);
      this.offsetParent = this.helper.offsetParent();
      this.hasFixedAncestor = this.helper.parents().filter(function () {
        return $(this).css("position") === "fixed";
      }).length > 0;

      //The element's absolute position on the page minus margins
      this.positionAbs = this.element.offset();
      this._refreshOffsets(event);

      //Generate the original position
      this.originalPosition = this.position = this._generatePosition(event, false);
      this.originalPageX = event.pageX;
      this.originalPageY = event.pageY;

      //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);

      //Set a containment if given in the options
      this._setContainment();

      //Trigger event + callbacks
      if (this._trigger("start", event) === false) {
        this._clear();
        return false;
      }

      //Recache the helper size
      this._cacheHelperProportions();

      //Prepare the droppable offsets
      if ($.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(this, event);
      }

      // Execute the drag once - this causes the helper not to be visible before getting its
      // correct position
      this._mouseDrag(event, true);

      // If the ddmanager is used for droppables, inform the manager that dragging has started
      // (see #5003)
      if ($.ui.ddmanager) {
        $.ui.ddmanager.dragStart(this, event);
      }

      return true;
    },

    _refreshOffsets: function _refreshOffsets(event) {
      this.offset = {
        top: this.positionAbs.top - this.margins.top,
        left: this.positionAbs.left - this.margins.left,
        scroll: false,
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset()
      };

      this.offset.click = {
        left: event.pageX - this.offset.left,
        top: event.pageY - this.offset.top
      };
    },

    _mouseDrag: function _mouseDrag(event, noPropagation) {

      // reset any necessary cached properties (see #5009)
      if (this.hasFixedAncestor) {
        this.offset.parent = this._getParentOffset();
      }

      //Compute the helpers position
      this.position = this._generatePosition(event, true);
      this.positionAbs = this._convertPositionTo("absolute");

      //Call plugins and callbacks and use the resulting position if something is returned
      if (!noPropagation) {
        var ui = this._uiHash();
        if (this._trigger("drag", event, ui) === false) {
          this._mouseUp(new $.Event("mouseup", event));
          return false;
        }
        this.position = ui.position;
      }

      this.helper[0].style.left = this.position.left + "px";
      this.helper[0].style.top = this.position.top + "px";

      if ($.ui.ddmanager) {
        $.ui.ddmanager.drag(this, event);
      }

      return false;
    },

    _mouseStop: function _mouseStop(event) {

      //If we are using droppables, inform the manager about the drop
      var that = this,
          dropped = false;
      if ($.ui.ddmanager && !this.options.dropBehaviour) {
        dropped = $.ui.ddmanager.drop(this, event);
      }

      //if a drop comes from outside (a sortable)
      if (this.dropped) {
        dropped = this.dropped;
        this.dropped = false;
      }

      if (this.options.revert === "invalid" && !dropped || this.options.revert === "valid" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {
        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
          if (that._trigger("stop", event) !== false) {
            that._clear();
          }
        });
      } else {
        if (this._trigger("stop", event) !== false) {
          this._clear();
        }
      }

      return false;
    },

    _mouseUp: function _mouseUp(event) {
      this._unblockFrames();

      // If the ddmanager is used for droppables, inform the manager that dragging has stopped
      // (see #5003)
      if ($.ui.ddmanager) {
        $.ui.ddmanager.dragStop(this, event);
      }

      // Only need to focus if the event occurred on the draggable itself, see #10527
      if (this.handleElement.is(event.target)) {

        // The interaction is over; whether or not the click resulted in a drag,
        // focus the element
        this.element.trigger("focus");
      }

      return $.ui.mouse.prototype._mouseUp.call(this, event);
    },

    cancel: function cancel() {

      if (this.helper.is(".ui-draggable-dragging")) {
        this._mouseUp(new $.Event("mouseup", { target: this.element[0] }));
      } else {
        this._clear();
      }

      return this;
    },

    _getHandle: function _getHandle(event) {
      return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
    },

    _setHandleClassName: function _setHandleClassName() {
      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
      this._addClass(this.handleElement, "ui-draggable-handle");
    },

    _removeHandleClassName: function _removeHandleClassName() {
      this._removeClass(this.handleElement, "ui-draggable-handle");
    },

    _createHelper: function _createHelper(event) {

      var o = this.options,
          helperIsFunction = $.isFunction(o.helper),
          helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;

      if (!helper.parents("body").length) {
        helper.appendTo(o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo);
      }

      // Http://bugs.jqueryui.com/ticket/9446
      // a helper function can return the original element
      // which wouldn't have been set to relative in _create
      if (helperIsFunction && helper[0] === this.element[0]) {
        this._setPositionRelative();
      }

      if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) {
        helper.css("position", "absolute");
      }

      return helper;
    },

    _setPositionRelative: function _setPositionRelative() {
      if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
        this.element[0].style.position = "relative";
      }
    },

    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {
      if (typeof obj === "string") {
        obj = obj.split(" ");
      }
      if ($.isArray(obj)) {
        obj = { left: +obj[0], top: +obj[1] || 0 };
      }
      if ("left" in obj) {
        this.offset.click.left = obj.left + this.margins.left;
      }
      if ("right" in obj) {
        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
      }
      if ("top" in obj) {
        this.offset.click.top = obj.top + this.margins.top;
      }
      if ("bottom" in obj) {
        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
      }
    },

    _isRootNode: function _isRootNode(element) {
      return (/(html|body)/i.test(element.tagName) || element === this.document[0]
      );
    },

    _getParentOffset: function _getParentOffset() {

      //Get the offsetParent and cache its position
      var po = this.offsetParent.offset(),
          document = this.document[0];

      // This is a special case where we need to modify a offset calculated on start, since the
      // following happened:
      // 1. The position of the helper is absolute, so it's position is calculated based on the
      // next positioned parent
      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
      // the document, which means that the scroll is included in the initial calculation of the
      // offset of the parent, and never recalculated upon drag
      if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
        po.left += this.scrollParent.scrollLeft();
        po.top += this.scrollParent.scrollTop();
      }

      if (this._isRootNode(this.offsetParent[0])) {
        po = { top: 0, left: 0 };
      }

      return {
        top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
      };
    },

    _getRelativeOffset: function _getRelativeOffset() {
      if (this.cssPosition !== "relative") {
        return { top: 0, left: 0 };
      }

      var p = this.element.position(),
          scrollIsRootNode = this._isRootNode(this.scrollParent[0]);

      return {
        top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
        left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
      };
    },

    _cacheMargins: function _cacheMargins() {
      this.margins = {
        left: parseInt(this.element.css("marginLeft"), 10) || 0,
        top: parseInt(this.element.css("marginTop"), 10) || 0,
        right: parseInt(this.element.css("marginRight"), 10) || 0,
        bottom: parseInt(this.element.css("marginBottom"), 10) || 0
      };
    },

    _cacheHelperProportions: function _cacheHelperProportions() {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight()
      };
    },

    _setContainment: function _setContainment() {

      var isUserScrollable,
          c,
          ce,
          o = this.options,
          document = this.document[0];

      this.relativeContainer = null;

      if (!o.containment) {
        this.containment = null;
        return;
      }

      if (o.containment === "window") {
        this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
        return;
      }

      if (o.containment === "document") {
        this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
        return;
      }

      if (o.containment.constructor === Array) {
        this.containment = o.containment;
        return;
      }

      if (o.containment === "parent") {
        o.containment = this.helper[0].parentNode;
      }

      c = $(o.containment);
      ce = c[0];

      if (!ce) {
        return;
      }

      isUserScrollable = /(scroll|auto)/.test(c.css("overflow"));

      this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
      this.relativeContainer = c;
    },

    _convertPositionTo: function _convertPositionTo(d, pos) {

      if (!pos) {
        pos = this.position;
      }

      var mod = d === "absolute" ? 1 : -1,
          scrollIsRootNode = this._isRootNode(this.scrollParent[0]);

      return {
        top:

        // The absolute mouse position
        pos.top +

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.top * mod +

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.top * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
        left:

        // The absolute mouse position
        pos.left +

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.left * mod +

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.left * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
      };
    },

    _generatePosition: function _generatePosition(event, constrainPosition) {

      var containment,
          co,
          top,
          left,
          o = this.options,
          scrollIsRootNode = this._isRootNode(this.scrollParent[0]),
          pageX = event.pageX,
          pageY = event.pageY;

      // Cache the scroll
      if (!scrollIsRootNode || !this.offset.scroll) {
        this.offset.scroll = {
          top: this.scrollParent.scrollTop(),
          left: this.scrollParent.scrollLeft()
        };
      }

      /*
       * - Position constraining -
       * Constrain the position to a mix of grid, containment.
       */

      // If we are not dragging yet, we won't check for options
      if (constrainPosition) {
        if (this.containment) {
          if (this.relativeContainer) {
            co = this.relativeContainer.offset();
            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];
          } else {
            containment = this.containment;
          }

          if (event.pageX - this.offset.click.left < containment[0]) {
            pageX = containment[0] + this.offset.click.left;
          }
          if (event.pageY - this.offset.click.top < containment[1]) {
            pageY = containment[1] + this.offset.click.top;
          }
          if (event.pageX - this.offset.click.left > containment[2]) {
            pageX = containment[2] + this.offset.click.left;
          }
          if (event.pageY - this.offset.click.top > containment[3]) {
            pageY = containment[3] + this.offset.click.top;
          }
        }

        if (o.grid) {

          //Check for grid elements set to 0 to prevent divide by 0 error causing invalid
          // argument errors in IE (see ticket #6950)
          top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
          pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;

          left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
          pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
        }

        if (o.axis === "y") {
          pageX = this.originalPageX;
        }

        if (o.axis === "x") {
          pageY = this.originalPageY;
        }
      }

      return {
        top:

        // The absolute mouse position
        pageY -

        // Click offset (relative to the element)
        this.offset.click.top -

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.top -

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.top + (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
        left:

        // The absolute mouse position
        pageX -

        // Click offset (relative to the element)
        this.offset.click.left -

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.left -

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.left + (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
      };
    },

    _clear: function _clear() {
      this._removeClass(this.helper, "ui-draggable-dragging");
      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
        this.helper.remove();
      }
      this.helper = null;
      this.cancelHelperRemoval = false;
      if (this.destroyOnClear) {
        this.destroy();
      }
    },

    // From now on bulk stuff - mainly helpers

    _trigger: function _trigger(type, event, ui) {
      ui = ui || this._uiHash();
      $.ui.plugin.call(this, type, [event, ui, this], true);

      // Absolute position and offset (see #6884 ) have to be recalculated after plugins
      if (/^(drag|start|stop)/.test(type)) {
        this.positionAbs = this._convertPositionTo("absolute");
        ui.offset = this.positionAbs;
      }
      return $.Widget.prototype._trigger.call(this, type, event, ui);
    },

    plugins: {},

    _uiHash: function _uiHash() {
      return {
        helper: this.helper,
        position: this.position,
        originalPosition: this.originalPosition,
        offset: this.positionAbs
      };
    }

  });

  $.ui.plugin.add("draggable", "connectToSortable", {
    start: function start(event, ui, draggable) {
      var uiSortable = $.extend({}, ui, {
        item: draggable.element
      });

      draggable.sortables = [];
      $(draggable.options.connectToSortable).each(function () {
        var sortable = $(this).sortable("instance");

        if (sortable && !sortable.options.disabled) {
          draggable.sortables.push(sortable);

          // RefreshPositions is called at drag start to refresh the containerCache
          // which is used in drag. This ensures it's initialized and synchronized
          // with any changes that might have happened on the page since initialization.
          sortable.refreshPositions();
          sortable._trigger("activate", event, uiSortable);
        }
      });
    },
    stop: function stop(event, ui, draggable) {
      var uiSortable = $.extend({}, ui, {
        item: draggable.element
      });

      draggable.cancelHelperRemoval = false;

      $.each(draggable.sortables, function () {
        var sortable = this;

        if (sortable.isOver) {
          sortable.isOver = 0;

          // Allow this sortable to handle removing the helper
          draggable.cancelHelperRemoval = true;
          sortable.cancelHelperRemoval = false;

          // Use _storedCSS To restore properties in the sortable,
          // as this also handles revert (#9675) since the draggable
          // may have modified them in unexpected ways (#8809)
          sortable._storedCSS = {
            position: sortable.placeholder.css("position"),
            top: sortable.placeholder.css("top"),
            left: sortable.placeholder.css("left")
          };

          sortable._mouseStop(event);

          // Once drag has ended, the sortable should return to using
          // its original helper, not the shared helper from draggable
          sortable.options.helper = sortable.options._helper;
        } else {

          // Prevent this Sortable from removing the helper.
          // However, don't set the draggable to remove the helper
          // either as another connected Sortable may yet handle the removal.
          sortable.cancelHelperRemoval = true;

          sortable._trigger("deactivate", event, uiSortable);
        }
      });
    },
    drag: function drag(event, ui, draggable) {
      $.each(draggable.sortables, function () {
        var innermostIntersecting = false,
            sortable = this;

        // Copy over variables that sortable's _intersectsWith uses
        sortable.positionAbs = draggable.positionAbs;
        sortable.helperProportions = draggable.helperProportions;
        sortable.offset.click = draggable.offset.click;

        if (sortable._intersectsWith(sortable.containerCache)) {
          innermostIntersecting = true;

          $.each(draggable.sortables, function () {

            // Copy over variables that sortable's _intersectsWith uses
            this.positionAbs = draggable.positionAbs;
            this.helperProportions = draggable.helperProportions;
            this.offset.click = draggable.offset.click;

            if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {
              innermostIntersecting = false;
            }

            return innermostIntersecting;
          });
        }

        if (innermostIntersecting) {

          // If it intersects, we use a little isOver variable and set it once,
          // so that the move-in stuff gets fired only once.
          if (!sortable.isOver) {
            sortable.isOver = 1;

            // Store draggable's parent in case we need to reappend to it later.
            draggable._parent = ui.helper.parent();

            sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", true);

            // Store helper option to later restore it
            sortable.options._helper = sortable.options.helper;

            sortable.options.helper = function () {
              return ui.helper[0];
            };

            // Fire the start events of the sortable with our passed browser event,
            // and our own helper (so it doesn't create a new one)
            event.target = sortable.currentItem[0];
            sortable._mouseCapture(event, true);
            sortable._mouseStart(event, true, true);

            // Because the browser event is way off the new appended portlet,
            // modify necessary variables to reflect the changes
            sortable.offset.click.top = draggable.offset.click.top;
            sortable.offset.click.left = draggable.offset.click.left;
            sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
            sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;

            draggable._trigger("toSortable", event);

            // Inform draggable that the helper is in a valid drop zone,
            // used solely in the revert option to handle "valid/invalid".
            draggable.dropped = sortable.element;

            // Need to refreshPositions of all sortables in the case that
            // adding to one sortable changes the location of the other sortables (#9675)
            $.each(draggable.sortables, function () {
              this.refreshPositions();
            });

            // Hack so receive/update callbacks work (mostly)
            draggable.currentItem = draggable.element;
            sortable.fromOutside = draggable;
          }

          if (sortable.currentItem) {
            sortable._mouseDrag(event);

            // Copy the sortable's position because the draggable's can potentially reflect
            // a relative position, while sortable is always absolute, which the dragged
            // element has now become. (#8809)
            ui.position = sortable.position;
          }
        } else {

          // If it doesn't intersect with the sortable, and it intersected before,
          // we fake the drag stop of the sortable, but make sure it doesn't remove
          // the helper by using cancelHelperRemoval.
          if (sortable.isOver) {

            sortable.isOver = 0;
            sortable.cancelHelperRemoval = true;

            // Calling sortable's mouseStop would trigger a revert,
            // so revert must be temporarily false until after mouseStop is called.
            sortable.options._revert = sortable.options.revert;
            sortable.options.revert = false;

            sortable._trigger("out", event, sortable._uiHash(sortable));
            sortable._mouseStop(event, true);

            // Restore sortable behaviors that were modfied
            // when the draggable entered the sortable area (#9481)
            sortable.options.revert = sortable.options._revert;
            sortable.options.helper = sortable.options._helper;

            if (sortable.placeholder) {
              sortable.placeholder.remove();
            }

            // Restore and recalculate the draggable's offset considering the sortable
            // may have modified them in unexpected ways. (#8809, #10669)
            ui.helper.appendTo(draggable._parent);
            draggable._refreshOffsets(event);
            ui.position = draggable._generatePosition(event, true);

            draggable._trigger("fromSortable", event);

            // Inform draggable that the helper is no longer in a valid drop zone
            draggable.dropped = false;

            // Need to refreshPositions of all sortables just in case removing
            // from one sortable changes the location of other sortables (#9675)
            $.each(draggable.sortables, function () {
              this.refreshPositions();
            });
          }
        }
      });
    }
  });

  $.ui.plugin.add("draggable", "cursor", {
    start: function start(event, ui, instance) {
      var t = $("body"),
          o = instance.options;

      if (t.css("cursor")) {
        o._cursor = t.css("cursor");
      }
      t.css("cursor", o.cursor);
    },
    stop: function stop(event, ui, instance) {
      var o = instance.options;
      if (o._cursor) {
        $("body").css("cursor", o._cursor);
      }
    }
  });

  $.ui.plugin.add("draggable", "opacity", {
    start: function start(event, ui, instance) {
      var t = $(ui.helper),
          o = instance.options;
      if (t.css("opacity")) {
        o._opacity = t.css("opacity");
      }
      t.css("opacity", o.opacity);
    },
    stop: function stop(event, ui, instance) {
      var o = instance.options;
      if (o._opacity) {
        $(ui.helper).css("opacity", o._opacity);
      }
    }
  });

  $.ui.plugin.add("draggable", "scroll", {
    start: function start(event, ui, i) {
      if (!i.scrollParentNotHidden) {
        i.scrollParentNotHidden = i.helper.scrollParent(false);
      }

      if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== "HTML") {
        i.overflowOffset = i.scrollParentNotHidden.offset();
      }
    },
    drag: function drag(event, ui, i) {

      var o = i.options,
          scrolled = false,
          scrollParent = i.scrollParentNotHidden[0],
          document = i.document[0];

      if (scrollParent !== document && scrollParent.tagName !== "HTML") {
        if (!o.axis || o.axis !== "x") {
          if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {
            scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
          } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
            scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
          }
        }

        if (!o.axis || o.axis !== "y") {
          if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {
            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
          } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
          }
        }
      } else {

        if (!o.axis || o.axis !== "x") {
          if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
          } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
          }
        }

        if (!o.axis || o.axis !== "y") {
          if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
          } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
          }
        }
      }

      if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(i, event);
      }
    }
  });

  $.ui.plugin.add("draggable", "snap", {
    start: function start(event, ui, i) {

      var o = i.options;

      i.snapElements = [];

      $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function () {
        var $t = $(this),
            $o = $t.offset();
        if (this !== i.element[0]) {
          i.snapElements.push({
            item: this,
            width: $t.outerWidth(), height: $t.outerHeight(),
            top: $o.top, left: $o.left
          });
        }
      });
    },
    drag: function drag(event, ui, inst) {

      var ts,
          bs,
          ls,
          rs,
          l,
          r,
          t,
          b,
          i,
          first,
          o = inst.options,
          d = o.snapTolerance,
          x1 = ui.offset.left,
          x2 = x1 + inst.helperProportions.width,
          y1 = ui.offset.top,
          y2 = y1 + inst.helperProportions.height;

      for (i = inst.snapElements.length - 1; i >= 0; i--) {

        l = inst.snapElements[i].left - inst.margins.left;
        r = l + inst.snapElements[i].width;
        t = inst.snapElements[i].top - inst.margins.top;
        b = t + inst.snapElements[i].height;

        if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
          if (inst.snapElements[i].snapping) {
            inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));
          }
          inst.snapElements[i].snapping = false;
          continue;
        }

        if (o.snapMode !== "inner") {
          ts = Math.abs(t - y2) <= d;
          bs = Math.abs(b - y1) <= d;
          ls = Math.abs(l - x2) <= d;
          rs = Math.abs(r - x1) <= d;
          if (ts) {
            ui.position.top = inst._convertPositionTo("relative", {
              top: t - inst.helperProportions.height,
              left: 0
            }).top;
          }
          if (bs) {
            ui.position.top = inst._convertPositionTo("relative", {
              top: b,
              left: 0
            }).top;
          }
          if (ls) {
            ui.position.left = inst._convertPositionTo("relative", {
              top: 0,
              left: l - inst.helperProportions.width
            }).left;
          }
          if (rs) {
            ui.position.left = inst._convertPositionTo("relative", {
              top: 0,
              left: r
            }).left;
          }
        }

        first = ts || bs || ls || rs;

        if (o.snapMode !== "outer") {
          ts = Math.abs(t - y1) <= d;
          bs = Math.abs(b - y2) <= d;
          ls = Math.abs(l - x1) <= d;
          rs = Math.abs(r - x2) <= d;
          if (ts) {
            ui.position.top = inst._convertPositionTo("relative", {
              top: t,
              left: 0
            }).top;
          }
          if (bs) {
            ui.position.top = inst._convertPositionTo("relative", {
              top: b - inst.helperProportions.height,
              left: 0
            }).top;
          }
          if (ls) {
            ui.position.left = inst._convertPositionTo("relative", {
              top: 0,
              left: l
            }).left;
          }
          if (rs) {
            ui.position.left = inst._convertPositionTo("relative", {
              top: 0,
              left: r - inst.helperProportions.width
            }).left;
          }
        }

        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
          inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
            snapItem: inst.snapElements[i].item
          }));
        }
        inst.snapElements[i].snapping = ts || bs || ls || rs || first;
      }
    }
  });

  $.ui.plugin.add("draggable", "stack", {
    start: function start(event, ui, instance) {
      var min,
          o = instance.options,
          group = $.makeArray($(o.stack)).sort(function (a, b) {
        return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
      });

      if (!group.length) {
        return;
      }

      min = parseInt($(group[0]).css("zIndex"), 10) || 0;
      $(group).each(function (i) {
        $(this).css("zIndex", min + i);
      });
      this.css("zIndex", min + group.length);
    }
  });

  $.ui.plugin.add("draggable", "zIndex", {
    start: function start(event, ui, instance) {
      var t = $(ui.helper),
          o = instance.options;

      if (t.css("zIndex")) {
        o._zIndex = t.css("zIndex");
      }
      t.css("zIndex", o.zIndex);
    },
    stop: function stop(event, ui, instance) {
      var o = instance.options;

      if (o._zIndex) {
        $(ui.helper).css("zIndex", o._zIndex);
      }
    }
  });

  var widgetsDraggable = $.ui.draggable;

  /*!
   * jQuery UI Resizable 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Resizable
  //>>group: Interactions
  //>>description: Enables resize functionality for any element.
  //>>docs: http://api.jqueryui.com/resizable/
  //>>demos: http://jqueryui.com/resizable/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/resizable.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.resizable", $.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "resize",
    options: {
      alsoResize: false,
      animate: false,
      animateDuration: "slow",
      animateEasing: "swing",
      aspectRatio: false,
      autoHide: false,
      classes: {
        "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
      },
      containment: false,
      ghost: false,
      grid: false,
      handles: "e,s,se",
      helper: false,
      maxHeight: null,
      maxWidth: null,
      minHeight: 10,
      minWidth: 10,

      // See #7960
      zIndex: 90,

      // Callbacks
      resize: null,
      start: null,
      stop: null
    },

    _num: function _num(value) {
      return parseFloat(value) || 0;
    },

    _isNumber: function _isNumber(value) {
      return !isNaN(parseFloat(value));
    },

    _hasScroll: function _hasScroll(el, a) {

      if ($(el).css("overflow") === "hidden") {
        return false;
      }

      var scroll = a && a === "left" ? "scrollLeft" : "scrollTop",
          has = false;

      if (el[scroll] > 0) {
        return true;
      }

      // TODO: determine which cases actually cause this to happen
      // if the element doesn't have the scroll set, see if it's possible to
      // set the scroll
      el[scroll] = 1;
      has = el[scroll] > 0;
      el[scroll] = 0;
      return has;
    },

    _create: function _create() {

      var margins,
          o = this.options,
          that = this;
      this._addClass("ui-resizable");

      $.extend(this, {
        _aspectRatio: !!o.aspectRatio,
        aspectRatio: o.aspectRatio,
        originalElement: this.element,
        _proportionallyResizeElements: [],
        _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
      });

      // Wrap the element if it cannot hold child nodes
      if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {

        this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
          position: this.element.css("position"),
          width: this.element.outerWidth(),
          height: this.element.outerHeight(),
          top: this.element.css("top"),
          left: this.element.css("left")
        }));

        this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance"));

        this.elementIsWrapper = true;

        margins = {
          marginTop: this.originalElement.css("marginTop"),
          marginRight: this.originalElement.css("marginRight"),
          marginBottom: this.originalElement.css("marginBottom"),
          marginLeft: this.originalElement.css("marginLeft")
        };

        this.element.css(margins);
        this.originalElement.css("margin", 0);

        // support: Safari
        // Prevent Safari textarea resize
        this.originalResizeStyle = this.originalElement.css("resize");
        this.originalElement.css("resize", "none");

        this._proportionallyResizeElements.push(this.originalElement.css({
          position: "static",
          zoom: 1,
          display: "block"
        }));

        // Support: IE9
        // avoid IE jump (hard set the margin)
        this.originalElement.css(margins);

        this._proportionallyResize();
      }

      this._setupHandles();

      if (o.autoHide) {
        $(this.element).on("mouseenter", function () {
          if (o.disabled) {
            return;
          }
          that._removeClass("ui-resizable-autohide");
          that._handles.show();
        }).on("mouseleave", function () {
          if (o.disabled) {
            return;
          }
          if (!that.resizing) {
            that._addClass("ui-resizable-autohide");
            that._handles.hide();
          }
        });
      }

      this._mouseInit();
    },

    _destroy: function _destroy() {

      this._mouseDestroy();

      var wrapper,
          _destroy = function _destroy(exp) {
        $(exp).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove();
      };

      // TODO: Unwrap at same DOM position
      if (this.elementIsWrapper) {
        _destroy(this.element);
        wrapper = this.element;
        this.originalElement.css({
          position: wrapper.css("position"),
          width: wrapper.outerWidth(),
          height: wrapper.outerHeight(),
          top: wrapper.css("top"),
          left: wrapper.css("left")
        }).insertAfter(wrapper);
        wrapper.remove();
      }

      this.originalElement.css("resize", this.originalResizeStyle);
      _destroy(this.originalElement);

      return this;
    },

    _setOption: function _setOption(key, value) {
      this._super(key, value);

      switch (key) {
        case "handles":
          this._removeHandles();
          this._setupHandles();
          break;
        default:
          break;
      }
    },

    _setupHandles: function _setupHandles() {
      var o = this.options,
          handle,
          i,
          n,
          hname,
          axis,
          that = this;
      this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
        n: ".ui-resizable-n",
        e: ".ui-resizable-e",
        s: ".ui-resizable-s",
        w: ".ui-resizable-w",
        se: ".ui-resizable-se",
        sw: ".ui-resizable-sw",
        ne: ".ui-resizable-ne",
        nw: ".ui-resizable-nw"
      });

      this._handles = $();
      if (this.handles.constructor === String) {

        if (this.handles === "all") {
          this.handles = "n,e,s,w,se,sw,ne,nw";
        }

        n = this.handles.split(",");
        this.handles = {};

        for (i = 0; i < n.length; i++) {

          handle = $.trim(n[i]);
          hname = "ui-resizable-" + handle;
          axis = $("<div>");
          this._addClass(axis, "ui-resizable-handle " + hname);

          axis.css({ zIndex: o.zIndex });

          this.handles[handle] = ".ui-resizable-" + handle;
          this.element.append(axis);
        }
      }

      this._renderAxis = function (target) {

        var i, axis, padPos, padWrapper;

        target = target || this.element;

        for (i in this.handles) {

          if (this.handles[i].constructor === String) {
            this.handles[i] = this.element.children(this.handles[i]).first().show();
          } else if (this.handles[i].jquery || this.handles[i].nodeType) {
            this.handles[i] = $(this.handles[i]);
            this._on(this.handles[i], { "mousedown": that._mouseDown });
          }

          if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
            axis = $(this.handles[i], this.element);

            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

            padPos = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join("");

            target.css(padPos, padWrapper);

            this._proportionallyResize();
          }

          this._handles = this._handles.add(this.handles[i]);
        }
      };

      // TODO: make renderAxis a prototype function
      this._renderAxis(this.element);

      this._handles = this._handles.add(this.element.find(".ui-resizable-handle"));
      this._handles.disableSelection();

      this._handles.on("mouseover", function () {
        if (!that.resizing) {
          if (this.className) {
            axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
          }
          that.axis = axis && axis[1] ? axis[1] : "se";
        }
      });

      if (o.autoHide) {
        this._handles.hide();
        this._addClass("ui-resizable-autohide");
      }
    },

    _removeHandles: function _removeHandles() {
      this._handles.remove();
    },

    _mouseCapture: function _mouseCapture(event) {
      var i,
          handle,
          capture = false;

      for (i in this.handles) {
        handle = $(this.handles[i])[0];
        if (handle === event.target || $.contains(handle, event.target)) {
          capture = true;
        }
      }

      return !this.options.disabled && capture;
    },

    _mouseStart: function _mouseStart(event) {

      var curleft,
          curtop,
          cursor,
          o = this.options,
          el = this.element;

      this.resizing = true;

      this._renderProxy();

      curleft = this._num(this.helper.css("left"));
      curtop = this._num(this.helper.css("top"));

      if (o.containment) {
        curleft += $(o.containment).scrollLeft() || 0;
        curtop += $(o.containment).scrollTop() || 0;
      }

      this.offset = this.helper.offset();
      this.position = { left: curleft, top: curtop };

      this.size = this._helper ? {
        width: this.helper.width(),
        height: this.helper.height()
      } : {
        width: el.width(),
        height: el.height()
      };

      this.originalSize = this._helper ? {
        width: el.outerWidth(),
        height: el.outerHeight()
      } : {
        width: el.width(),
        height: el.height()
      };

      this.sizeDiff = {
        width: el.outerWidth() - el.width(),
        height: el.outerHeight() - el.height()
      };

      this.originalPosition = { left: curleft, top: curtop };
      this.originalMousePosition = { left: event.pageX, top: event.pageY };

      this.aspectRatio = typeof o.aspectRatio === "number" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;

      cursor = $(".ui-resizable-" + this.axis).css("cursor");
      $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

      this._addClass("ui-resizable-resizing");
      this._propagate("start", event);
      return true;
    },

    _mouseDrag: function _mouseDrag(event) {

      var data,
          props,
          smp = this.originalMousePosition,
          a = this.axis,
          dx = event.pageX - smp.left || 0,
          dy = event.pageY - smp.top || 0,
          trigger = this._change[a];

      this._updatePrevProperties();

      if (!trigger) {
        return false;
      }

      data = trigger.apply(this, [event, dx, dy]);

      this._updateVirtualBoundaries(event.shiftKey);
      if (this._aspectRatio || event.shiftKey) {
        data = this._updateRatio(data, event);
      }

      data = this._respectSize(data, event);

      this._updateCache(data);

      this._propagate("resize", event);

      props = this._applyChanges();

      if (!this._helper && this._proportionallyResizeElements.length) {
        this._proportionallyResize();
      }

      if (!$.isEmptyObject(props)) {
        this._updatePrevProperties();
        this._trigger("resize", event, this.ui());
        this._applyChanges();
      }

      return false;
    },

    _mouseStop: function _mouseStop(event) {

      this.resizing = false;
      var pr,
          ista,
          soffseth,
          soffsetw,
          s,
          left,
          top,
          o = this.options,
          that = this;

      if (this._helper) {

        pr = this._proportionallyResizeElements;
        ista = pr.length && /textarea/i.test(pr[0].nodeName);
        soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
        soffsetw = ista ? 0 : that.sizeDiff.width;

        s = {
          width: that.helper.width() - soffsetw,
          height: that.helper.height() - soffseth
        };
        left = parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left) || null;
        top = parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top) || null;

        if (!o.animate) {
          this.element.css($.extend(s, { top: top, left: left }));
        }

        that.helper.height(that.size.height);
        that.helper.width(that.size.width);

        if (this._helper && !o.animate) {
          this._proportionallyResize();
        }
      }

      $("body").css("cursor", "auto");

      this._removeClass("ui-resizable-resizing");

      this._propagate("stop", event);

      if (this._helper) {
        this.helper.remove();
      }

      return false;
    },

    _updatePrevProperties: function _updatePrevProperties() {
      this.prevPosition = {
        top: this.position.top,
        left: this.position.left
      };
      this.prevSize = {
        width: this.size.width,
        height: this.size.height
      };
    },

    _applyChanges: function _applyChanges() {
      var props = {};

      if (this.position.top !== this.prevPosition.top) {
        props.top = this.position.top + "px";
      }
      if (this.position.left !== this.prevPosition.left) {
        props.left = this.position.left + "px";
      }
      if (this.size.width !== this.prevSize.width) {
        props.width = this.size.width + "px";
      }
      if (this.size.height !== this.prevSize.height) {
        props.height = this.size.height + "px";
      }

      this.helper.css(props);

      return props;
    },

    _updateVirtualBoundaries: function _updateVirtualBoundaries(forceAspectRatio) {
      var pMinWidth,
          pMaxWidth,
          pMinHeight,
          pMaxHeight,
          b,
          o = this.options;

      b = {
        minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
        maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
        minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
        maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
      };

      if (this._aspectRatio || forceAspectRatio) {
        pMinWidth = b.minHeight * this.aspectRatio;
        pMinHeight = b.minWidth / this.aspectRatio;
        pMaxWidth = b.maxHeight * this.aspectRatio;
        pMaxHeight = b.maxWidth / this.aspectRatio;

        if (pMinWidth > b.minWidth) {
          b.minWidth = pMinWidth;
        }
        if (pMinHeight > b.minHeight) {
          b.minHeight = pMinHeight;
        }
        if (pMaxWidth < b.maxWidth) {
          b.maxWidth = pMaxWidth;
        }
        if (pMaxHeight < b.maxHeight) {
          b.maxHeight = pMaxHeight;
        }
      }
      this._vBoundaries = b;
    },

    _updateCache: function _updateCache(data) {
      this.offset = this.helper.offset();
      if (this._isNumber(data.left)) {
        this.position.left = data.left;
      }
      if (this._isNumber(data.top)) {
        this.position.top = data.top;
      }
      if (this._isNumber(data.height)) {
        this.size.height = data.height;
      }
      if (this._isNumber(data.width)) {
        this.size.width = data.width;
      }
    },

    _updateRatio: function _updateRatio(data) {

      var cpos = this.position,
          csize = this.size,
          a = this.axis;

      if (this._isNumber(data.height)) {
        data.width = data.height * this.aspectRatio;
      } else if (this._isNumber(data.width)) {
        data.height = data.width / this.aspectRatio;
      }

      if (a === "sw") {
        data.left = cpos.left + (csize.width - data.width);
        data.top = null;
      }
      if (a === "nw") {
        data.top = cpos.top + (csize.height - data.height);
        data.left = cpos.left + (csize.width - data.width);
      }

      return data;
    },

    _respectSize: function _respectSize(data) {

      var o = this._vBoundaries,
          a = this.axis,
          ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,
          ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,
          isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width,
          isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height,
          dw = this.originalPosition.left + this.originalSize.width,
          dh = this.originalPosition.top + this.originalSize.height,
          cw = /sw|nw|w/.test(a),
          ch = /nw|ne|n/.test(a);
      if (isminw) {
        data.width = o.minWidth;
      }
      if (isminh) {
        data.height = o.minHeight;
      }
      if (ismaxw) {
        data.width = o.maxWidth;
      }
      if (ismaxh) {
        data.height = o.maxHeight;
      }

      if (isminw && cw) {
        data.left = dw - o.minWidth;
      }
      if (ismaxw && cw) {
        data.left = dw - o.maxWidth;
      }
      if (isminh && ch) {
        data.top = dh - o.minHeight;
      }
      if (ismaxh && ch) {
        data.top = dh - o.maxHeight;
      }

      // Fixing jump error on top/left - bug #2330
      if (!data.width && !data.height && !data.left && data.top) {
        data.top = null;
      } else if (!data.width && !data.height && !data.top && data.left) {
        data.left = null;
      }

      return data;
    },

    _getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(element) {
      var i = 0,
          widths = [],
          borders = [element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth")],
          paddings = [element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft")];

      for (; i < 4; i++) {
        widths[i] = parseFloat(borders[i]) || 0;
        widths[i] += parseFloat(paddings[i]) || 0;
      }

      return {
        height: widths[0] + widths[2],
        width: widths[1] + widths[3]
      };
    },

    _proportionallyResize: function _proportionallyResize() {

      if (!this._proportionallyResizeElements.length) {
        return;
      }

      var prel,
          i = 0,
          element = this.helper || this.element;

      for (; i < this._proportionallyResizeElements.length; i++) {

        prel = this._proportionallyResizeElements[i];

        // TODO: Seems like a bug to cache this.outerDimensions
        // considering that we are in a loop.
        if (!this.outerDimensions) {
          this.outerDimensions = this._getPaddingPlusBorderDimensions(prel);
        }

        prel.css({
          height: element.height() - this.outerDimensions.height || 0,
          width: element.width() - this.outerDimensions.width || 0
        });
      }
    },

    _renderProxy: function _renderProxy() {

      var el = this.element,
          o = this.options;
      this.elementOffset = el.offset();

      if (this._helper) {

        this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

        this._addClass(this.helper, this._helper);
        this.helper.css({
          width: this.element.outerWidth(),
          height: this.element.outerHeight(),
          position: "absolute",
          left: this.elementOffset.left + "px",
          top: this.elementOffset.top + "px",
          zIndex: ++o.zIndex //TODO: Don't modify option
        });

        this.helper.appendTo("body").disableSelection();
      } else {
        this.helper = this.element;
      }
    },

    _change: {
      e: function e(event, dx) {
        return { width: this.originalSize.width + dx };
      },
      w: function w(event, dx) {
        var cs = this.originalSize,
            sp = this.originalPosition;
        return { left: sp.left + dx, width: cs.width - dx };
      },
      n: function n(event, dx, dy) {
        var cs = this.originalSize,
            sp = this.originalPosition;
        return { top: sp.top + dy, height: cs.height - dy };
      },
      s: function s(event, dx, dy) {
        return { height: this.originalSize.height + dy };
      },
      se: function se(event, dx, dy) {
        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
      },
      sw: function sw(event, dx, dy) {
        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
      },
      ne: function ne(event, dx, dy) {
        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
      },
      nw: function nw(event, dx, dy) {
        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
      }
    },

    _propagate: function _propagate(n, event) {
      $.ui.plugin.call(this, n, [event, this.ui()]);
      n !== "resize" && this._trigger(n, event, this.ui());
    },

    plugins: {},

    ui: function ui() {
      return {
        originalElement: this.originalElement,
        element: this.element,
        helper: this.helper,
        position: this.position,
        size: this.size,
        originalSize: this.originalSize,
        originalPosition: this.originalPosition
      };
    }

  });

  /*
   * Resizable Extensions
   */

  $.ui.plugin.add("resizable", "animate", {

    stop: function stop(event) {
      var that = $(this).resizable("instance"),
          o = that.options,
          pr = that._proportionallyResizeElements,
          ista = pr.length && /textarea/i.test(pr[0].nodeName),
          soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,
          soffsetw = ista ? 0 : that.sizeDiff.width,
          style = {
        width: that.size.width - soffsetw,
        height: that.size.height - soffseth
      },
          left = parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left) || null,
          top = parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top) || null;

      that.element.animate($.extend(style, top && left ? { top: top, left: left } : {}), {
        duration: o.animateDuration,
        easing: o.animateEasing,
        step: function step() {

          var data = {
            width: parseFloat(that.element.css("width")),
            height: parseFloat(that.element.css("height")),
            top: parseFloat(that.element.css("top")),
            left: parseFloat(that.element.css("left"))
          };

          if (pr && pr.length) {
            $(pr[0]).css({ width: data.width, height: data.height });
          }

          // Propagating resize, and updating values for each animation step
          that._updateCache(data);
          that._propagate("resize", event);
        }
      });
    }

  });

  $.ui.plugin.add("resizable", "containment", {

    start: function start() {
      var element,
          p,
          co,
          ch,
          cw,
          width,
          height,
          that = $(this).resizable("instance"),
          o = that.options,
          el = that.element,
          oc = o.containment,
          ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;

      if (!ce) {
        return;
      }

      that.containerElement = $(ce);

      if (/document/.test(oc) || oc === document) {
        that.containerOffset = {
          left: 0,
          top: 0
        };
        that.containerPosition = {
          left: 0,
          top: 0
        };

        that.parentData = {
          element: $(document),
          left: 0,
          top: 0,
          width: $(document).width(),
          height: $(document).height() || document.body.parentNode.scrollHeight
        };
      } else {
        element = $(ce);
        p = [];
        $(["Top", "Right", "Left", "Bottom"]).each(function (i, name) {
          p[i] = that._num(element.css("padding" + name));
        });

        that.containerOffset = element.offset();
        that.containerPosition = element.position();
        that.containerSize = {
          height: element.innerHeight() - p[3],
          width: element.innerWidth() - p[1]
        };

        co = that.containerOffset;
        ch = that.containerSize.height;
        cw = that.containerSize.width;
        width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw;
        height = that._hasScroll(ce) ? ce.scrollHeight : ch;

        that.parentData = {
          element: ce,
          left: co.left,
          top: co.top,
          width: width,
          height: height
        };
      }
    },

    resize: function resize(event) {
      var woset,
          hoset,
          isParent,
          isOffsetRelative,
          that = $(this).resizable("instance"),
          o = that.options,
          co = that.containerOffset,
          cp = that.position,
          pRatio = that._aspectRatio || event.shiftKey,
          cop = {
        top: 0,
        left: 0
      },
          ce = that.containerElement,
          continueResize = true;

      if (ce[0] !== document && /static/.test(ce.css("position"))) {
        cop = co;
      }

      if (cp.left < (that._helper ? co.left : 0)) {
        that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);

        if (pRatio) {
          that.size.height = that.size.width / that.aspectRatio;
          continueResize = false;
        }
        that.position.left = o.helper ? co.left : 0;
      }

      if (cp.top < (that._helper ? co.top : 0)) {
        that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);

        if (pRatio) {
          that.size.width = that.size.height * that.aspectRatio;
          continueResize = false;
        }
        that.position.top = that._helper ? co.top : 0;
      }

      isParent = that.containerElement.get(0) === that.element.parent().get(0);
      isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

      if (isParent && isOffsetRelative) {
        that.offset.left = that.parentData.left + that.position.left;
        that.offset.top = that.parentData.top + that.position.top;
      } else {
        that.offset.left = that.element.offset().left;
        that.offset.top = that.element.offset().top;
      }

      woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));

      hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));

      if (woset + that.size.width >= that.parentData.width) {
        that.size.width = that.parentData.width - woset;
        if (pRatio) {
          that.size.height = that.size.width / that.aspectRatio;
          continueResize = false;
        }
      }

      if (hoset + that.size.height >= that.parentData.height) {
        that.size.height = that.parentData.height - hoset;
        if (pRatio) {
          that.size.width = that.size.height * that.aspectRatio;
          continueResize = false;
        }
      }

      if (!continueResize) {
        that.position.left = that.prevPosition.left;
        that.position.top = that.prevPosition.top;
        that.size.width = that.prevSize.width;
        that.size.height = that.prevSize.height;
      }
    },

    stop: function stop() {
      var that = $(this).resizable("instance"),
          o = that.options,
          co = that.containerOffset,
          cop = that.containerPosition,
          ce = that.containerElement,
          helper = $(that.helper),
          ho = helper.offset(),
          w = helper.outerWidth() - that.sizeDiff.width,
          h = helper.outerHeight() - that.sizeDiff.height;

      if (that._helper && !o.animate && /relative/.test(ce.css("position"))) {
        $(this).css({
          left: ho.left - cop.left - co.left,
          width: w,
          height: h
        });
      }

      if (that._helper && !o.animate && /static/.test(ce.css("position"))) {
        $(this).css({
          left: ho.left - cop.left - co.left,
          width: w,
          height: h
        });
      }
    }
  });

  $.ui.plugin.add("resizable", "alsoResize", {

    start: function start() {
      var that = $(this).resizable("instance"),
          o = that.options;

      $(o.alsoResize).each(function () {
        var el = $(this);
        el.data("ui-resizable-alsoresize", {
          width: parseFloat(el.width()), height: parseFloat(el.height()),
          left: parseFloat(el.css("left")), top: parseFloat(el.css("top"))
        });
      });
    },

    resize: function resize(event, ui) {
      var that = $(this).resizable("instance"),
          o = that.options,
          os = that.originalSize,
          op = that.originalPosition,
          delta = {
        height: that.size.height - os.height || 0,
        width: that.size.width - os.width || 0,
        top: that.position.top - op.top || 0,
        left: that.position.left - op.left || 0
      };

      $(o.alsoResize).each(function () {
        var el = $(this),
            start = $(this).data("ui-resizable-alsoresize"),
            style = {},
            css = el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

        $.each(css, function (i, prop) {
          var sum = (start[prop] || 0) + (delta[prop] || 0);
          if (sum && sum >= 0) {
            style[prop] = sum || null;
          }
        });

        el.css(style);
      });
    },

    stop: function stop() {
      $(this).removeData("ui-resizable-alsoresize");
    }
  });

  $.ui.plugin.add("resizable", "ghost", {

    start: function start() {

      var that = $(this).resizable("instance"),
          cs = that.size;

      that.ghost = that.originalElement.clone();
      that.ghost.css({
        opacity: 0.25,
        display: "block",
        position: "relative",
        height: cs.height,
        width: cs.width,
        margin: 0,
        left: 0,
        top: 0
      });

      that._addClass(that.ghost, "ui-resizable-ghost");

      // DEPRECATED
      // TODO: remove after 1.12
      if ($.uiBackCompat !== false && typeof that.options.ghost === "string") {

        // Ghost option
        that.ghost.addClass(this.options.ghost);
      }

      that.ghost.appendTo(that.helper);
    },

    resize: function resize() {
      var that = $(this).resizable("instance");
      if (that.ghost) {
        that.ghost.css({
          position: "relative",
          height: that.size.height,
          width: that.size.width
        });
      }
    },

    stop: function stop() {
      var that = $(this).resizable("instance");
      if (that.ghost && that.helper) {
        that.helper.get(0).removeChild(that.ghost.get(0));
      }
    }

  });

  $.ui.plugin.add("resizable", "grid", {

    resize: function resize() {
      var outerDimensions,
          that = $(this).resizable("instance"),
          o = that.options,
          cs = that.size,
          os = that.originalSize,
          op = that.originalPosition,
          a = that.axis,
          grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
          gridX = grid[0] || 1,
          gridY = grid[1] || 1,
          ox = Math.round((cs.width - os.width) / gridX) * gridX,
          oy = Math.round((cs.height - os.height) / gridY) * gridY,
          newWidth = os.width + ox,
          newHeight = os.height + oy,
          isMaxWidth = o.maxWidth && o.maxWidth < newWidth,
          isMaxHeight = o.maxHeight && o.maxHeight < newHeight,
          isMinWidth = o.minWidth && o.minWidth > newWidth,
          isMinHeight = o.minHeight && o.minHeight > newHeight;

      o.grid = grid;

      if (isMinWidth) {
        newWidth += gridX;
      }
      if (isMinHeight) {
        newHeight += gridY;
      }
      if (isMaxWidth) {
        newWidth -= gridX;
      }
      if (isMaxHeight) {
        newHeight -= gridY;
      }

      if (/^(se|s|e)$/.test(a)) {
        that.size.width = newWidth;
        that.size.height = newHeight;
      } else if (/^(ne)$/.test(a)) {
        that.size.width = newWidth;
        that.size.height = newHeight;
        that.position.top = op.top - oy;
      } else if (/^(sw)$/.test(a)) {
        that.size.width = newWidth;
        that.size.height = newHeight;
        that.position.left = op.left - ox;
      } else {
        if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {
          outerDimensions = that._getPaddingPlusBorderDimensions(this);
        }

        if (newHeight - gridY > 0) {
          that.size.height = newHeight;
          that.position.top = op.top - oy;
        } else {
          newHeight = gridY - outerDimensions.height;
          that.size.height = newHeight;
          that.position.top = op.top + os.height - newHeight;
        }
        if (newWidth - gridX > 0) {
          that.size.width = newWidth;
          that.position.left = op.left - ox;
        } else {
          newWidth = gridX - outerDimensions.width;
          that.size.width = newWidth;
          that.position.left = op.left + os.width - newWidth;
        }
      }
    }

  });

  var widgetsResizable = $.ui.resizable;

  /*!
   * jQuery UI Accordion 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Accordion
  //>>group: Widgets
  // jscs:disable maximumLineLength
  //>>description: Displays collapsible content panels for presenting information in a limited amount of space.
  // jscs:enable maximumLineLength
  //>>docs: http://api.jqueryui.com/accordion/
  //>>demos: http://jqueryui.com/accordion/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/accordion.css
  //>>css.theme: ../../themes/base/theme.css


  var widgetsAccordion = $.widget("ui.accordion", {
    version: "1.12.1",
    options: {
      active: 0,
      animate: {},
      classes: {
        "ui-accordion-header": "ui-corner-top",
        "ui-accordion-header-collapsed": "ui-corner-all",
        "ui-accordion-content": "ui-corner-bottom"
      },
      collapsible: false,
      event: "click",
      header: "> li > :first-child, > :not(li):even",
      heightStyle: "auto",
      icons: {
        activeHeader: "ui-icon-triangle-1-s",
        header: "ui-icon-triangle-1-e"
      },

      // Callbacks
      activate: null,
      beforeActivate: null
    },

    hideProps: {
      borderTopWidth: "hide",
      borderBottomWidth: "hide",
      paddingTop: "hide",
      paddingBottom: "hide",
      height: "hide"
    },

    showProps: {
      borderTopWidth: "show",
      borderBottomWidth: "show",
      paddingTop: "show",
      paddingBottom: "show",
      height: "show"
    },

    _create: function _create() {
      var options = this.options;

      this.prevShow = this.prevHide = $();
      this._addClass("ui-accordion", "ui-widget ui-helper-reset");
      this.element.attr("role", "tablist");

      // Don't allow collapsible: false and active: false / null
      if (!options.collapsible && (options.active === false || options.active == null)) {
        options.active = 0;
      }

      this._processPanels();

      // handle negative values
      if (options.active < 0) {
        options.active += this.headers.length;
      }
      this._refresh();
    },

    _getCreateEventData: function _getCreateEventData() {
      return {
        header: this.active,
        panel: !this.active.length ? $() : this.active.next()
      };
    },

    _createIcons: function _createIcons() {
      var icon,
          children,
          icons = this.options.icons;

      if (icons) {
        icon = $("<span>");
        this._addClass(icon, "ui-accordion-header-icon", "ui-icon " + icons.header);
        icon.prependTo(this.headers);
        children = this.active.children(".ui-accordion-header-icon");
        this._removeClass(children, icons.header)._addClass(children, null, icons.activeHeader)._addClass(this.headers, "ui-accordion-icons");
      }
    },

    _destroyIcons: function _destroyIcons() {
      this._removeClass(this.headers, "ui-accordion-icons");
      this.headers.children(".ui-accordion-header-icon").remove();
    },

    _destroy: function _destroy() {
      var contents;

      // Clean up main element
      this.element.removeAttr("role");

      // Clean up headers
      this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId();

      this._destroyIcons();

      // Clean up content panels
      contents = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId();

      if (this.options.heightStyle !== "content") {
        contents.css("height", "");
      }
    },

    _setOption: function _setOption(key, value) {
      if (key === "active") {

        // _activate() will handle invalid values and update this.options
        this._activate(value);
        return;
      }

      if (key === "event") {
        if (this.options.event) {
          this._off(this.headers, this.options.event);
        }
        this._setupEvents(value);
      }

      this._super(key, value);

      // Setting collapsible: false while collapsed; open first panel
      if (key === "collapsible" && !value && this.options.active === false) {
        this._activate(0);
      }

      if (key === "icons") {
        this._destroyIcons();
        if (value) {
          this._createIcons();
        }
      }
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._super(value);

      this.element.attr("aria-disabled", value);

      // Support: IE8 Only
      // #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
      // so we need to add the disabled class to the headers and panels
      this._toggleClass(null, "ui-state-disabled", !!value);
      this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!value);
    },

    _keydown: function _keydown(event) {
      if (event.altKey || event.ctrlKey) {
        return;
      }

      var keyCode = $.ui.keyCode,
          length = this.headers.length,
          currentIndex = this.headers.index(event.target),
          toFocus = false;

      switch (event.keyCode) {
        case keyCode.RIGHT:
        case keyCode.DOWN:
          toFocus = this.headers[(currentIndex + 1) % length];
          break;
        case keyCode.LEFT:
        case keyCode.UP:
          toFocus = this.headers[(currentIndex - 1 + length) % length];
          break;
        case keyCode.SPACE:
        case keyCode.ENTER:
          this._eventHandler(event);
          break;
        case keyCode.HOME:
          toFocus = this.headers[0];
          break;
        case keyCode.END:
          toFocus = this.headers[length - 1];
          break;
      }

      if (toFocus) {
        $(event.target).attr("tabIndex", -1);
        $(toFocus).attr("tabIndex", 0);
        $(toFocus).trigger("focus");
        event.preventDefault();
      }
    },

    _panelKeyDown: function _panelKeyDown(event) {
      if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
        $(event.currentTarget).prev().trigger("focus");
      }
    },

    refresh: function refresh() {
      var options = this.options;
      this._processPanels();

      // Was collapsed or no panel
      if (options.active === false && options.collapsible === true || !this.headers.length) {
        options.active = false;
        this.active = $();

        // active false only when collapsible is true
      } else if (options.active === false) {
        this._activate(0);

        // was active, but active panel is gone
      } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {

        // all remaining panel are disabled
        if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
          options.active = false;
          this.active = $();

          // activate previous panel
        } else {
          this._activate(Math.max(0, options.active - 1));
        }

        // was active, active panel still exists
      } else {

        // make sure active index is correct
        options.active = this.headers.index(this.active);
      }

      this._destroyIcons();

      this._refresh();
    },

    _processPanels: function _processPanels() {
      var prevHeaders = this.headers,
          prevPanels = this.panels;

      this.headers = this.element.find(this.options.header);
      this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default");

      this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide();
      this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content");

      // Avoid memory leaks (#10056)
      if (prevPanels) {
        this._off(prevHeaders.not(this.headers));
        this._off(prevPanels.not(this.panels));
      }
    },

    _refresh: function _refresh() {
      var maxHeight,
          options = this.options,
          heightStyle = options.heightStyle,
          parent = this.element.parent();

      this.active = this._findActive(options.active);
      this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed");
      this._addClass(this.active.next(), "ui-accordion-content-active");
      this.active.next().show();

      this.headers.attr("role", "tab").each(function () {
        var header = $(this),
            headerId = header.uniqueId().attr("id"),
            panel = header.next(),
            panelId = panel.uniqueId().attr("id");
        header.attr("aria-controls", panelId);
        panel.attr("aria-labelledby", headerId);
      }).next().attr("role", "tabpanel");

      this.headers.not(this.active).attr({
        "aria-selected": "false",
        "aria-expanded": "false",
        tabIndex: -1
      }).next().attr({
        "aria-hidden": "true"
      }).hide();

      // Make sure at least one header is in the tab order
      if (!this.active.length) {
        this.headers.eq(0).attr("tabIndex", 0);
      } else {
        this.active.attr({
          "aria-selected": "true",
          "aria-expanded": "true",
          tabIndex: 0
        }).next().attr({
          "aria-hidden": "false"
        });
      }

      this._createIcons();

      this._setupEvents(options.event);

      if (heightStyle === "fill") {
        maxHeight = parent.height();
        this.element.siblings(":visible").each(function () {
          var elem = $(this),
              position = elem.css("position");

          if (position === "absolute" || position === "fixed") {
            return;
          }
          maxHeight -= elem.outerHeight(true);
        });

        this.headers.each(function () {
          maxHeight -= $(this).outerHeight(true);
        });

        this.headers.next().each(function () {
          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
        }).css("overflow", "auto");
      } else if (heightStyle === "auto") {
        maxHeight = 0;
        this.headers.next().each(function () {
          var isVisible = $(this).is(":visible");
          if (!isVisible) {
            $(this).show();
          }
          maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
          if (!isVisible) {
            $(this).hide();
          }
        }).height(maxHeight);
      }
    },

    _activate: function _activate(index) {
      var active = this._findActive(index)[0];

      // Trying to activate the already active panel
      if (active === this.active[0]) {
        return;
      }

      // Trying to collapse, simulate a click on the currently active header
      active = active || this.active[0];

      this._eventHandler({
        target: active,
        currentTarget: active,
        preventDefault: $.noop
      });
    },

    _findActive: function _findActive(selector) {
      return typeof selector === "number" ? this.headers.eq(selector) : $();
    },

    _setupEvents: function _setupEvents(event) {
      var events = {
        keydown: "_keydown"
      };
      if (event) {
        $.each(event.split(" "), function (index, eventName) {
          events[eventName] = "_eventHandler";
        });
      }

      this._off(this.headers.add(this.headers.next()));
      this._on(this.headers, events);
      this._on(this.headers.next(), { keydown: "_panelKeyDown" });
      this._hoverable(this.headers);
      this._focusable(this.headers);
    },

    _eventHandler: function _eventHandler(event) {
      var activeChildren,
          clickedChildren,
          options = this.options,
          active = this.active,
          clicked = $(event.currentTarget),
          clickedIsActive = clicked[0] === active[0],
          collapsing = clickedIsActive && options.collapsible,
          toShow = collapsing ? $() : clicked.next(),
          toHide = active.next(),
          eventData = {
        oldHeader: active,
        oldPanel: toHide,
        newHeader: collapsing ? $() : clicked,
        newPanel: toShow
      };

      event.preventDefault();

      if (

      // click on active header, but not collapsible
      clickedIsActive && !options.collapsible ||

      // allow canceling activation
      this._trigger("beforeActivate", event, eventData) === false) {
        return;
      }

      options.active = collapsing ? false : this.headers.index(clicked);

      // When the call to ._toggle() comes after the class changes
      // it causes a very odd bug in IE 8 (see #6720)
      this.active = clickedIsActive ? $() : clicked;
      this._toggle(eventData);

      // Switch classes
      // corner classes on the previously active header stay after the animation
      this._removeClass(active, "ui-accordion-header-active", "ui-state-active");
      if (options.icons) {
        activeChildren = active.children(".ui-accordion-header-icon");
        this._removeClass(activeChildren, null, options.icons.activeHeader)._addClass(activeChildren, null, options.icons.header);
      }

      if (!clickedIsActive) {
        this._removeClass(clicked, "ui-accordion-header-collapsed")._addClass(clicked, "ui-accordion-header-active", "ui-state-active");
        if (options.icons) {
          clickedChildren = clicked.children(".ui-accordion-header-icon");
          this._removeClass(clickedChildren, null, options.icons.header)._addClass(clickedChildren, null, options.icons.activeHeader);
        }

        this._addClass(clicked.next(), "ui-accordion-content-active");
      }
    },

    _toggle: function _toggle(data) {
      var toShow = data.newPanel,
          toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

      // Handle activating a panel during the animation for another activation
      this.prevShow.add(this.prevHide).stop(true, true);
      this.prevShow = toShow;
      this.prevHide = toHide;

      if (this.options.animate) {
        this._animate(toShow, toHide, data);
      } else {
        toHide.hide();
        toShow.show();
        this._toggleComplete(data);
      }

      toHide.attr({
        "aria-hidden": "true"
      });
      toHide.prev().attr({
        "aria-selected": "false",
        "aria-expanded": "false"
      });

      // if we're switching panels, remove the old header from the tab order
      // if we're opening from collapsed state, remove the previous header from the tab order
      // if we're collapsing, then keep the collapsing header in the tab order
      if (toShow.length && toHide.length) {
        toHide.prev().attr({
          "tabIndex": -1,
          "aria-expanded": "false"
        });
      } else if (toShow.length) {
        this.headers.filter(function () {
          return parseInt($(this).attr("tabIndex"), 10) === 0;
        }).attr("tabIndex", -1);
      }

      toShow.attr("aria-hidden", "false").prev().attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      });
    },

    _animate: function _animate(toShow, toHide, data) {
      var total,
          easing,
          duration,
          that = this,
          adjust = 0,
          boxSizing = toShow.css("box-sizing"),
          down = toShow.length && (!toHide.length || toShow.index() < toHide.index()),
          animate = this.options.animate || {},
          options = down && animate.down || animate,
          complete = function complete() {
        that._toggleComplete(data);
      };

      if (typeof options === "number") {
        duration = options;
      }
      if (typeof options === "string") {
        easing = options;
      }

      // fall back from options to animation in case of partial down settings
      easing = easing || options.easing || animate.easing;
      duration = duration || options.duration || animate.duration;

      if (!toHide.length) {
        return toShow.animate(this.showProps, duration, easing, complete);
      }
      if (!toShow.length) {
        return toHide.animate(this.hideProps, duration, easing, complete);
      }

      total = toShow.show().outerHeight();
      toHide.animate(this.hideProps, {
        duration: duration,
        easing: easing,
        step: function step(now, fx) {
          fx.now = Math.round(now);
        }
      });
      toShow.hide().animate(this.showProps, {
        duration: duration,
        easing: easing,
        complete: complete,
        step: function step(now, fx) {
          fx.now = Math.round(now);
          if (fx.prop !== "height") {
            if (boxSizing === "content-box") {
              adjust += fx.now;
            }
          } else if (that.options.heightStyle !== "content") {
            fx.now = Math.round(total - toHide.outerHeight() - adjust);
            adjust = 0;
          }
        }
      });
    },

    _toggleComplete: function _toggleComplete(data) {
      var toHide = data.oldPanel,
          prev = toHide.prev();

      this._removeClass(toHide, "ui-accordion-content-active");
      this._removeClass(prev, "ui-accordion-header-active")._addClass(prev, "ui-accordion-header-collapsed");

      // Work around for rendering bug in IE (#5421)
      if (toHide.length) {
        toHide.parent()[0].className = toHide.parent()[0].className;
      }
      this._trigger("activate", null, data);
    }
  });

  /*!
   * jQuery UI Menu 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Menu
  //>>group: Widgets
  //>>description: Creates nestable menus.
  //>>docs: http://api.jqueryui.com/menu/
  //>>demos: http://jqueryui.com/menu/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/menu.css
  //>>css.theme: ../../themes/base/theme.css


  var widgetsMenu = $.widget("ui.menu", {
    version: "1.12.1",
    defaultElement: "<ul>",
    delay: 300,
    options: {
      icons: {
        submenu: "ui-icon-caret-1-e"
      },
      items: "> *",
      menus: "ul",
      position: {
        my: "left top",
        at: "right top"
      },
      role: "menu",

      // Callbacks
      blur: null,
      focus: null,
      select: null
    },

    _create: function _create() {
      this.activeMenu = this.element;

      // Flag used to prevent firing of the click handler
      // as the event bubbles up through nested menus
      this.mouseHandled = false;
      this.element.uniqueId().attr({
        role: this.options.role,
        tabIndex: 0
      });

      this._addClass("ui-menu", "ui-widget ui-widget-content");
      this._on({

        // Prevent focus from sticking to links inside menu after clicking
        // them (focus should always stay on UL during navigation).
        "mousedown .ui-menu-item": function mousedownUiMenuItem(event) {
          event.preventDefault();
        },
        "click .ui-menu-item": function clickUiMenuItem(event) {
          var target = $(event.target);
          var active = $($.ui.safeActiveElement(this.document[0]));
          if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
            this.select(event);

            // Only set the mouseHandled flag if the event will bubble, see #9469.
            if (!event.isPropagationStopped()) {
              this.mouseHandled = true;
            }

            // Open submenu on click
            if (target.has(".ui-menu").length) {
              this.expand(event);
            } else if (!this.element.is(":focus") && active.closest(".ui-menu").length) {

              // Redirect focus to the menu
              this.element.trigger("focus", [true]);

              // If the active item is on the top level, let it stay active.
              // Otherwise, blur the active item since it is no longer visible.
              if (this.active && this.active.parents(".ui-menu").length === 1) {
                clearTimeout(this.timer);
              }
            }
          }
        },
        "mouseenter .ui-menu-item": function mouseenterUiMenuItem(event) {

          // Ignore mouse events while typeahead is active, see #10458.
          // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
          // is over an item in the menu
          if (this.previousFilter) {
            return;
          }

          var actualTarget = $(event.target).closest(".ui-menu-item"),
              target = $(event.currentTarget);

          // Ignore bubbled events on parent items, see #11641
          if (actualTarget[0] !== target[0]) {
            return;
          }

          // Remove ui-state-active class from siblings of the newly focused menu item
          // to avoid a jump caused by adjacent elements both having a class with a border
          this._removeClass(target.siblings().children(".ui-state-active"), null, "ui-state-active");
          this.focus(event, target);
        },
        mouseleave: "collapseAll",
        "mouseleave .ui-menu": "collapseAll",
        focus: function focus(event, keepActiveItem) {

          // If there's already an active item, keep it active
          // If not, activate the first item
          var item = this.active || this.element.find(this.options.items).eq(0);

          if (!keepActiveItem) {
            this.focus(event, item);
          }
        },
        blur: function blur(event) {
          this._delay(function () {
            var notContained = !$.contains(this.element[0], $.ui.safeActiveElement(this.document[0]));
            if (notContained) {
              this.collapseAll(event);
            }
          });
        },
        keydown: "_keydown"
      });

      this.refresh();

      // Clicks outside of a menu collapse any open menus
      this._on(this.document, {
        click: function click(event) {
          if (this._closeOnDocumentClick(event)) {
            this.collapseAll(event);
          }

          // Reset the mouseHandled flag
          this.mouseHandled = false;
        }
      });
    },

    _destroy: function _destroy() {
      var items = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),
          submenus = items.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");

      // Destroy (sub)menus
      this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled " + "tabIndex").removeUniqueId().show();

      submenus.children().each(function () {
        var elem = $(this);
        if (elem.data("ui-menu-submenu-caret")) {
          elem.remove();
        }
      });
    },

    _keydown: function _keydown(event) {
      var match,
          prev,
          character,
          skip,
          preventDefault = true;

      switch (event.keyCode) {
        case $.ui.keyCode.PAGE_UP:
          this.previousPage(event);
          break;
        case $.ui.keyCode.PAGE_DOWN:
          this.nextPage(event);
          break;
        case $.ui.keyCode.HOME:
          this._move("first", "first", event);
          break;
        case $.ui.keyCode.END:
          this._move("last", "last", event);
          break;
        case $.ui.keyCode.UP:
          this.previous(event);
          break;
        case $.ui.keyCode.DOWN:
          this.next(event);
          break;
        case $.ui.keyCode.LEFT:
          this.collapse(event);
          break;
        case $.ui.keyCode.RIGHT:
          if (this.active && !this.active.is(".ui-state-disabled")) {
            this.expand(event);
          }
          break;
        case $.ui.keyCode.ENTER:
        case $.ui.keyCode.SPACE:
          this._activate(event);
          break;
        case $.ui.keyCode.ESCAPE:
          this.collapse(event);
          break;
        default:
          preventDefault = false;
          prev = this.previousFilter || "";
          skip = false;

          // Support number pad values
          character = event.keyCode >= 96 && event.keyCode <= 105 ? (event.keyCode - 96).toString() : String.fromCharCode(event.keyCode);

          clearTimeout(this.filterTimer);

          if (character === prev) {
            skip = true;
          } else {
            character = prev + character;
          }

          match = this._filterMenuItems(character);
          match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;

          // If no matches on the current filter, reset to the last character pressed
          // to move down the menu to the first item that starts with that character
          if (!match.length) {
            character = String.fromCharCode(event.keyCode);
            match = this._filterMenuItems(character);
          }

          if (match.length) {
            this.focus(event, match);
            this.previousFilter = character;
            this.filterTimer = this._delay(function () {
              delete this.previousFilter;
            }, 1000);
          } else {
            delete this.previousFilter;
          }
      }

      if (preventDefault) {
        event.preventDefault();
      }
    },

    _activate: function _activate(event) {
      if (this.active && !this.active.is(".ui-state-disabled")) {
        if (this.active.children("[aria-haspopup='true']").length) {
          this.expand(event);
        } else {
          this.select(event);
        }
      }
    },

    refresh: function refresh() {
      var menus,
          items,
          newSubmenus,
          newItems,
          newWrappers,
          that = this,
          icon = this.options.icons.submenu,
          submenus = this.element.find(this.options.menus);

      this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length);

      // Initialize nested menus
      newSubmenus = submenus.filter(":not(.ui-menu)").hide().attr({
        role: this.options.role,
        "aria-hidden": "true",
        "aria-expanded": "false"
      }).each(function () {
        var menu = $(this),
            item = menu.prev(),
            submenuCaret = $("<span>").data("ui-menu-submenu-caret", true);

        that._addClass(submenuCaret, "ui-menu-icon", "ui-icon " + icon);
        item.attr("aria-haspopup", "true").prepend(submenuCaret);
        menu.attr("aria-labelledby", item.attr("id"));
      });

      this._addClass(newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front");

      menus = submenus.add(this.element);
      items = menus.find(this.options.items);

      // Initialize menu-items containing spaces and/or dashes only as dividers
      items.not(".ui-menu-item").each(function () {
        var item = $(this);
        if (that._isDivider(item)) {
          that._addClass(item, "ui-menu-divider", "ui-widget-content");
        }
      });

      // Don't refresh list items that are already adapted
      newItems = items.not(".ui-menu-item, .ui-menu-divider");
      newWrappers = newItems.children().not(".ui-menu").uniqueId().attr({
        tabIndex: -1,
        role: this._itemRole()
      });
      this._addClass(newItems, "ui-menu-item")._addClass(newWrappers, "ui-menu-item-wrapper");

      // Add aria-disabled attribute to any disabled menu item
      items.filter(".ui-state-disabled").attr("aria-disabled", "true");

      // If the active item has been removed, blur the menu
      if (this.active && !$.contains(this.element[0], this.active[0])) {
        this.blur();
      }
    },

    _itemRole: function _itemRole() {
      return {
        menu: "menuitem",
        listbox: "option"
      }[this.options.role];
    },

    _setOption: function _setOption(key, value) {
      if (key === "icons") {
        var icons = this.element.find(".ui-menu-icon");
        this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu);
      }
      this._super(key, value);
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._super(value);

      this.element.attr("aria-disabled", String(value));
      this._toggleClass(null, "ui-state-disabled", !!value);
    },

    focus: function focus(event, item) {
      var nested, focused, activeParent;
      this.blur(event, event && event.type === "focus");

      this._scrollIntoView(item);

      this.active = item.first();

      focused = this.active.children(".ui-menu-item-wrapper");
      this._addClass(focused, null, "ui-state-active");

      // Only update aria-activedescendant if there's a role
      // otherwise we assume focus is managed elsewhere
      if (this.options.role) {
        this.element.attr("aria-activedescendant", focused.attr("id"));
      }

      // Highlight active parent menu item, if any
      activeParent = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper");
      this._addClass(activeParent, null, "ui-state-active");

      if (event && event.type === "keydown") {
        this._close();
      } else {
        this.timer = this._delay(function () {
          this._close();
        }, this.delay);
      }

      nested = item.children(".ui-menu");
      if (nested.length && event && /^mouse/.test(event.type)) {
        this._startOpening(nested);
      }
      this.activeMenu = item.parent();

      this._trigger("focus", event, { item: item });
    },

    _scrollIntoView: function _scrollIntoView(item) {
      var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
      if (this._hasScroll()) {
        borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
        paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
        scroll = this.activeMenu.scrollTop();
        elementHeight = this.activeMenu.height();
        itemHeight = item.outerHeight();

        if (offset < 0) {
          this.activeMenu.scrollTop(scroll + offset);
        } else if (offset + itemHeight > elementHeight) {
          this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
        }
      }
    },

    blur: function blur(event, fromFocus) {
      if (!fromFocus) {
        clearTimeout(this.timer);
      }

      if (!this.active) {
        return;
      }

      this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active");

      this._trigger("blur", event, { item: this.active });
      this.active = null;
    },

    _startOpening: function _startOpening(submenu) {
      clearTimeout(this.timer);

      // Don't open if already open fixes a Firefox bug that caused a .5 pixel
      // shift in the submenu position when mousing over the caret icon
      if (submenu.attr("aria-hidden") !== "true") {
        return;
      }

      this.timer = this._delay(function () {
        this._close();
        this._open(submenu);
      }, this.delay);
    },

    _open: function _open(submenu) {
      var position = $.extend({
        of: this.active
      }, this.options.position);

      clearTimeout(this.timer);
      this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");

      submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
    },

    collapseAll: function collapseAll(event, all) {
      clearTimeout(this.timer);
      this.timer = this._delay(function () {

        // If we were passed an event, look for the submenu that contains the event
        var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));

        // If we found no valid submenu ancestor, use the main menu to close all
        // sub menus anyway
        if (!currentMenu.length) {
          currentMenu = this.element;
        }

        this._close(currentMenu);

        this.blur(event);

        // Work around active item staying active after menu is blurred
        this._removeClass(currentMenu.find(".ui-state-active"), null, "ui-state-active");

        this.activeMenu = currentMenu;
      }, this.delay);
    },

    // With no arguments, closes the currently active menu - if nothing is active
    // it closes all menus.  If passed an argument, it will search for menus BELOW
    _close: function _close(startMenu) {
      if (!startMenu) {
        startMenu = this.active ? this.active.parent() : this.element;
      }

      startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
    },

    _closeOnDocumentClick: function _closeOnDocumentClick(event) {
      return !$(event.target).closest(".ui-menu").length;
    },

    _isDivider: function _isDivider(item) {

      // Match hyphen, em dash, en dash
      return !/[^\-\u2014\u2013\s]/.test(item.text());
    },

    collapse: function collapse(event) {
      var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
      if (newItem && newItem.length) {
        this._close();
        this.focus(event, newItem);
      }
    },

    expand: function expand(event) {
      var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();

      if (newItem && newItem.length) {
        this._open(newItem.parent());

        // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
        this._delay(function () {
          this.focus(event, newItem);
        });
      }
    },

    next: function next(event) {
      this._move("next", "first", event);
    },

    previous: function previous(event) {
      this._move("prev", "last", event);
    },

    isFirstItem: function isFirstItem() {
      return this.active && !this.active.prevAll(".ui-menu-item").length;
    },

    isLastItem: function isLastItem() {
      return this.active && !this.active.nextAll(".ui-menu-item").length;
    },

    _move: function _move(direction, filter, event) {
      var next;
      if (this.active) {
        if (direction === "first" || direction === "last") {
          next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1);
        } else {
          next = this.active[direction + "All"](".ui-menu-item").eq(0);
        }
      }
      if (!next || !next.length || !this.active) {
        next = this.activeMenu.find(this.options.items)[filter]();
      }

      this.focus(event, next);
    },

    nextPage: function nextPage(event) {
      var item, base, height;

      if (!this.active) {
        this.next(event);
        return;
      }
      if (this.isLastItem()) {
        return;
      }
      if (this._hasScroll()) {
        base = this.active.offset().top;
        height = this.element.height();
        this.active.nextAll(".ui-menu-item").each(function () {
          item = $(this);
          return item.offset().top - base - height < 0;
        });

        this.focus(event, item);
      } else {
        this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? "first" : "last"]());
      }
    },

    previousPage: function previousPage(event) {
      var item, base, height;
      if (!this.active) {
        this.next(event);
        return;
      }
      if (this.isFirstItem()) {
        return;
      }
      if (this._hasScroll()) {
        base = this.active.offset().top;
        height = this.element.height();
        this.active.prevAll(".ui-menu-item").each(function () {
          item = $(this);
          return item.offset().top - base + height > 0;
        });

        this.focus(event, item);
      } else {
        this.focus(event, this.activeMenu.find(this.options.items).first());
      }
    },

    _hasScroll: function _hasScroll() {
      return this.element.outerHeight() < this.element.prop("scrollHeight");
    },

    select: function select(event) {

      // TODO: It should never be possible to not have an active item at this
      // point, but the tests don't trigger mouseenter before click.
      this.active = this.active || $(event.target).closest(".ui-menu-item");
      var ui = { item: this.active };
      if (!this.active.has(".ui-menu").length) {
        this.collapseAll(event, true);
      }
      this._trigger("select", event, ui);
    },

    _filterMenuItems: function _filterMenuItems(character) {
      var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
          regex = new RegExp("^" + escapedCharacter, "i");

      return this.activeMenu.find(this.options.items)

      // Only match on items, not dividers or other content (#10571)
      .filter(".ui-menu-item").filter(function () {
        return regex.test($.trim($(this).children(".ui-menu-item-wrapper").text()));
      });
    }
  });

  /*!
   * jQuery UI Autocomplete 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Autocomplete
  //>>group: Widgets
  //>>description: Lists suggested words as the user is typing.
  //>>docs: http://api.jqueryui.com/autocomplete/
  //>>demos: http://jqueryui.com/autocomplete/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/autocomplete.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.autocomplete", {
    version: "1.12.1",
    defaultElement: "<input>",
    options: {
      appendTo: null,
      autoFocus: false,
      delay: 300,
      minLength: 1,
      position: {
        my: "left top",
        at: "left bottom",
        collision: "none"
      },
      source: null,

      // Callbacks
      change: null,
      close: null,
      focus: null,
      open: null,
      response: null,
      search: null,
      select: null
    },

    requestIndex: 0,
    pending: 0,

    _create: function _create() {

      // Some browsers only repeat keydown events, not keypress events,
      // so we use the suppressKeyPress flag to determine if we've already
      // handled the keydown event. #7269
      // Unfortunately the code for & in keypress is the same as the up arrow,
      // so we use the suppressKeyPressRepeat flag to avoid handling keypress
      // events when we know the keydown event was used to modify the
      // search term. #7799
      var suppressKeyPress,
          suppressKeyPressRepeat,
          suppressInput,
          nodeName = this.element[0].nodeName.toLowerCase(),
          isTextarea = nodeName === "textarea",
          isInput = nodeName === "input";

      // Textareas are always multi-line
      // Inputs are always single-line, even if inside a contentEditable element
      // IE also treats inputs as contentEditable
      // All other element types are determined by whether or not they're contentEditable
      this.isMultiLine = isTextarea || !isInput && this._isContentEditable(this.element);

      this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
      this.isNewMenu = true;

      this._addClass("ui-autocomplete-input");
      this.element.attr("autocomplete", "off");

      this._on(this.element, {
        keydown: function keydown(event) {
          if (this.element.prop("readOnly")) {
            suppressKeyPress = true;
            suppressInput = true;
            suppressKeyPressRepeat = true;
            return;
          }

          suppressKeyPress = false;
          suppressInput = false;
          suppressKeyPressRepeat = false;
          var keyCode = $.ui.keyCode;
          switch (event.keyCode) {
            case keyCode.PAGE_UP:
              suppressKeyPress = true;
              this._move("previousPage", event);
              break;
            case keyCode.PAGE_DOWN:
              suppressKeyPress = true;
              this._move("nextPage", event);
              break;
            case keyCode.UP:
              suppressKeyPress = true;
              this._keyEvent("previous", event);
              break;
            case keyCode.DOWN:
              suppressKeyPress = true;
              this._keyEvent("next", event);
              break;
            case keyCode.ENTER:

              // when menu is open and has focus
              if (this.menu.active) {

                // #6055 - Opera still allows the keypress to occur
                // which causes forms to submit
                suppressKeyPress = true;
                event.preventDefault();
                this.menu.select(event);
              }
              break;
            case keyCode.TAB:
              if (this.menu.active) {
                this.menu.select(event);
              }
              break;
            case keyCode.ESCAPE:
              if (this.menu.element.is(":visible")) {
                if (!this.isMultiLine) {
                  this._value(this.term);
                }
                this.close(event);

                // Different browsers have different default behavior for escape
                // Single press can mean undo or clear
                // Double press in IE means clear the whole form
                event.preventDefault();
              }
              break;
            default:
              suppressKeyPressRepeat = true;

              // search timeout should be triggered before the input value is changed
              this._searchTimeout(event);
              break;
          }
        },
        keypress: function keypress(event) {
          if (suppressKeyPress) {
            suppressKeyPress = false;
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
              event.preventDefault();
            }
            return;
          }
          if (suppressKeyPressRepeat) {
            return;
          }

          // Replicate some key handlers to allow them to repeat in Firefox and Opera
          var keyCode = $.ui.keyCode;
          switch (event.keyCode) {
            case keyCode.PAGE_UP:
              this._move("previousPage", event);
              break;
            case keyCode.PAGE_DOWN:
              this._move("nextPage", event);
              break;
            case keyCode.UP:
              this._keyEvent("previous", event);
              break;
            case keyCode.DOWN:
              this._keyEvent("next", event);
              break;
          }
        },
        input: function input(event) {
          if (suppressInput) {
            suppressInput = false;
            event.preventDefault();
            return;
          }
          this._searchTimeout(event);
        },
        focus: function focus() {
          this.selectedItem = null;
          this.previous = this._value();
        },
        blur: function blur(event) {
          if (this.cancelBlur) {
            delete this.cancelBlur;
            return;
          }

          clearTimeout(this.searching);
          this.close(event);
          this._change(event);
        }
      });

      this._initSource();
      this.menu = $("<ul>").appendTo(this._appendTo()).menu({

        // disable ARIA support, the live region takes care of that
        role: null
      }).hide().menu("instance");

      this._addClass(this.menu.element, "ui-autocomplete", "ui-front");
      this._on(this.menu.element, {
        mousedown: function mousedown(event) {

          // prevent moving focus out of the text field
          event.preventDefault();

          // IE doesn't prevent moving focus even with event.preventDefault()
          // so we set a flag to know when we should ignore the blur event
          this.cancelBlur = true;
          this._delay(function () {
            delete this.cancelBlur;

            // Support: IE 8 only
            // Right clicking a menu item or selecting text from the menu items will
            // result in focus moving out of the input. However, we've already received
            // and ignored the blur event because of the cancelBlur flag set above. So
            // we restore focus to ensure that the menu closes properly based on the user's
            // next actions.
            if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {
              this.element.trigger("focus");
            }
          });
        },
        menufocus: function menufocus(event, ui) {
          var label, item;

          // support: Firefox
          // Prevent accidental activation of menu items in Firefox (#7024 #9118)
          if (this.isNewMenu) {
            this.isNewMenu = false;
            if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
              this.menu.blur();

              this.document.one("mousemove", function () {
                $(event.target).trigger(event.originalEvent);
              });

              return;
            }
          }

          item = ui.item.data("ui-autocomplete-item");
          if (false !== this._trigger("focus", event, { item: item })) {

            // use value to match what will end up in the input, if it was a key event
            if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
              this._value(item.value);
            }
          }

          // Announce the value in the liveRegion
          label = ui.item.attr("aria-label") || item.value;
          if (label && $.trim(label).length) {
            this.liveRegion.children().hide();
            $("<div>").text(label).appendTo(this.liveRegion);
          }
        },
        menuselect: function menuselect(event, ui) {
          var item = ui.item.data("ui-autocomplete-item"),
              previous = this.previous;

          // Only trigger when focus was lost (click on menu)
          if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {
            this.element.trigger("focus");
            this.previous = previous;

            // #6109 - IE triggers two focus events and the second
            // is asynchronous, so we need to reset the previous
            // term synchronously and asynchronously :-(
            this._delay(function () {
              this.previous = previous;
              this.selectedItem = item;
            });
          }

          if (false !== this._trigger("select", event, { item: item })) {
            this._value(item.value);
          }

          // reset the term after the select event
          // this allows custom select handling to work properly
          this.term = this._value();

          this.close(event);
          this.selectedItem = item;
        }
      });

      this.liveRegion = $("<div>", {
        role: "status",
        "aria-live": "assertive",
        "aria-relevant": "additions"
      }).appendTo(this.document[0].body);

      this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");

      // Turning off autocomplete prevents the browser from remembering the
      // value when navigating through history, so we re-enable autocomplete
      // if the page is unloaded before the widget is destroyed. #7790
      this._on(this.window, {
        beforeunload: function beforeunload() {
          this.element.removeAttr("autocomplete");
        }
      });
    },

    _destroy: function _destroy() {
      clearTimeout(this.searching);
      this.element.removeAttr("autocomplete");
      this.menu.element.remove();
      this.liveRegion.remove();
    },

    _setOption: function _setOption(key, value) {
      this._super(key, value);
      if (key === "source") {
        this._initSource();
      }
      if (key === "appendTo") {
        this.menu.element.appendTo(this._appendTo());
      }
      if (key === "disabled" && value && this.xhr) {
        this.xhr.abort();
      }
    },

    _isEventTargetInWidget: function _isEventTargetInWidget(event) {
      var menuElement = this.menu.element[0];

      return event.target === this.element[0] || event.target === menuElement || $.contains(menuElement, event.target);
    },

    _closeOnClickOutside: function _closeOnClickOutside(event) {
      if (!this._isEventTargetInWidget(event)) {
        this.close();
      }
    },

    _appendTo: function _appendTo() {
      var element = this.options.appendTo;

      if (element) {
        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
      }

      if (!element || !element[0]) {
        element = this.element.closest(".ui-front, dialog");
      }

      if (!element.length) {
        element = this.document[0].body;
      }

      return element;
    },

    _initSource: function _initSource() {
      var array,
          url,
          that = this;
      if ($.isArray(this.options.source)) {
        array = this.options.source;
        this.source = function (request, response) {
          response($.ui.autocomplete.filter(array, request.term));
        };
      } else if (typeof this.options.source === "string") {
        url = this.options.source;
        this.source = function (request, response) {
          if (that.xhr) {
            that.xhr.abort();
          }
          that.xhr = $.ajax({
            url: url,
            data: request,
            dataType: "json",
            success: function success(data) {
              response(data);
            },
            error: function error() {
              response([]);
            }
          });
        };
      } else {
        this.source = this.options.source;
      }
    },

    _searchTimeout: function _searchTimeout(event) {
      clearTimeout(this.searching);
      this.searching = this._delay(function () {

        // Search if the value has changed, or if the user retypes the same value (see #7434)
        var equalValues = this.term === this._value(),
            menuVisible = this.menu.element.is(":visible"),
            modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

        if (!equalValues || equalValues && !menuVisible && !modifierKey) {
          this.selectedItem = null;
          this.search(null, event);
        }
      }, this.options.delay);
    },

    search: function search(value, event) {
      value = value != null ? value : this._value();

      // Always save the actual value, not the one passed as an argument
      this.term = this._value();

      if (value.length < this.options.minLength) {
        return this.close(event);
      }

      if (this._trigger("search", event) === false) {
        return;
      }

      return this._search(value);
    },

    _search: function _search(value) {
      this.pending++;
      this._addClass("ui-autocomplete-loading");
      this.cancelSearch = false;

      this.source({ term: value }, this._response());
    },

    _response: function _response() {
      var index = ++this.requestIndex;

      return $.proxy(function (content) {
        if (index === this.requestIndex) {
          this.__response(content);
        }

        this.pending--;
        if (!this.pending) {
          this._removeClass("ui-autocomplete-loading");
        }
      }, this);
    },

    __response: function __response(content) {
      if (content) {
        content = this._normalize(content);
      }
      this._trigger("response", null, { content: content });
      if (!this.options.disabled && content && content.length && !this.cancelSearch) {
        this._suggest(content);
        this._trigger("open");
      } else {

        // use ._close() instead of .close() so we don't cancel future searches
        this._close();
      }
    },

    close: function close(event) {
      this.cancelSearch = true;
      this._close(event);
    },

    _close: function _close(event) {

      // Remove the handler that closes the menu on outside clicks
      this._off(this.document, "mousedown");

      if (this.menu.element.is(":visible")) {
        this.menu.element.hide();
        this.menu.blur();
        this.isNewMenu = true;
        this._trigger("close", event);
      }
    },

    _change: function _change(event) {
      if (this.previous !== this._value()) {
        this._trigger("change", event, { item: this.selectedItem });
      }
    },

    _normalize: function _normalize(items) {

      // assume all items have the right format when the first item is complete
      if (items.length && items[0].label && items[0].value) {
        return items;
      }
      return $.map(items, function (item) {
        if (typeof item === "string") {
          return {
            label: item,
            value: item
          };
        }
        return $.extend({}, item, {
          label: item.label || item.value,
          value: item.value || item.label
        });
      });
    },

    _suggest: function _suggest(items) {
      var ul = this.menu.element.empty();
      this._renderMenu(ul, items);
      this.isNewMenu = true;
      this.menu.refresh();

      // Size and position menu
      ul.show();
      this._resizeMenu();
      ul.position($.extend({
        of: this.element
      }, this.options.position));

      if (this.options.autoFocus) {
        this.menu.next();
      }

      // Listen for interactions outside of the widget (#6642)
      this._on(this.document, {
        mousedown: "_closeOnClickOutside"
      });
    },

    _resizeMenu: function _resizeMenu() {
      var ul = this.menu.element;
      ul.outerWidth(Math.max(

      // Firefox wraps long text (possibly a rounding bug)
      // so we add 1px to avoid the wrapping (#7513)
      ul.width("").outerWidth() + 1, this.element.outerWidth()));
    },

    _renderMenu: function _renderMenu(ul, items) {
      var that = this;
      $.each(items, function (index, item) {
        that._renderItemData(ul, item);
      });
    },

    _renderItemData: function _renderItemData(ul, item) {
      return this._renderItem(ul, item).data("ui-autocomplete-item", item);
    },

    _renderItem: function _renderItem(ul, item) {
      return $("<li>").append($("<div>").text(item.label)).appendTo(ul);
    },

    _move: function _move(direction, event) {
      if (!this.menu.element.is(":visible")) {
        this.search(null, event);
        return;
      }
      if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {

        if (!this.isMultiLine) {
          this._value(this.term);
        }

        this.menu.blur();
        return;
      }
      this.menu[direction](event);
    },

    widget: function widget() {
      return this.menu.element;
    },

    _value: function _value() {
      return this.valueMethod.apply(this.element, arguments);
    },

    _keyEvent: function _keyEvent(keyEvent, event) {
      if (!this.isMultiLine || this.menu.element.is(":visible")) {
        this._move(keyEvent, event);

        // Prevents moving cursor to beginning/end of the text field in some browsers
        event.preventDefault();
      }
    },

    // Support: Chrome <=50
    // We should be able to just use this.element.prop( "isContentEditable" )
    // but hidden elements always report false in Chrome.
    // https://code.google.com/p/chromium/issues/detail?id=313082
    _isContentEditable: function _isContentEditable(element) {
      if (!element.length) {
        return false;
      }

      var editable = element.prop("contentEditable");

      if (editable === "inherit") {
        return this._isContentEditable(element.parent());
      }

      return editable === "true";
    }
  });

  $.extend($.ui.autocomplete, {
    escapeRegex: function escapeRegex(value) {
      return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    },
    filter: function filter(array, term) {
      var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
      return $.grep(array, function (value) {
        return matcher.test(value.label || value.value || value);
      });
    }
  });

  // Live region extension, adding a `messages` option
  // NOTE: This is an experimental API. We are still investigating
  // a full solution for string manipulation and internationalization.
  $.widget("ui.autocomplete", $.ui.autocomplete, {
    options: {
      messages: {
        noResults: "No search results.",
        results: function results(amount) {
          return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
        }
      }
    },

    __response: function __response(content) {
      var message;
      this._superApply(arguments);
      if (this.options.disabled || this.cancelSearch) {
        return;
      }
      if (content && content.length) {
        message = this.options.messages.results(content.length);
      } else {
        message = this.options.messages.noResults;
      }
      this.liveRegion.children().hide();
      $("<div>").text(message).appendTo(this.liveRegion);
    }
  });

  var widgetsAutocomplete = $.ui.autocomplete;

  /*!
   * jQuery UI Controlgroup 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Controlgroup
  //>>group: Widgets
  //>>description: Visually groups form control widgets
  //>>docs: http://api.jqueryui.com/controlgroup/
  //>>demos: http://jqueryui.com/controlgroup/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/controlgroup.css
  //>>css.theme: ../../themes/base/theme.css


  var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

  var widgetsControlgroup = $.widget("ui.controlgroup", {
    version: "1.12.1",
    defaultElement: "<div>",
    options: {
      direction: "horizontal",
      disabled: null,
      onlyVisible: true,
      items: {
        "button": "input[type=button], input[type=submit], input[type=reset], button, a",
        "controlgroupLabel": ".ui-controlgroup-label",
        "checkboxradio": "input[type='checkbox'], input[type='radio']",
        "selectmenu": "select",
        "spinner": ".ui-spinner-input"
      }
    },

    _create: function _create() {
      this._enhance();
    },

    // To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
    _enhance: function _enhance() {
      this.element.attr("role", "toolbar");
      this.refresh();
    },

    _destroy: function _destroy() {
      this._callChildMethod("destroy");
      this.childWidgets.removeData("ui-controlgroup-data");
      this.element.removeAttr("role");
      if (this.options.items.controlgroupLabel) {
        this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();
      }
    },

    _initWidgets: function _initWidgets() {
      var that = this,
          childWidgets = [];

      // First we iterate over each of the items options
      $.each(this.options.items, function (widget, selector) {
        var labels;
        var options = {};

        // Make sure the widget has a selector set
        if (!selector) {
          return;
        }

        if (widget === "controlgroupLabel") {
          labels = that.element.find(selector);
          labels.each(function () {
            var element = $(this);

            if (element.children(".ui-controlgroup-label-contents").length) {
              return;
            }
            element.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
          });
          that._addClass(labels, null, "ui-widget ui-widget-content ui-state-default");
          childWidgets = childWidgets.concat(labels.get());
          return;
        }

        // Make sure the widget actually exists
        if (!$.fn[widget]) {
          return;
        }

        // We assume everything is in the middle to start because we can't determine
        // first / last elements until all enhancments are done.
        if (that["_" + widget + "Options"]) {
          options = that["_" + widget + "Options"]("middle");
        } else {
          options = { classes: {} };
        }

        // Find instances of this widget inside controlgroup and init them
        that.element.find(selector).each(function () {
          var element = $(this);
          var instance = element[widget]("instance");

          // We need to clone the default options for this type of widget to avoid
          // polluting the variable options which has a wider scope than a single widget.
          var instanceOptions = $.widget.extend({}, options);

          // If the button is the child of a spinner ignore it
          // TODO: Find a more generic solution
          if (widget === "button" && element.parent(".ui-spinner").length) {
            return;
          }

          // Create the widget if it doesn't exist
          if (!instance) {
            instance = element[widget]()[widget]("instance");
          }
          if (instance) {
            instanceOptions.classes = that._resolveClassesValues(instanceOptions.classes, instance);
          }
          element[widget](instanceOptions);

          // Store an instance of the controlgroup to be able to reference
          // from the outermost element for changing options and refresh
          var widgetElement = element[widget]("widget");
          $.data(widgetElement[0], "ui-controlgroup-data", instance ? instance : element[widget]("instance"));

          childWidgets.push(widgetElement[0]);
        });
      });

      this.childWidgets = $($.unique(childWidgets));
      this._addClass(this.childWidgets, "ui-controlgroup-item");
    },

    _callChildMethod: function _callChildMethod(method) {
      this.childWidgets.each(function () {
        var element = $(this),
            data = element.data("ui-controlgroup-data");
        if (data && data[method]) {
          data[method]();
        }
      });
    },

    _updateCornerClass: function _updateCornerClass(element, position) {
      var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
      var add = this._buildSimpleOptions(position, "label").classes.label;

      this._removeClass(element, null, remove);
      this._addClass(element, null, add);
    },

    _buildSimpleOptions: function _buildSimpleOptions(position, key) {
      var direction = this.options.direction === "vertical";
      var result = {
        classes: {}
      };
      result.classes[key] = {
        "middle": "",
        "first": "ui-corner-" + (direction ? "top" : "left"),
        "last": "ui-corner-" + (direction ? "bottom" : "right"),
        "only": "ui-corner-all"
      }[position];

      return result;
    },

    _spinnerOptions: function _spinnerOptions(position) {
      var options = this._buildSimpleOptions(position, "ui-spinner");

      options.classes["ui-spinner-up"] = "";
      options.classes["ui-spinner-down"] = "";

      return options;
    },

    _buttonOptions: function _buttonOptions(position) {
      return this._buildSimpleOptions(position, "ui-button");
    },

    _checkboxradioOptions: function _checkboxradioOptions(position) {
      return this._buildSimpleOptions(position, "ui-checkboxradio-label");
    },

    _selectmenuOptions: function _selectmenuOptions(position) {
      var direction = this.options.direction === "vertical";
      return {
        width: direction ? "auto" : false,
        classes: {
          middle: {
            "ui-selectmenu-button-open": "",
            "ui-selectmenu-button-closed": ""
          },
          first: {
            "ui-selectmenu-button-open": "ui-corner-" + (direction ? "top" : "tl"),
            "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "top" : "left")
          },
          last: {
            "ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
            "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "bottom" : "right")
          },
          only: {
            "ui-selectmenu-button-open": "ui-corner-top",
            "ui-selectmenu-button-closed": "ui-corner-all"
          }

        }[position]
      };
    },

    _resolveClassesValues: function _resolveClassesValues(classes, instance) {
      var result = {};
      $.each(classes, function (key) {
        var current = instance.options.classes[key] || "";
        current = $.trim(current.replace(controlgroupCornerRegex, ""));
        result[key] = (current + " " + classes[key]).replace(/\s+/g, " ");
      });
      return result;
    },

    _setOption: function _setOption(key, value) {
      if (key === "direction") {
        this._removeClass("ui-controlgroup-" + this.options.direction);
      }

      this._super(key, value);
      if (key === "disabled") {
        this._callChildMethod(value ? "disable" : "enable");
        return;
      }

      this.refresh();
    },

    refresh: function refresh() {
      var children,
          that = this;

      this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction);

      if (this.options.direction === "horizontal") {
        this._addClass(null, "ui-helper-clearfix");
      }
      this._initWidgets();

      children = this.childWidgets;

      // We filter here because we need to track all childWidgets not just the visible ones
      if (this.options.onlyVisible) {
        children = children.filter(":visible");
      }

      if (children.length) {

        // We do this last because we need to make sure all enhancment is done
        // before determining first and last
        $.each(["first", "last"], function (index, value) {
          var instance = children[value]().data("ui-controlgroup-data");

          if (instance && that["_" + instance.widgetName + "Options"]) {
            var options = that["_" + instance.widgetName + "Options"](children.length === 1 ? "only" : value);
            options.classes = that._resolveClassesValues(options.classes, instance);
            instance.element[instance.widgetName](options);
          } else {
            that._updateCornerClass(children[value](), value);
          }
        });

        // Finally call the refresh method on each of the child widgets.
        this._callChildMethod("refresh");
      }
    }
  });

  /*!
   * jQuery UI Checkboxradio 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Checkboxradio
  //>>group: Widgets
  //>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
  //>>docs: http://api.jqueryui.com/checkboxradio/
  //>>demos: http://jqueryui.com/checkboxradio/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/button.css
  //>>css.structure: ../../themes/base/checkboxradio.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.checkboxradio", [$.ui.formResetMixin, {
    version: "1.12.1",
    options: {
      disabled: null,
      label: null,
      icon: true,
      classes: {
        "ui-checkboxradio-label": "ui-corner-all",
        "ui-checkboxradio-icon": "ui-corner-all"
      }
    },

    _getCreateOptions: function _getCreateOptions() {
      var disabled, labels;
      var that = this;
      var options = this._super() || {};

      // We read the type here, because it makes more sense to throw a element type error first,
      // rather then the error for lack of a label. Often if its the wrong type, it
      // won't have a label (e.g. calling on a div, btn, etc)
      this._readType();

      labels = this.element.labels();

      // If there are multiple labels, use the last one
      this.label = $(labels[labels.length - 1]);
      if (!this.label.length) {
        $.error("No label found for checkboxradio widget");
      }

      this.originalLabel = "";

      // We need to get the label text but this may also need to make sure it does not contain the
      // input itself.
      this.label.contents().not(this.element[0]).each(function () {

        // The label contents could be text, html, or a mix. We concat each element to get a
        // string representation of the label, without the input as part of it.
        that.originalLabel += this.nodeType === 3 ? $(this).text() : this.outerHTML;
      });

      // Set the label option if we found label text
      if (this.originalLabel) {
        options.label = this.originalLabel;
      }

      disabled = this.element[0].disabled;
      if (disabled != null) {
        options.disabled = disabled;
      }
      return options;
    },

    _create: function _create() {
      var checked = this.element[0].checked;

      this._bindFormResetHandler();

      if (this.options.disabled == null) {
        this.options.disabled = this.element[0].disabled;
      }

      this._setOption("disabled", this.options.disabled);
      this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible");
      this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget");

      if (this.type === "radio") {
        this._addClass(this.label, "ui-checkboxradio-radio-label");
      }

      if (this.options.label && this.options.label !== this.originalLabel) {
        this._updateLabel();
      } else if (this.originalLabel) {
        this.options.label = this.originalLabel;
      }

      this._enhance();

      if (checked) {
        this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active");
        if (this.icon) {
          this._addClass(this.icon, null, "ui-state-hover");
        }
      }

      this._on({
        change: "_toggleClasses",
        focus: function focus() {
          this._addClass(this.label, null, "ui-state-focus ui-visual-focus");
        },
        blur: function blur() {
          this._removeClass(this.label, null, "ui-state-focus ui-visual-focus");
        }
      });
    },

    _readType: function _readType() {
      var nodeName = this.element[0].nodeName.toLowerCase();
      this.type = this.element[0].type;
      if (nodeName !== "input" || !/radio|checkbox/.test(this.type)) {
        $.error("Can't create checkboxradio on element.nodeName=" + nodeName + " and element.type=" + this.type);
      }
    },

    // Support jQuery Mobile enhanced option
    _enhance: function _enhance() {
      this._updateIcon(this.element[0].checked);
    },

    widget: function widget() {
      return this.label;
    },

    _getRadioGroup: function _getRadioGroup() {
      var group;
      var name = this.element[0].name;
      var nameSelector = "input[name='" + $.ui.escapeSelector(name) + "']";

      if (!name) {
        return $([]);
      }

      if (this.form.length) {
        group = $(this.form[0].elements).filter(nameSelector);
      } else {

        // Not inside a form, check all inputs that also are not inside a form
        group = $(nameSelector).filter(function () {
          return $(this).form().length === 0;
        });
      }

      return group.not(this.element);
    },

    _toggleClasses: function _toggleClasses() {
      var checked = this.element[0].checked;
      this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);

      if (this.options.icon && this.type === "checkbox") {
        this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", checked)._toggleClass(this.icon, null, "ui-icon-blank", !checked);
      }

      if (this.type === "radio") {
        this._getRadioGroup().each(function () {
          var instance = $(this).checkboxradio("instance");

          if (instance) {
            instance._removeClass(instance.label, "ui-checkboxradio-checked", "ui-state-active");
          }
        });
      }
    },

    _destroy: function _destroy() {
      this._unbindFormResetHandler();

      if (this.icon) {
        this.icon.remove();
        this.iconSpace.remove();
      }
    },

    _setOption: function _setOption(key, value) {

      // We don't allow the value to be set to nothing
      if (key === "label" && !value) {
        return;
      }

      this._super(key, value);

      if (key === "disabled") {
        this._toggleClass(this.label, null, "ui-state-disabled", value);
        this.element[0].disabled = value;

        // Don't refresh when setting disabled
        return;
      }
      this.refresh();
    },

    _updateIcon: function _updateIcon(checked) {
      var toAdd = "ui-icon ui-icon-background ";

      if (this.options.icon) {
        if (!this.icon) {
          this.icon = $("<span>");
          this.iconSpace = $("<span> </span>");
          this._addClass(this.iconSpace, "ui-checkboxradio-icon-space");
        }

        if (this.type === "checkbox") {
          toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
          this._removeClass(this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check");
        } else {
          toAdd += "ui-icon-blank";
        }
        this._addClass(this.icon, "ui-checkboxradio-icon", toAdd);
        if (!checked) {
          this._removeClass(this.icon, null, "ui-icon-check ui-state-checked");
        }
        this.icon.prependTo(this.label).after(this.iconSpace);
      } else if (this.icon !== undefined) {
        this.icon.remove();
        this.iconSpace.remove();
        delete this.icon;
      }
    },

    _updateLabel: function _updateLabel() {

      // Remove the contents of the label ( minus the icon, icon space, and input )
      var contents = this.label.contents().not(this.element[0]);
      if (this.icon) {
        contents = contents.not(this.icon[0]);
      }
      if (this.iconSpace) {
        contents = contents.not(this.iconSpace[0]);
      }
      contents.remove();

      this.label.append(this.options.label);
    },

    refresh: function refresh() {
      var checked = this.element[0].checked,
          isDisabled = this.element[0].disabled;

      this._updateIcon(checked);
      this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
      if (this.options.label !== null) {
        this._updateLabel();
      }

      if (isDisabled !== this.options.disabled) {
        this._setOptions({ "disabled": isDisabled });
      }
    }

  }]);

  var widgetsCheckboxradio = $.ui.checkboxradio;

  /*!
   * jQuery UI Button 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Button
  //>>group: Widgets
  //>>description: Enhances a form with themeable buttons.
  //>>docs: http://api.jqueryui.com/button/
  //>>demos: http://jqueryui.com/button/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/button.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.button", {
    version: "1.12.1",
    defaultElement: "<button>",
    options: {
      classes: {
        "ui-button": "ui-corner-all"
      },
      disabled: null,
      icon: null,
      iconPosition: "beginning",
      label: null,
      showLabel: true
    },

    _getCreateOptions: function _getCreateOptions() {
      var disabled,


      // This is to support cases like in jQuery Mobile where the base widget does have
      // an implementation of _getCreateOptions
      options = this._super() || {};

      this.isInput = this.element.is("input");

      disabled = this.element[0].disabled;
      if (disabled != null) {
        options.disabled = disabled;
      }

      this.originalLabel = this.isInput ? this.element.val() : this.element.html();
      if (this.originalLabel) {
        options.label = this.originalLabel;
      }

      return options;
    },

    _create: function _create() {
      if (!this.option.showLabel & !this.options.icon) {
        this.options.showLabel = true;
      }

      // We have to check the option again here even though we did in _getCreateOptions,
      // because null may have been passed on init which would override what was set in
      // _getCreateOptions
      if (this.options.disabled == null) {
        this.options.disabled = this.element[0].disabled || false;
      }

      this.hasTitle = !!this.element.attr("title");

      // Check to see if the label needs to be set or if its already correct
      if (this.options.label && this.options.label !== this.originalLabel) {
        if (this.isInput) {
          this.element.val(this.options.label);
        } else {
          this.element.html(this.options.label);
        }
      }
      this._addClass("ui-button", "ui-widget");
      this._setOption("disabled", this.options.disabled);
      this._enhance();

      if (this.element.is("a")) {
        this._on({
          "keyup": function keyup(event) {
            if (event.keyCode === $.ui.keyCode.SPACE) {
              event.preventDefault();

              // Support: PhantomJS <= 1.9, IE 8 Only
              // If a native click is available use it so we actually cause navigation
              // otherwise just trigger a click event
              if (this.element[0].click) {
                this.element[0].click();
              } else {
                this.element.trigger("click");
              }
            }
          }
        });
      }
    },

    _enhance: function _enhance() {
      if (!this.element.is("button")) {
        this.element.attr("role", "button");
      }

      if (this.options.icon) {
        this._updateIcon("icon", this.options.icon);
        this._updateTooltip();
      }
    },

    _updateTooltip: function _updateTooltip() {
      this.title = this.element.attr("title");

      if (!this.options.showLabel && !this.title) {
        this.element.attr("title", this.options.label);
      }
    },

    _updateIcon: function _updateIcon(option, value) {
      var icon = option !== "iconPosition",
          position = icon ? this.options.iconPosition : value,
          displayBlock = position === "top" || position === "bottom";

      // Create icon
      if (!this.icon) {
        this.icon = $("<span>");

        this._addClass(this.icon, "ui-button-icon", "ui-icon");

        if (!this.options.showLabel) {
          this._addClass("ui-button-icon-only");
        }
      } else if (icon) {

        // If we are updating the icon remove the old icon class
        this._removeClass(this.icon, null, this.options.icon);
      }

      // If we are updating the icon add the new icon class
      if (icon) {
        this._addClass(this.icon, null, value);
      }

      this._attachIcon(position);

      // If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
      // the iconSpace if there is one.
      if (displayBlock) {
        this._addClass(this.icon, null, "ui-widget-icon-block");
        if (this.iconSpace) {
          this.iconSpace.remove();
        }
      } else {

        // Position is beginning or end so remove the ui-widget-icon-block class and add the
        // space if it does not exist
        if (!this.iconSpace) {
          this.iconSpace = $("<span> </span>");
          this._addClass(this.iconSpace, "ui-button-icon-space");
        }
        this._removeClass(this.icon, null, "ui-wiget-icon-block");
        this._attachIconSpace(position);
      }
    },

    _destroy: function _destroy() {
      this.element.removeAttr("role");

      if (this.icon) {
        this.icon.remove();
      }
      if (this.iconSpace) {
        this.iconSpace.remove();
      }
      if (!this.hasTitle) {
        this.element.removeAttr("title");
      }
    },

    _attachIconSpace: function _attachIconSpace(iconPosition) {
      this.icon[/^(?:end|bottom)/.test(iconPosition) ? "before" : "after"](this.iconSpace);
    },

    _attachIcon: function _attachIcon(iconPosition) {
      this.element[/^(?:end|bottom)/.test(iconPosition) ? "append" : "prepend"](this.icon);
    },

    _setOptions: function _setOptions(options) {
      var newShowLabel = options.showLabel === undefined ? this.options.showLabel : options.showLabel,
          newIcon = options.icon === undefined ? this.options.icon : options.icon;

      if (!newShowLabel && !newIcon) {
        options.showLabel = true;
      }
      this._super(options);
    },

    _setOption: function _setOption(key, value) {
      if (key === "icon") {
        if (value) {
          this._updateIcon(key, value);
        } else if (this.icon) {
          this.icon.remove();
          if (this.iconSpace) {
            this.iconSpace.remove();
          }
        }
      }

      if (key === "iconPosition") {
        this._updateIcon(key, value);
      }

      // Make sure we can't end up with a button that has neither text nor icon
      if (key === "showLabel") {
        this._toggleClass("ui-button-icon-only", null, !value);
        this._updateTooltip();
      }

      if (key === "label") {
        if (this.isInput) {
          this.element.val(value);
        } else {

          // If there is an icon, append it, else nothing then append the value
          // this avoids removal of the icon when setting label text
          this.element.html(value);
          if (this.icon) {
            this._attachIcon(this.options.iconPosition);
            this._attachIconSpace(this.options.iconPosition);
          }
        }
      }

      this._super(key, value);

      if (key === "disabled") {
        this._toggleClass(null, "ui-state-disabled", value);
        this.element[0].disabled = value;
        if (value) {
          this.element.blur();
        }
      }
    },

    refresh: function refresh() {

      // Make sure to only check disabled if its an element that supports this otherwise
      // check for the disabled class to determine state
      var isDisabled = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");

      if (isDisabled !== this.options.disabled) {
        this._setOptions({ disabled: isDisabled });
      }

      this._updateTooltip();
    }
  });

  // DEPRECATED
  if ($.uiBackCompat !== false) {

    // Text and Icons options
    $.widget("ui.button", $.ui.button, {
      options: {
        text: true,
        icons: {
          primary: null,
          secondary: null
        }
      },

      _create: function _create() {
        if (this.options.showLabel && !this.options.text) {
          this.options.showLabel = this.options.text;
        }
        if (!this.options.showLabel && this.options.text) {
          this.options.text = this.options.showLabel;
        }
        if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) {
          if (this.options.icons.primary) {
            this.options.icon = this.options.icons.primary;
          } else {
            this.options.icon = this.options.icons.secondary;
            this.options.iconPosition = "end";
          }
        } else if (this.options.icon) {
          this.options.icons.primary = this.options.icon;
        }
        this._super();
      },

      _setOption: function _setOption(key, value) {
        if (key === "text") {
          this._super("showLabel", value);
          return;
        }
        if (key === "showLabel") {
          this.options.text = value;
        }
        if (key === "icon") {
          this.options.icons.primary = value;
        }
        if (key === "icons") {
          if (value.primary) {
            this._super("icon", value.primary);
            this._super("iconPosition", "beginning");
          } else if (value.secondary) {
            this._super("icon", value.secondary);
            this._super("iconPosition", "end");
          }
        }
        this._superApply(arguments);
      }
    });

    $.fn.button = function (orig) {
      return function () {
        if (!this.length || this.length && this[0].tagName !== "INPUT" || this.length && this[0].tagName === "INPUT" && this.attr("type") !== "checkbox" && this.attr("type") !== "radio") {
          return orig.apply(this, arguments);
        }
        if (!$.ui.checkboxradio) {
          $.error("Checkboxradio widget missing");
        }
        if (arguments.length === 0) {
          return this.checkboxradio({
            "icon": false
          });
        }
        return this.checkboxradio.apply(this, arguments);
      };
    }($.fn.button);

    $.fn.buttonset = function () {
      if (!$.ui.controlgroup) {
        $.error("Controlgroup widget missing");
      }
      if (arguments[0] === "option" && arguments[1] === "items" && arguments[2]) {
        return this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]]);
      }
      if (arguments[0] === "option" && arguments[1] === "items") {
        return this.controlgroup.apply(this, [arguments[0], "items.button"]);
      }
      if (_typeof(arguments[0]) === "object" && arguments[0].items) {
        arguments[0].items = {
          button: arguments[0].items
        };
      }
      return this.controlgroup.apply(this, arguments);
    };
  }

  var widgetsButton = $.ui.button;

  // jscs:disable maximumLineLength
  /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
  /*!
   * jQuery UI Datepicker 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Datepicker
  //>>group: Widgets
  //>>description: Displays a calendar from an input or inline for selecting dates.
  //>>docs: http://api.jqueryui.com/datepicker/
  //>>demos: http://jqueryui.com/datepicker/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/datepicker.css
  //>>css.theme: ../../themes/base/theme.css


  $.extend($.ui, { datepicker: { version: "1.12.1" } });

  var datepicker_instActive;

  function datepicker_getZindex(elem) {
    var position, value;
    while (elem.length && elem[0] !== document) {

      // Ignore z-index if position is set to a value where z-index is ignored by the browser
      // This makes behavior of this function consistent across browsers
      // WebKit always returns auto if the element is positioned
      position = elem.css("position");
      if (position === "absolute" || position === "relative" || position === "fixed") {

        // IE returns 0 when zIndex is not specified
        // other browsers return a string
        // we ignore the case of nested elements with an explicit value of 0
        // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
        value = parseInt(elem.css("zIndex"), 10);
        if (!isNaN(value) && value !== 0) {
          return value;
        }
      }
      elem = elem.parent();
    }

    return 0;
  }
  /* Date picker manager.
     Use the singleton instance of this class, $.datepicker, to interact with the date picker.
     Settings for (groups of) date pickers are maintained in an instance object,
     allowing multiple different settings on the same page. */

  function Datepicker() {
    this._curInst = null; // The current instance in use
    this._keyEvent = false; // If the last event was a key event
    this._disabledInputs = []; // List of date picker inputs that have been disabled
    this._datepickerShowing = false; // True if the popup picker is showing , false if not
    this._inDialog = false; // True if showing within a "dialog", false if not
    this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
    this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
    this._appendClass = "ui-datepicker-append"; // The name of the append marker class
    this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
    this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
    this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
    this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
    this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
    this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
    this.regional = []; // Available regional settings, indexed by language code
    this.regional[""] = { // Default regional settings
      closeText: "Done", // Display text for close link
      prevText: "Prev", // Display text for previous month link
      nextText: "Next", // Display text for next month link
      currentText: "Today", // Display text for current month link
      monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], // Names of months for drop-down and formatting
      monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
      dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
      dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
      dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], // Column headings for days starting at Sunday
      weekHeader: "Wk", // Column header for week of the year
      dateFormat: "mm/dd/yy", // See format options on parseDate
      firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
      isRTL: false, // True if right-to-left language, false if left-to-right
      showMonthAfterYear: false, // True if the year select precedes month, false for month then year
      yearSuffix: "" // Additional text to append to the year in the month headers
    };
    this._defaults = { // Global defaults for all the date picker instances
      showOn: "focus", // "focus" for popup on focus,
      // "button" for trigger button, or "both" for either
      showAnim: "fadeIn", // Name of jQuery animation for popup
      showOptions: {}, // Options for enhanced animations
      defaultDate: null, // Used when field is blank: actual date,
      // +/-number for offset from today, null for today
      appendText: "", // Display text following the input box, e.g. showing the format
      buttonText: "...", // Text for trigger button
      buttonImage: "", // URL for trigger button image
      buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
      hideIfNoPrevNext: false, // True to hide next/previous month links
      // if not applicable, false to just disable them
      navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
      gotoCurrent: false, // True if today link goes back to current selection instead
      changeMonth: false, // True if month can be selected directly, false if only prev/next
      changeYear: false, // True if year can be selected directly, false if only prev/next
      yearRange: "c-10:c+10", // Range of years to display in drop-down,
      // either relative to today's year (-nn:+nn), relative to currently displayed year
      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
      showOtherMonths: false, // True to show dates in other months, false to leave blank
      selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
      showWeek: false, // True to show week of the year, false to not show it
      calculateWeek: this.iso8601Week, // How to calculate the week of the year,
      // takes a Date and returns the number of the week for it
      shortYearCutoff: "+10", // Short year values < this are in the current century,
      // > this are in the previous century,
      // string value starting with "+" for current year + value
      minDate: null, // The earliest selectable date, or null for no limit
      maxDate: null, // The latest selectable date, or null for no limit
      duration: "fast", // Duration of display/closure
      beforeShowDay: null, // Function that takes a date and returns an array with
      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
      // [2] = cell title (optional), e.g. $.datepicker.noWeekends
      beforeShow: null, // Function that takes an input field and
      // returns a set of custom settings for the date picker
      onSelect: null, // Define a callback function when a date is selected
      onChangeMonthYear: null, // Define a callback function when the month or year is changed
      onClose: null, // Define a callback function when the datepicker is closed
      numberOfMonths: 1, // Number of months to show at a time
      showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
      stepMonths: 1, // Number of months to step back/forward
      stepBigMonths: 12, // Number of months to step back/forward for the big links
      altField: "", // Selector for an alternate field to store selected dates into
      altFormat: "", // The date format to use for the alternate field
      constrainInput: true, // The input is constrained by the current date format
      showButtonPanel: false, // True to show button panel, false to not show it
      autoSize: false, // True to size the input for the date format, false to leave as is
      disabled: false // The initial disabled state
    };
    $.extend(this._defaults, this.regional[""]);
    this.regional.en = $.extend(true, {}, this.regional[""]);
    this.regional["en-US"] = $.extend(true, {}, this.regional.en);
    this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
  }

  $.extend(Datepicker.prototype, {
    /* Class name added to elements to indicate already configured with a date picker. */
    markerClassName: "hasDatepicker",

    //Keep track of the maximum number of rows displayed (see #7043)
    maxRows: 4,

    // TODO rename to "widget" when switching to widget factory
    _widgetDatepicker: function _widgetDatepicker() {
      return this.dpDiv;
    },

    /* Override the default settings for all instances of the date picker.
     * @param  settings  object - the new settings to use as defaults (anonymous object)
     * @return the manager object
     */
    setDefaults: function setDefaults(settings) {
      datepicker_extendRemove(this._defaults, settings || {});
      return this;
    },

    /* Attach the date picker to a jQuery selection.
     * @param  target	element - the target input field or division or span
     * @param  settings  object - the new settings to use for this date picker instance (anonymous)
     */
    _attachDatepicker: function _attachDatepicker(target, settings) {
      var nodeName, inline, inst;
      nodeName = target.nodeName.toLowerCase();
      inline = nodeName === "div" || nodeName === "span";
      if (!target.id) {
        this.uuid += 1;
        target.id = "dp" + this.uuid;
      }
      inst = this._newInst($(target), inline);
      inst.settings = $.extend({}, settings || {});
      if (nodeName === "input") {
        this._connectDatepicker(target, inst);
      } else if (inline) {
        this._inlineDatepicker(target, inst);
      }
    },

    /* Create a new instance object. */
    _newInst: function _newInst(target, inline) {
      var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
      return {
        id: id, input: target, // associated target
        selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
        drawMonth: 0, drawYear: 0, // month being drawn
        inline: inline, // is datepicker inline or not
        dpDiv: !inline ? this.dpDiv : // presentation div
        datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
      };
    },

    /* Attach the date picker to an input field. */
    _connectDatepicker: function _connectDatepicker(target, inst) {
      var input = $(target);
      inst.append = $([]);
      inst.trigger = $([]);
      if (input.hasClass(this.markerClassName)) {
        return;
      }
      this._attachments(input, inst);
      input.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp);
      this._autoSize(inst);
      $.data(target, "datepicker", inst);

      //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
      if (inst.settings.disabled) {
        this._disableDatepicker(target);
      }
    },

    /* Make attachments based on settings. */
    _attachments: function _attachments(input, inst) {
      var showOn,
          buttonText,
          buttonImage,
          appendText = this._get(inst, "appendText"),
          isRTL = this._get(inst, "isRTL");

      if (inst.append) {
        inst.append.remove();
      }
      if (appendText) {
        inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
        input[isRTL ? "before" : "after"](inst.append);
      }

      input.off("focus", this._showDatepicker);

      if (inst.trigger) {
        inst.trigger.remove();
      }

      showOn = this._get(inst, "showOn");
      if (showOn === "focus" || showOn === "both") {
        // pop-up date picker when in the marked field
        input.on("focus", this._showDatepicker);
      }
      if (showOn === "button" || showOn === "both") {
        // pop-up date picker when button clicked
        buttonText = this._get(inst, "buttonText");
        buttonImage = this._get(inst, "buttonImage");
        inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({ src: buttonImage, alt: buttonText, title: buttonText }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({ src: buttonImage, alt: buttonText, title: buttonText })));
        input[isRTL ? "before" : "after"](inst.trigger);
        inst.trigger.on("click", function () {
          if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
            $.datepicker._hideDatepicker();
          } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
            $.datepicker._hideDatepicker();
            $.datepicker._showDatepicker(input[0]);
          } else {
            $.datepicker._showDatepicker(input[0]);
          }
          return false;
        });
      }
    },

    /* Apply the maximum length for the date format. */
    _autoSize: function _autoSize(inst) {
      if (this._get(inst, "autoSize") && !inst.inline) {
        var findMax,
            max,
            maxI,
            i,
            date = new Date(2009, 12 - 1, 20),
            // Ensure double digits
        dateFormat = this._get(inst, "dateFormat");

        if (dateFormat.match(/[DM]/)) {
          findMax = function findMax(names) {
            max = 0;
            maxI = 0;
            for (i = 0; i < names.length; i++) {
              if (names[i].length > max) {
                max = names[i].length;
                maxI = i;
              }
            }
            return maxI;
          };
          date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
          date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
        }
        inst.input.attr("size", this._formatDate(inst, date).length);
      }
    },

    /* Attach an inline date picker to a div. */
    _inlineDatepicker: function _inlineDatepicker(target, inst) {
      var divSpan = $(target);
      if (divSpan.hasClass(this.markerClassName)) {
        return;
      }
      divSpan.addClass(this.markerClassName).append(inst.dpDiv);
      $.data(target, "datepicker", inst);
      this._setDate(inst, this._getDefaultDate(inst), true);
      this._updateDatepicker(inst);
      this._updateAlternate(inst);

      //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
      if (inst.settings.disabled) {
        this._disableDatepicker(target);
      }

      // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
      // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
      inst.dpDiv.css("display", "block");
    },

    /* Pop-up the date picker in a "dialog" box.
     * @param  input element - ignored
     * @param  date	string or Date - the initial date to display
     * @param  onSelect  function - the function to call when a date is selected
     * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
     * @param  pos int[2] - coordinates for the dialog's position within the screen or
     *					event - with x/y coordinates or
     *					leave empty for default (screen centre)
     * @return the manager object
     */
    _dialogDatepicker: function _dialogDatepicker(input, date, onSelect, settings, pos) {
      var id,
          browserWidth,
          browserHeight,
          scrollX,
          scrollY,
          inst = this._dialogInst; // internal instance

      if (!inst) {
        this.uuid += 1;
        id = "dp" + this.uuid;
        this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
        this._dialogInput.on("keydown", this._doKeyDown);
        $("body").append(this._dialogInput);
        inst = this._dialogInst = this._newInst(this._dialogInput, false);
        inst.settings = {};
        $.data(this._dialogInput[0], "datepicker", inst);
      }
      datepicker_extendRemove(inst.settings, settings || {});
      date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
      this._dialogInput.val(date);

      this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;
      if (!this._pos) {
        browserWidth = document.documentElement.clientWidth;
        browserHeight = document.documentElement.clientHeight;
        scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
        scrollY = document.documentElement.scrollTop || document.body.scrollTop;
        this._pos = // should use actual width/height below
        [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];
      }

      // Move input on screen for focus, but hidden behind dialog
      this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
      inst.settings.onSelect = onSelect;
      this._inDialog = true;
      this.dpDiv.addClass(this._dialogClass);
      this._showDatepicker(this._dialogInput[0]);
      if ($.blockUI) {
        $.blockUI(this.dpDiv);
      }
      $.data(this._dialogInput[0], "datepicker", inst);
      return this;
    },

    /* Detach a datepicker from its control.
     * @param  target	element - the target input field or division or span
     */
    _destroyDatepicker: function _destroyDatepicker(target) {
      var nodeName,
          $target = $(target),
          inst = $.data(target, "datepicker");

      if (!$target.hasClass(this.markerClassName)) {
        return;
      }

      nodeName = target.nodeName.toLowerCase();
      $.removeData(target, "datepicker");
      if (nodeName === "input") {
        inst.append.remove();
        inst.trigger.remove();
        $target.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp);
      } else if (nodeName === "div" || nodeName === "span") {
        $target.removeClass(this.markerClassName).empty();
      }

      if (datepicker_instActive === inst) {
        datepicker_instActive = null;
      }
    },

    /* Enable the date picker to a jQuery selection.
     * @param  target	element - the target input field or division or span
     */
    _enableDatepicker: function _enableDatepicker(target) {
      var nodeName,
          inline,
          $target = $(target),
          inst = $.data(target, "datepicker");

      if (!$target.hasClass(this.markerClassName)) {
        return;
      }

      nodeName = target.nodeName.toLowerCase();
      if (nodeName === "input") {
        target.disabled = false;
        inst.trigger.filter("button").each(function () {
          this.disabled = false;
        }).end().filter("img").css({ opacity: "1.0", cursor: "" });
      } else if (nodeName === "div" || nodeName === "span") {
        inline = $target.children("." + this._inlineClass);
        inline.children().removeClass("ui-state-disabled");
        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
      }
      this._disabledInputs = $.map(this._disabledInputs, function (value) {
        return value === target ? null : value;
      }); // delete entry
    },

    /* Disable the date picker to a jQuery selection.
     * @param  target	element - the target input field or division or span
     */
    _disableDatepicker: function _disableDatepicker(target) {
      var nodeName,
          inline,
          $target = $(target),
          inst = $.data(target, "datepicker");

      if (!$target.hasClass(this.markerClassName)) {
        return;
      }

      nodeName = target.nodeName.toLowerCase();
      if (nodeName === "input") {
        target.disabled = true;
        inst.trigger.filter("button").each(function () {
          this.disabled = true;
        }).end().filter("img").css({ opacity: "0.5", cursor: "default" });
      } else if (nodeName === "div" || nodeName === "span") {
        inline = $target.children("." + this._inlineClass);
        inline.children().addClass("ui-state-disabled");
        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
      }
      this._disabledInputs = $.map(this._disabledInputs, function (value) {
        return value === target ? null : value;
      }); // delete entry
      this._disabledInputs[this._disabledInputs.length] = target;
    },

    /* Is the first field in a jQuery collection disabled as a datepicker?
     * @param  target	element - the target input field or division or span
     * @return boolean - true if disabled, false if enabled
     */
    _isDisabledDatepicker: function _isDisabledDatepicker(target) {
      if (!target) {
        return false;
      }
      for (var i = 0; i < this._disabledInputs.length; i++) {
        if (this._disabledInputs[i] === target) {
          return true;
        }
      }
      return false;
    },

    /* Retrieve the instance data for the target control.
     * @param  target  element - the target input field or division or span
     * @return  object - the associated instance data
     * @throws  error if a jQuery problem getting data
     */
    _getInst: function _getInst(target) {
      try {
        return $.data(target, "datepicker");
      } catch (err) {
        throw "Missing instance data for this datepicker";
      }
    },

    /* Update or retrieve the settings for a date picker attached to an input field or division.
     * @param  target  element - the target input field or division or span
     * @param  name	object - the new settings to update or
     *				string - the name of the setting to change or retrieve,
     *				when retrieving also "all" for all instance settings or
     *				"defaults" for all global defaults
     * @param  value   any - the new value for the setting
     *				(omit if above is an object or to retrieve a value)
     */
    _optionDatepicker: function _optionDatepicker(target, name, value) {
      var settings,
          date,
          minDate,
          maxDate,
          inst = this._getInst(target);

      if (arguments.length === 2 && typeof name === "string") {
        return name === "defaults" ? $.extend({}, $.datepicker._defaults) : inst ? name === "all" ? $.extend({}, inst.settings) : this._get(inst, name) : null;
      }

      settings = name || {};
      if (typeof name === "string") {
        settings = {};
        settings[name] = value;
      }

      if (inst) {
        if (this._curInst === inst) {
          this._hideDatepicker();
        }

        date = this._getDateDatepicker(target, true);
        minDate = this._getMinMaxDate(inst, "min");
        maxDate = this._getMinMaxDate(inst, "max");
        datepicker_extendRemove(inst.settings, settings);

        // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
        if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
          inst.settings.minDate = this._formatDate(inst, minDate);
        }
        if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
          inst.settings.maxDate = this._formatDate(inst, maxDate);
        }
        if ("disabled" in settings) {
          if (settings.disabled) {
            this._disableDatepicker(target);
          } else {
            this._enableDatepicker(target);
          }
        }
        this._attachments($(target), inst);
        this._autoSize(inst);
        this._setDate(inst, date);
        this._updateAlternate(inst);
        this._updateDatepicker(inst);
      }
    },

    // Change method deprecated
    _changeDatepicker: function _changeDatepicker(target, name, value) {
      this._optionDatepicker(target, name, value);
    },

    /* Redraw the date picker attached to an input field or division.
     * @param  target  element - the target input field or division or span
     */
    _refreshDatepicker: function _refreshDatepicker(target) {
      var inst = this._getInst(target);
      if (inst) {
        this._updateDatepicker(inst);
      }
    },

    /* Set the dates for a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  date	Date - the new date
     */
    _setDateDatepicker: function _setDateDatepicker(target, date) {
      var inst = this._getInst(target);
      if (inst) {
        this._setDate(inst, date);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
      }
    },

    /* Get the date(s) for the first entry in a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  noDefault boolean - true if no default date is to be used
     * @return Date - the current date
     */
    _getDateDatepicker: function _getDateDatepicker(target, noDefault) {
      var inst = this._getInst(target);
      if (inst && !inst.inline) {
        this._setDateFromField(inst, noDefault);
      }
      return inst ? this._getDate(inst) : null;
    },

    /* Handle keystrokes. */
    _doKeyDown: function _doKeyDown(event) {
      var onSelect,
          dateStr,
          sel,
          inst = $.datepicker._getInst(event.target),
          handled = true,
          isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

      inst._keyEvent = true;
      if ($.datepicker._datepickerShowing) {
        switch (event.keyCode) {
          case 9:
            $.datepicker._hideDatepicker();
            handled = false;
            break; // hide on tab out
          case 13:
            sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
            if (sel[0]) {
              $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
            }

            onSelect = $.datepicker._get(inst, "onSelect");
            if (onSelect) {
              dateStr = $.datepicker._formatDate(inst);

              // Trigger custom callback
              onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);
            } else {
              $.datepicker._hideDatepicker();
            }

            return false; // don't submit the form
          case 27:
            $.datepicker._hideDatepicker();
            break; // hide on escape
          case 33:
            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
            break; // previous month/year on page up/+ ctrl
          case 34:
            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
            break; // next month/year on page down/+ ctrl
          case 35:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._clearDate(event.target);
            }
            handled = event.ctrlKey || event.metaKey;
            break; // clear on ctrl or command +end
          case 36:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._gotoToday(event.target);
            }
            handled = event.ctrlKey || event.metaKey;
            break; // current on ctrl or command +home
          case 37:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, "D");
            }
            handled = event.ctrlKey || event.metaKey;

            // -1 day on ctrl or command +left
            if (event.originalEvent.altKey) {
              $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
            }

            // next month/year on alt +left on Mac
            break;
          case 38:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, -7, "D");
            }
            handled = event.ctrlKey || event.metaKey;
            break; // -1 week on ctrl or command +up
          case 39:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, "D");
            }
            handled = event.ctrlKey || event.metaKey;

            // +1 day on ctrl or command +right
            if (event.originalEvent.altKey) {
              $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
            }

            // next month/year on alt +right
            break;
          case 40:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, +7, "D");
            }
            handled = event.ctrlKey || event.metaKey;
            break; // +1 week on ctrl or command +down
          default:
            handled = false;
        }
      } else if (event.keyCode === 36 && event.ctrlKey) {
        // display the date picker on ctrl+home
        $.datepicker._showDatepicker(this);
      } else {
        handled = false;
      }

      if (handled) {
        event.preventDefault();
        event.stopPropagation();
      }
    },

    /* Filter entered characters - based on date format. */
    _doKeyPress: function _doKeyPress(event) {
      var chars,
          chr,
          inst = $.datepicker._getInst(event.target);

      if ($.datepicker._get(inst, "constrainInput")) {
        chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
        chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
        return event.ctrlKey || event.metaKey || chr < " " || !chars || chars.indexOf(chr) > -1;
      }
    },

    /* Synchronise manual entry and field/alternate field. */
    _doKeyUp: function _doKeyUp(event) {
      var date,
          inst = $.datepicker._getInst(event.target);

      if (inst.input.val() !== inst.lastVal) {
        try {
          date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));

          if (date) {
            // only if valid
            $.datepicker._setDateFromField(inst);
            $.datepicker._updateAlternate(inst);
            $.datepicker._updateDatepicker(inst);
          }
        } catch (err) {}
      }
      return true;
    },

    /* Pop-up the date picker for a given input field.
     * If false returned from beforeShow event handler do not show.
     * @param  input  element - the input field attached to the date picker or
     *					event - if triggered by focus
     */
    _showDatepicker: function _showDatepicker(input) {
      input = input.target || input;
      if (input.nodeName.toLowerCase() !== "input") {
        // find from button/image trigger
        input = $("input", input.parentNode)[0];
      }

      if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
        // already here
        return;
      }

      var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;

      inst = $.datepicker._getInst(input);
      if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
        $.datepicker._curInst.dpDiv.stop(true, true);
        if (inst && $.datepicker._datepickerShowing) {
          $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
        }
      }

      beforeShow = $.datepicker._get(inst, "beforeShow");
      beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
      if (beforeShowSettings === false) {
        return;
      }
      datepicker_extendRemove(inst.settings, beforeShowSettings);

      inst.lastVal = null;
      $.datepicker._lastInput = input;
      $.datepicker._setDateFromField(inst);

      if ($.datepicker._inDialog) {
        // hide cursor
        input.value = "";
      }
      if (!$.datepicker._pos) {
        // position below input
        $.datepicker._pos = $.datepicker._findPos(input);
        $.datepicker._pos[1] += input.offsetHeight; // add the height
      }

      isFixed = false;
      $(input).parents().each(function () {
        isFixed |= $(this).css("position") === "fixed";
        return !isFixed;
      });

      offset = { left: $.datepicker._pos[0], top: $.datepicker._pos[1] };
      $.datepicker._pos = null;

      //to avoid flashes on Firefox
      inst.dpDiv.empty();

      // determine sizing offscreen
      inst.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" });
      $.datepicker._updateDatepicker(inst);

      // fix width for dynamic number of date pickers
      // and adjust position before showing
      offset = $.datepicker._checkOffset(inst, offset, isFixed);
      inst.dpDiv.css({
        position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute", display: "none",
        left: offset.left + "px", top: offset.top + "px"
      });

      if (!inst.inline) {
        showAnim = $.datepicker._get(inst, "showAnim");
        duration = $.datepicker._get(inst, "duration");
        inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
        $.datepicker._datepickerShowing = true;

        if ($.effects && $.effects.effect[showAnim]) {
          inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
        } else {
          inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
        }

        if ($.datepicker._shouldFocusInput(inst)) {
          inst.input.trigger("focus");
        }

        $.datepicker._curInst = inst;
      }
    },

    /* Generate the date picker content. */
    _updateDatepicker: function _updateDatepicker(inst) {
      this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
      datepicker_instActive = inst; // for delegate hover events
      inst.dpDiv.empty().append(this._generateHTML(inst));
      this._attachHandlers(inst);

      var origyearshtml,
          numMonths = this._getNumberOfMonths(inst),
          cols = numMonths[1],
          width = 17,
          activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");

      if (activeCell.length > 0) {
        datepicker_handleMouseover.apply(activeCell.get(0));
      }

      inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
      if (cols > 1) {
        inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
      }
      inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
      inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");

      if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
        inst.input.trigger("focus");
      }

      // Deffered render of the years select (to avoid flashes on Firefox)
      if (inst.yearshtml) {
        origyearshtml = inst.yearshtml;
        setTimeout(function () {

          //assure that inst.yearshtml didn't change.
          if (origyearshtml === inst.yearshtml && inst.yearshtml) {
            inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
          }
          origyearshtml = inst.yearshtml = null;
        }, 0);
      }
    },

    // #6694 - don't focus the input if it's already focused
    // this breaks the change event in IE
    // Support: IE and jQuery <1.9
    _shouldFocusInput: function _shouldFocusInput(inst) {
      return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
    },

    /* Check positioning to remain on screen. */
    _checkOffset: function _checkOffset(inst, offset, isFixed) {
      var dpWidth = inst.dpDiv.outerWidth(),
          dpHeight = inst.dpDiv.outerHeight(),
          inputWidth = inst.input ? inst.input.outerWidth() : 0,
          inputHeight = inst.input ? inst.input.outerHeight() : 0,
          viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
          viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

      offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
      offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
      offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;

      // Now check if datepicker is showing outside window viewport - move to a better place if so.
      offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
      offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);

      return offset;
    },

    /* Find an object's position on the screen. */
    _findPos: function _findPos(obj) {
      var position,
          inst = this._getInst(obj),
          isRTL = this._get(inst, "isRTL");

      while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
        obj = obj[isRTL ? "previousSibling" : "nextSibling"];
      }

      position = $(obj).offset();
      return [position.left, position.top];
    },

    /* Hide the date picker from view.
     * @param  input  element - the input field attached to the date picker
     */
    _hideDatepicker: function _hideDatepicker(input) {
      var showAnim,
          duration,
          postProcess,
          onClose,
          inst = this._curInst;

      if (!inst || input && inst !== $.data(input, "datepicker")) {
        return;
      }

      if (this._datepickerShowing) {
        showAnim = this._get(inst, "showAnim");
        duration = this._get(inst, "duration");
        postProcess = function postProcess() {
          $.datepicker._tidyDialog(inst);
        };

        // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
        if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
          inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
        } else {
          inst.dpDiv[showAnim === "slideDown" ? "slideUp" : showAnim === "fadeIn" ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
        }

        if (!showAnim) {
          postProcess();
        }
        this._datepickerShowing = false;

        onClose = this._get(inst, "onClose");
        if (onClose) {
          onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : "", inst]);
        }

        this._lastInput = null;
        if (this._inDialog) {
          this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
          if ($.blockUI) {
            $.unblockUI();
            $("body").append(this.dpDiv);
          }
        }
        this._inDialog = false;
      }
    },

    /* Tidy up after a dialog display. */
    _tidyDialog: function _tidyDialog(inst) {
      inst.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
    },

    /* Close date picker if clicked elsewhere. */
    _checkExternalClick: function _checkExternalClick(event) {
      if (!$.datepicker._curInst) {
        return;
      }

      var $target = $(event.target),
          inst = $.datepicker._getInst($target[0]);

      if ($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {
        $.datepicker._hideDatepicker();
      }
    },

    /* Adjust one of the date sub-fields. */
    _adjustDate: function _adjustDate(id, offset, period) {
      var target = $(id),
          inst = this._getInst(target[0]);

      if (this._isDisabledDatepicker(target[0])) {
        return;
      }
      this._adjustInstDate(inst, offset + (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
      period);
      this._updateDatepicker(inst);
    },

    /* Action for current link. */
    _gotoToday: function _gotoToday(id) {
      var date,
          target = $(id),
          inst = this._getInst(target[0]);

      if (this._get(inst, "gotoCurrent") && inst.currentDay) {
        inst.selectedDay = inst.currentDay;
        inst.drawMonth = inst.selectedMonth = inst.currentMonth;
        inst.drawYear = inst.selectedYear = inst.currentYear;
      } else {
        date = new Date();
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
      }
      this._notifyChange(inst);
      this._adjustDate(target);
    },

    /* Action for selecting a new month/year. */
    _selectMonthYear: function _selectMonthYear(id, select, period) {
      var target = $(id),
          inst = this._getInst(target[0]);

      inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);

      this._notifyChange(inst);
      this._adjustDate(target);
    },

    /* Action for selecting a day. */
    _selectDay: function _selectDay(id, month, year, td) {
      var inst,
          target = $(id);

      if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
        return;
      }

      inst = this._getInst(target[0]);
      inst.selectedDay = inst.currentDay = $("a", td).html();
      inst.selectedMonth = inst.currentMonth = month;
      inst.selectedYear = inst.currentYear = year;
      this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
    },

    /* Erase the input field and hide the date picker. */
    _clearDate: function _clearDate(id) {
      var target = $(id);
      this._selectDate(target, "");
    },

    /* Update the input field with the selected date. */
    _selectDate: function _selectDate(id, dateStr) {
      var onSelect,
          target = $(id),
          inst = this._getInst(target[0]);

      dateStr = dateStr != null ? dateStr : this._formatDate(inst);
      if (inst.input) {
        inst.input.val(dateStr);
      }
      this._updateAlternate(inst);

      onSelect = this._get(inst, "onSelect");
      if (onSelect) {
        onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]); // trigger custom callback
      } else if (inst.input) {
        inst.input.trigger("change"); // fire the change event
      }

      if (inst.inline) {
        this._updateDatepicker(inst);
      } else {
        this._hideDatepicker();
        this._lastInput = inst.input[0];
        if (_typeof(inst.input[0]) !== "object") {
          inst.input.trigger("focus"); // restore focus
        }
        this._lastInput = null;
      }
    },

    /* Update any alternate field to synchronise with the main field. */
    _updateAlternate: function _updateAlternate(inst) {
      var altFormat,
          date,
          dateStr,
          altField = this._get(inst, "altField");

      if (altField) {
        // update alternate field too
        altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
        date = this._getDate(inst);
        dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
        $(altField).val(dateStr);
      }
    },

    /* Set as beforeShowDay function to prevent selection of weekends.
     * @param  date  Date - the date to customise
     * @return [boolean, string] - is this date selectable?, what is its CSS class?
     */
    noWeekends: function noWeekends(date) {
      var day = date.getDay();
      return [day > 0 && day < 6, ""];
    },

    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
     * @param  date  Date - the date to get the week for
     * @return  number - the number of the week within the year that contains this date
     */
    iso8601Week: function iso8601Week(date) {
      var time,
          checkDate = new Date(date.getTime());

      // Find Thursday of this week starting on Monday
      checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

      time = checkDate.getTime();
      checkDate.setMonth(0); // Compare with Jan 1
      checkDate.setDate(1);
      return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
    },

    /* Parse a string value into a date object.
     * See formatDate below for the possible formats.
     *
     * @param  format string - the expected format of the date
     * @param  value string - the date in the above format
     * @param  settings Object - attributes include:
     *					shortYearCutoff  number - the cutoff year for determining the century (optional)
     *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
     *					dayNames		string[7] - names of the days from Sunday (optional)
     *					monthNamesShort string[12] - abbreviated names of the months (optional)
     *					monthNames		string[12] - names of the months (optional)
     * @return  Date - the extracted date value or null if value is blank
     */
    parseDate: function parseDate(format, value, settings) {
      if (format == null || value == null) {
        throw "Invalid arguments";
      }

      value = (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" ? value.toString() : value + "";
      if (value === "") {
        return null;
      }

      var iFormat,
          dim,
          extra,
          iValue = 0,
          shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
          shortYearCutoff = typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10),
          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
          year = -1,
          month = -1,
          day = -1,
          doy = -1,
          literal = false,
          date,


      // Check whether a format character is doubled
      lookAhead = function lookAhead(match) {
        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
        if (matches) {
          iFormat++;
        }
        return matches;
      },


      // Extract a number from the string value
      getNumber = function getNumber(match) {
        var isDoubled = lookAhead(match),
            size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2,
            minSize = match === "y" ? size : 1,
            digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
            num = value.substring(iValue).match(digits);
        if (!num) {
          throw "Missing number at position " + iValue;
        }
        iValue += num[0].length;
        return parseInt(num[0], 10);
      },


      // Extract a name from the string value and convert to an index
      getName = function getName(match, shortNames, longNames) {
        var index = -1,
            names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
          return [[k, v]];
        }).sort(function (a, b) {
          return -(a[1].length - b[1].length);
        });

        $.each(names, function (i, pair) {
          var name = pair[1];
          if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
            index = pair[0];
            iValue += name.length;
            return false;
          }
        });
        if (index !== -1) {
          return index + 1;
        } else {
          throw "Unknown name at position " + iValue;
        }
      },


      // Confirm that a literal character matches the string value
      checkLiteral = function checkLiteral() {
        if (value.charAt(iValue) !== format.charAt(iFormat)) {
          throw "Unexpected literal at position " + iValue;
        }
        iValue++;
      };

      for (iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal) {
          if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
            literal = false;
          } else {
            checkLiteral();
          }
        } else {
          switch (format.charAt(iFormat)) {
            case "d":
              day = getNumber("d");
              break;
            case "D":
              getName("D", dayNamesShort, dayNames);
              break;
            case "o":
              doy = getNumber("o");
              break;
            case "m":
              month = getNumber("m");
              break;
            case "M":
              month = getName("M", monthNamesShort, monthNames);
              break;
            case "y":
              year = getNumber("y");
              break;
            case "@":
              date = new Date(getNumber("@"));
              year = date.getFullYear();
              month = date.getMonth() + 1;
              day = date.getDate();
              break;
            case "!":
              date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
              year = date.getFullYear();
              month = date.getMonth() + 1;
              day = date.getDate();
              break;
            case "'":
              if (lookAhead("'")) {
                checkLiteral();
              } else {
                literal = true;
              }
              break;
            default:
              checkLiteral();
          }
        }
      }

      if (iValue < value.length) {
        extra = value.substr(iValue);
        if (!/^\s+/.test(extra)) {
          throw "Extra/unparsed characters found in date: " + extra;
        }
      }

      if (year === -1) {
        year = new Date().getFullYear();
      } else if (year < 100) {
        year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
      }

      if (doy > -1) {
        month = 1;
        day = doy;
        do {
          dim = this._getDaysInMonth(year, month - 1);
          if (day <= dim) {
            break;
          }
          month++;
          day -= dim;
        } while (true);
      }

      date = this._daylightSavingAdjust(new Date(year, month - 1, day));
      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
        throw "Invalid date"; // E.g. 31/02/00
      }
      return date;
    },

    /* Standard date formats. */
    ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
    COOKIE: "D, dd M yy",
    ISO_8601: "yy-mm-dd",
    RFC_822: "D, d M y",
    RFC_850: "DD, dd-M-y",
    RFC_1036: "D, d M y",
    RFC_1123: "D, d M yy",
    RFC_2822: "D, d M yy",
    RSS: "D, d M y", // RFC 822
    TICKS: "!",
    TIMESTAMP: "@",
    W3C: "yy-mm-dd", // ISO 8601

    _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,

    /* Format a date object into a string value.
     * The format can be combinations of the following:
     * d  - day of month (no leading zero)
     * dd - day of month (two digit)
     * o  - day of year (no leading zeros)
     * oo - day of year (three digit)
     * D  - day name short
     * DD - day name long
     * m  - month of year (no leading zero)
     * mm - month of year (two digit)
     * M  - month name short
     * MM - month name long
     * y  - year (two digit)
     * yy - year (four digit)
     * @ - Unix timestamp (ms since 01/01/1970)
     * ! - Windows ticks (100ns since 01/01/0001)
     * "..." - literal text
     * '' - single quote
     *
     * @param  format string - the desired format of the date
     * @param  date Date - the date value to format
     * @param  settings Object - attributes include:
     *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
     *					dayNames		string[7] - names of the days from Sunday (optional)
     *					monthNamesShort string[12] - abbreviated names of the months (optional)
     *					monthNames		string[12] - names of the months (optional)
     * @return  string - the date in the above format
     */
    formatDate: function formatDate(format, date, settings) {
      if (!date) {
        return "";
      }

      var iFormat,
          dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
          dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
          monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
          monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,


      // Check whether a format character is doubled
      lookAhead = function lookAhead(match) {
        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
        if (matches) {
          iFormat++;
        }
        return matches;
      },


      // Format a number, with leading zero if necessary
      formatNumber = function formatNumber(match, value, len) {
        var num = "" + value;
        if (lookAhead(match)) {
          while (num.length < len) {
            num = "0" + num;
          }
        }
        return num;
      },


      // Format a name, short or long as requested
      formatName = function formatName(match, value, shortNames, longNames) {
        return lookAhead(match) ? longNames[value] : shortNames[value];
      },
          output = "",
          literal = false;

      if (date) {
        for (iFormat = 0; iFormat < format.length; iFormat++) {
          if (literal) {
            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
              literal = false;
            } else {
              output += format.charAt(iFormat);
            }
          } else {
            switch (format.charAt(iFormat)) {
              case "d":
                output += formatNumber("d", date.getDate(), 2);
                break;
              case "D":
                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                break;
              case "o":
                output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                break;
              case "m":
                output += formatNumber("m", date.getMonth() + 1, 2);
                break;
              case "M":
                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                break;
              case "y":
                output += lookAhead("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100;
                break;
              case "@":
                output += date.getTime();
                break;
              case "!":
                output += date.getTime() * 10000 + this._ticksTo1970;
                break;
              case "'":
                if (lookAhead("'")) {
                  output += "'";
                } else {
                  literal = true;
                }
                break;
              default:
                output += format.charAt(iFormat);
            }
          }
        }
      }
      return output;
    },

    /* Extract all possible characters from the date format. */
    _possibleChars: function _possibleChars(format) {
      var iFormat,
          chars = "",
          literal = false,


      // Check whether a format character is doubled
      lookAhead = function lookAhead(match) {
        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
        if (matches) {
          iFormat++;
        }
        return matches;
      };

      for (iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal) {
          if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
            literal = false;
          } else {
            chars += format.charAt(iFormat);
          }
        } else {
          switch (format.charAt(iFormat)) {
            case "d":case "m":case "y":case "@":
              chars += "0123456789";
              break;
            case "D":case "M":
              return null; // Accept anything
            case "'":
              if (lookAhead("'")) {
                chars += "'";
              } else {
                literal = true;
              }
              break;
            default:
              chars += format.charAt(iFormat);
          }
        }
      }
      return chars;
    },

    /* Get a setting value, defaulting if necessary. */
    _get: function _get(inst, name) {
      return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
    },

    /* Parse existing date and initialise date picker. */
    _setDateFromField: function _setDateFromField(inst, noDefault) {
      if (inst.input.val() === inst.lastVal) {
        return;
      }

      var dateFormat = this._get(inst, "dateFormat"),
          dates = inst.lastVal = inst.input ? inst.input.val() : null,
          defaultDate = this._getDefaultDate(inst),
          date = defaultDate,
          settings = this._getFormatConfig(inst);

      try {
        date = this.parseDate(dateFormat, dates, settings) || defaultDate;
      } catch (event) {
        dates = noDefault ? "" : dates;
      }
      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
      inst.currentDay = dates ? date.getDate() : 0;
      inst.currentMonth = dates ? date.getMonth() : 0;
      inst.currentYear = dates ? date.getFullYear() : 0;
      this._adjustInstDate(inst);
    },

    /* Retrieve the default date shown on opening. */
    _getDefaultDate: function _getDefaultDate(inst) {
      return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
    },

    /* A date may be specified as an exact value or a relative one. */
    _determineDate: function _determineDate(inst, date, defaultDate) {
      var offsetNumeric = function offsetNumeric(offset) {
        var date = new Date();
        date.setDate(date.getDate() + offset);
        return date;
      },
          offsetString = function offsetString(offset) {
        try {
          return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
        } catch (e) {

          // Ignore
        }

        var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),
            year = date.getFullYear(),
            month = date.getMonth(),
            day = date.getDate(),
            pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
            matches = pattern.exec(offset);

        while (matches) {
          switch (matches[2] || "d") {
            case "d":case "D":
              day += parseInt(matches[1], 10);break;
            case "w":case "W":
              day += parseInt(matches[1], 10) * 7;break;
            case "m":case "M":
              month += parseInt(matches[1], 10);
              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
              break;
            case "y":case "Y":
              year += parseInt(matches[1], 10);
              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
              break;
          }
          matches = pattern.exec(offset);
        }
        return new Date(year, month, day);
      },
          newDate = date == null || date === "" ? defaultDate : typeof date === "string" ? offsetString(date) : typeof date === "number" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());

      newDate = newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate;
      if (newDate) {
        newDate.setHours(0);
        newDate.setMinutes(0);
        newDate.setSeconds(0);
        newDate.setMilliseconds(0);
      }
      return this._daylightSavingAdjust(newDate);
    },

    /* Handle switch to/from daylight saving.
     * Hours may be non-zero on daylight saving cut-over:
     * > 12 when midnight changeover, but then cannot generate
     * midnight datetime, so jump to 1AM, otherwise reset.
     * @param  date  (Date) the date to check
     * @return  (Date) the corrected date
     */
    _daylightSavingAdjust: function _daylightSavingAdjust(date) {
      if (!date) {
        return null;
      }
      date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
      return date;
    },

    /* Set the date(s) directly. */
    _setDate: function _setDate(inst, date, noChange) {
      var clear = !date,
          origMonth = inst.selectedMonth,
          origYear = inst.selectedYear,
          newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

      inst.selectedDay = inst.currentDay = newDate.getDate();
      inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
      inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
      if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
        this._notifyChange(inst);
      }
      this._adjustInstDate(inst);
      if (inst.input) {
        inst.input.val(clear ? "" : this._formatDate(inst));
      }
    },

    /* Retrieve the date(s) directly. */
    _getDate: function _getDate(inst) {
      var startDate = !inst.currentYear || inst.input && inst.input.val() === "" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
      return startDate;
    },

    /* Attach the onxxx handlers.  These are declared statically so
     * they work with static code transformers like Caja.
     */
    _attachHandlers: function _attachHandlers(inst) {
      var stepMonths = this._get(inst, "stepMonths"),
          id = "#" + inst.id.replace(/\\\\/g, "\\");
      inst.dpDiv.find("[data-handler]").map(function () {
        var handler = {
          prev: function prev() {
            $.datepicker._adjustDate(id, -stepMonths, "M");
          },
          next: function next() {
            $.datepicker._adjustDate(id, +stepMonths, "M");
          },
          hide: function hide() {
            $.datepicker._hideDatepicker();
          },
          today: function today() {
            $.datepicker._gotoToday(id);
          },
          selectDay: function selectDay() {
            $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
            return false;
          },
          selectMonth: function selectMonth() {
            $.datepicker._selectMonthYear(id, this, "M");
            return false;
          },
          selectYear: function selectYear() {
            $.datepicker._selectMonthYear(id, this, "Y");
            return false;
          }
        };
        $(this).on(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
      });
    },

    /* Generate the HTML for the current state of the date picker. */
    _generateHTML: function _generateHTML(inst) {
      var maxDraw,
          prevText,
          prev,
          nextText,
          next,
          currentText,
          gotoDate,
          controls,
          buttonPanel,
          firstDay,
          showWeek,
          dayNames,
          dayNamesMin,
          monthNames,
          monthNamesShort,
          beforeShowDay,
          showOtherMonths,
          selectOtherMonths,
          defaultDate,
          html,
          dow,
          row,
          group,
          col,
          selectedDate,
          cornerClass,
          calender,
          thead,
          day,
          daysInMonth,
          leadDays,
          curRows,
          numRows,
          printDate,
          dRow,
          tbody,
          daySettings,
          otherMonth,
          unselectable,
          tempDate = new Date(),
          today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),
          // clear time
      isRTL = this._get(inst, "isRTL"),
          showButtonPanel = this._get(inst, "showButtonPanel"),
          hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
          navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
          numMonths = this._getNumberOfMonths(inst),
          showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
          stepMonths = this._get(inst, "stepMonths"),
          isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1,
          currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),
          minDate = this._getMinMaxDate(inst, "min"),
          maxDate = this._getMinMaxDate(inst, "max"),
          drawMonth = inst.drawMonth - showCurrentAtPos,
          drawYear = inst.drawYear;

      if (drawMonth < 0) {
        drawMonth += 12;
        drawYear--;
      }
      if (maxDate) {
        maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
        maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
        while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
          drawMonth--;
          if (drawMonth < 0) {
            drawMonth = 11;
            drawYear--;
          }
        }
      }
      inst.drawMonth = drawMonth;
      inst.drawYear = drawYear;

      prevText = this._get(inst, "prevText");
      prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));

      prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" + " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";

      nextText = this._get(inst, "nextText");
      nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));

      next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" + " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";

      currentText = this._get(inst, "currentText");
      gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
      currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));

      controls = !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>" : "";

      buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" + ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

      firstDay = parseInt(this._get(inst, "firstDay"), 10);
      firstDay = isNaN(firstDay) ? 0 : firstDay;

      showWeek = this._get(inst, "showWeek");
      dayNames = this._get(inst, "dayNames");
      dayNamesMin = this._get(inst, "dayNamesMin");
      monthNames = this._get(inst, "monthNames");
      monthNamesShort = this._get(inst, "monthNamesShort");
      beforeShowDay = this._get(inst, "beforeShowDay");
      showOtherMonths = this._get(inst, "showOtherMonths");
      selectOtherMonths = this._get(inst, "selectOtherMonths");
      defaultDate = this._getDefaultDate(inst);
      html = "";

      for (row = 0; row < numMonths[0]; row++) {
        group = "";
        this.maxRows = 4;
        for (col = 0; col < numMonths[1]; col++) {
          selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
          cornerClass = " ui-corner-all";
          calender = "";
          if (isMultiMonth) {
            calender += "<div class='ui-datepicker-group";
            if (numMonths[1] > 1) {
              switch (col) {
                case 0:
                  calender += " ui-datepicker-group-first";
                  cornerClass = " ui-corner-" + (isRTL ? "right" : "left");break;
                case numMonths[1] - 1:
                  calender += " ui-datepicker-group-last";
                  cornerClass = " ui-corner-" + (isRTL ? "left" : "right");break;
                default:
                  calender += " ui-datepicker-group-middle";cornerClass = "";break;
              }
            }
            calender += "'>";
          }
          calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
          "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>";
          thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
          for (dow = 0; dow < 7; dow++) {
            // days of the week
            day = (dow + firstDay) % 7;
            thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
          }
          calender += thead + "</tr></thead><tbody>";
          daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
          if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
          }
          leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
          curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
          numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows; //If multiple months, use the higher number of rows (see #7043)
          this.maxRows = numRows;
          printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
          for (dRow = 0; dRow < numRows; dRow++) {
            // create date picker rows
            calender += "<tr>";
            tbody = !showWeek ? "" : "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>";
            for (dow = 0; dow < 7; dow++) {
              // create date picker days
              daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ""];
              otherMonth = printDate.getMonth() !== drawMonth;
              unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
              tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + ( // highlight weekends
              otherMonth ? " ui-datepicker-other-month" : "") + ( // highlight days from other months
              printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key
              defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ?

              // or defaultDate is current printedDate and defaultDate is selectedDate
              " " + this._dayOverClass : "") + ( // highlight selected day
              unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + ( // highlight unselectable days
              otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + ( // highlight custom dates
              printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + ( // highlight selected day
              printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + ( // highlight today (if different)
              (!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + ( // cell title
              unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + ( // actions
              otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
              unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + ( // highlight selected day
              otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
              "' href='#'>" + printDate.getDate() + "</a>") + "</td>"; // display selectable date
              printDate.setDate(printDate.getDate() + 1);
              printDate = this._daylightSavingAdjust(printDate);
            }
            calender += tbody + "</tr>";
          }
          drawMonth++;
          if (drawMonth > 11) {
            drawMonth = 0;
            drawYear++;
          }
          calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
          group += calender;
        }
        html += group;
      }
      html += buttonPanel;
      inst._keyEvent = false;
      return html;
    },

    /* Generate the month and year header. */
    _generateMonthYearHeader: function _generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {

      var inMinYear,
          inMaxYear,
          month,
          years,
          thisYear,
          determineYear,
          year,
          endYear,
          changeMonth = this._get(inst, "changeMonth"),
          changeYear = this._get(inst, "changeYear"),
          showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
          html = "<div class='ui-datepicker-title'>",
          monthHtml = "";

      // Month selection
      if (secondary || !changeMonth) {
        monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
      } else {
        inMinYear = minDate && minDate.getFullYear() === drawYear;
        inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
        monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
        for (month = 0; month < 12; month++) {
          if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
            monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>";
          }
        }
        monthHtml += "</select>";
      }

      if (!showMonthAfterYear) {
        html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
      }

      // Year selection
      if (!inst.yearshtml) {
        inst.yearshtml = "";
        if (secondary || !changeYear) {
          html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
        } else {

          // determine range of years to display
          years = this._get(inst, "yearRange").split(":");
          thisYear = new Date().getFullYear();
          determineYear = function determineYear(value) {
            var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
            return isNaN(year) ? thisYear : year;
          };
          year = determineYear(years[0]);
          endYear = Math.max(year, determineYear(years[1] || ""));
          year = minDate ? Math.max(year, minDate.getFullYear()) : year;
          endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
          inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
          for (; year <= endYear; year++) {
            inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
          }
          inst.yearshtml += "</select>";

          html += inst.yearshtml;
          inst.yearshtml = null;
        }
      }

      html += this._get(inst, "yearSuffix");
      if (showMonthAfterYear) {
        html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
      }
      html += "</div>"; // Close datepicker_header
      return html;
    },

    /* Adjust one of the date sub-fields. */
    _adjustInstDate: function _adjustInstDate(inst, offset, period) {
      var year = inst.selectedYear + (period === "Y" ? offset : 0),
          month = inst.selectedMonth + (period === "M" ? offset : 0),
          day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
          date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
      if (period === "M" || period === "Y") {
        this._notifyChange(inst);
      }
    },

    /* Ensure a date is within any min/max bounds. */
    _restrictMinMax: function _restrictMinMax(inst, date) {
      var minDate = this._getMinMaxDate(inst, "min"),
          maxDate = this._getMinMaxDate(inst, "max"),
          newDate = minDate && date < minDate ? minDate : date;
      return maxDate && newDate > maxDate ? maxDate : newDate;
    },

    /* Notify change of month/year. */
    _notifyChange: function _notifyChange(inst) {
      var onChange = this._get(inst, "onChangeMonthYear");
      if (onChange) {
        onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);
      }
    },

    /* Determine the number of months to show. */
    _getNumberOfMonths: function _getNumberOfMonths(inst) {
      var numMonths = this._get(inst, "numberOfMonths");
      return numMonths == null ? [1, 1] : typeof numMonths === "number" ? [1, numMonths] : numMonths;
    },

    /* Determine the current maximum date - ensure no time components are set. */
    _getMinMaxDate: function _getMinMaxDate(inst, minMax) {
      return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
    },

    /* Find the number of days in a given month. */
    _getDaysInMonth: function _getDaysInMonth(year, month) {
      return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
    },

    /* Find the day of the week of the first of a month. */
    _getFirstDayOfMonth: function _getFirstDayOfMonth(year, month) {
      return new Date(year, month, 1).getDay();
    },

    /* Determines if we should allow a "next/prev" month display change. */
    _canAdjustMonth: function _canAdjustMonth(inst, offset, curYear, curMonth) {
      var numMonths = this._getNumberOfMonths(inst),
          date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

      if (offset < 0) {
        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
      }
      return this._isInRange(inst, date);
    },

    /* Is the given date in the accepted range? */
    _isInRange: function _isInRange(inst, date) {
      var yearSplit,
          currentYear,
          minDate = this._getMinMaxDate(inst, "min"),
          maxDate = this._getMinMaxDate(inst, "max"),
          minYear = null,
          maxYear = null,
          years = this._get(inst, "yearRange");
      if (years) {
        yearSplit = years.split(":");
        currentYear = new Date().getFullYear();
        minYear = parseInt(yearSplit[0], 10);
        maxYear = parseInt(yearSplit[1], 10);
        if (yearSplit[0].match(/[+\-].*/)) {
          minYear += currentYear;
        }
        if (yearSplit[1].match(/[+\-].*/)) {
          maxYear += currentYear;
        }
      }

      return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
    },

    /* Provide the configuration settings for formatting/parsing. */
    _getFormatConfig: function _getFormatConfig(inst) {
      var shortYearCutoff = this._get(inst, "shortYearCutoff");
      shortYearCutoff = typeof shortYearCutoff !== "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
      return {
        shortYearCutoff: shortYearCutoff,
        dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
        monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")
      };
    },

    /* Format the given date for display. */
    _formatDate: function _formatDate(inst, day, month, year) {
      if (!day) {
        inst.currentDay = inst.selectedDay;
        inst.currentMonth = inst.selectedMonth;
        inst.currentYear = inst.selectedYear;
      }
      var date = day ? (typeof day === "undefined" ? "undefined" : _typeof(day)) === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
      return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
    }
  });

  /*
   * Bind hover events for datepicker elements.
   * Done via delegate so the binding only occurs once in the lifetime of the parent div.
   * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
   */
  function datepicker_bindHover(dpDiv) {
    var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
    return dpDiv.on("mouseout", selector, function () {
      $(this).removeClass("ui-state-hover");
      if (this.className.indexOf("ui-datepicker-prev") !== -1) {
        $(this).removeClass("ui-datepicker-prev-hover");
      }
      if (this.className.indexOf("ui-datepicker-next") !== -1) {
        $(this).removeClass("ui-datepicker-next-hover");
      }
    }).on("mouseover", selector, datepicker_handleMouseover);
  }

  function datepicker_handleMouseover() {
    if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
      $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
      $(this).addClass("ui-state-hover");
      if (this.className.indexOf("ui-datepicker-prev") !== -1) {
        $(this).addClass("ui-datepicker-prev-hover");
      }
      if (this.className.indexOf("ui-datepicker-next") !== -1) {
        $(this).addClass("ui-datepicker-next-hover");
      }
    }
  }

  /* jQuery extend now ignores nulls! */
  function datepicker_extendRemove(target, props) {
    $.extend(target, props);
    for (var name in props) {
      if (props[name] == null) {
        target[name] = props[name];
      }
    }
    return target;
  }

  /* Invoke the datepicker functionality.
     @param  options  string - a command, optionally followed by additional parameters or
            Object - settings for attaching new datepicker functionality
     @return  jQuery object */
  $.fn.datepicker = function (options) {

    /* Verify an empty collection wasn't passed - Fixes #6976 */
    if (!this.length) {
      return this;
    }

    /* Initialise the date picker. */
    if (!$.datepicker.initialized) {
      $(document).on("mousedown", $.datepicker._checkExternalClick);
      $.datepicker.initialized = true;
    }

    /* Append datepicker main container to body if not exist. */
    if ($("#" + $.datepicker._mainDivId).length === 0) {
      $("body").append($.datepicker.dpDiv);
    }

    var otherArgs = Array.prototype.slice.call(arguments, 1);
    if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
      return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs));
    }
    if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
      return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs));
    }
    return this.each(function () {
      typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
    });
  };

  $.datepicker = new Datepicker(); // singleton instance
  $.datepicker.initialized = false;
  $.datepicker.uuid = new Date().getTime();
  $.datepicker.version = "1.12.1";

  var widgetsDatepicker = $.datepicker;

  /*!
   * jQuery UI Dialog 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Dialog
  //>>group: Widgets
  //>>description: Displays customizable dialog windows.
  //>>docs: http://api.jqueryui.com/dialog/
  //>>demos: http://jqueryui.com/dialog/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/dialog.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.dialog", {
    version: "1.12.1",
    options: {
      appendTo: "body",
      autoOpen: true,
      buttons: [],
      classes: {
        "ui-dialog": "ui-corner-all",
        "ui-dialog-titlebar": "ui-corner-all"
      },
      closeOnEscape: true,
      closeText: "Close",
      draggable: true,
      hide: null,
      height: "auto",
      maxHeight: null,
      maxWidth: null,
      minHeight: 150,
      minWidth: 150,
      modal: false,
      position: {
        my: "center",
        at: "center",
        of: window,
        collision: "fit",

        // Ensure the titlebar is always visible
        using: function using(pos) {
          var topOffset = $(this).css(pos).offset().top;
          if (topOffset < 0) {
            $(this).css("top", pos.top - topOffset);
          }
        }
      },
      resizable: true,
      show: null,
      title: null,
      width: 300,

      // Callbacks
      beforeClose: null,
      close: null,
      drag: null,
      dragStart: null,
      dragStop: null,
      focus: null,
      open: null,
      resize: null,
      resizeStart: null,
      resizeStop: null
    },

    sizeRelatedOptions: {
      buttons: true,
      height: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      width: true
    },

    resizableRelatedOptions: {
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true
    },

    _create: function _create() {
      this.originalCss = {
        display: this.element[0].style.display,
        width: this.element[0].style.width,
        minHeight: this.element[0].style.minHeight,
        maxHeight: this.element[0].style.maxHeight,
        height: this.element[0].style.height
      };
      this.originalPosition = {
        parent: this.element.parent(),
        index: this.element.parent().children().index(this.element)
      };
      this.originalTitle = this.element.attr("title");
      if (this.options.title == null && this.originalTitle != null) {
        this.options.title = this.originalTitle;
      }

      // Dialogs can't be disabled
      if (this.options.disabled) {
        this.options.disabled = false;
      }

      this._createWrapper();

      this.element.show().removeAttr("title").appendTo(this.uiDialog);

      this._addClass("ui-dialog-content", "ui-widget-content");

      this._createTitlebar();
      this._createButtonPane();

      if (this.options.draggable && $.fn.draggable) {
        this._makeDraggable();
      }
      if (this.options.resizable && $.fn.resizable) {
        this._makeResizable();
      }

      this._isOpen = false;

      this._trackFocus();
    },

    _init: function _init() {
      if (this.options.autoOpen) {
        this.open();
      }
    },

    _appendTo: function _appendTo() {
      var element = this.options.appendTo;
      if (element && (element.jquery || element.nodeType)) {
        return $(element);
      }
      return this.document.find(element || "body").eq(0);
    },

    _destroy: function _destroy() {
      var next,
          originalPosition = this.originalPosition;

      this._untrackInstance();
      this._destroyOverlay();

      this.element.removeUniqueId().css(this.originalCss)

      // Without detaching first, the following becomes really slow
      .detach();

      this.uiDialog.remove();

      if (this.originalTitle) {
        this.element.attr("title", this.originalTitle);
      }

      next = originalPosition.parent.children().eq(originalPosition.index);

      // Don't try to place the dialog next to itself (#8613)
      if (next.length && next[0] !== this.element[0]) {
        next.before(this.element);
      } else {
        originalPosition.parent.append(this.element);
      }
    },

    widget: function widget() {
      return this.uiDialog;
    },

    disable: $.noop,
    enable: $.noop,

    close: function close(event) {
      var that = this;

      if (!this._isOpen || this._trigger("beforeClose", event) === false) {
        return;
      }

      this._isOpen = false;
      this._focusedElement = null;
      this._destroyOverlay();
      this._untrackInstance();

      if (!this.opener.filter(":focusable").trigger("focus").length) {

        // Hiding a focused element doesn't trigger blur in WebKit
        // so in case we have nothing to focus on, explicitly blur the active element
        // https://bugs.webkit.org/show_bug.cgi?id=47182
        $.ui.safeBlur($.ui.safeActiveElement(this.document[0]));
      }

      this._hide(this.uiDialog, this.options.hide, function () {
        that._trigger("close", event);
      });
    },

    isOpen: function isOpen() {
      return this._isOpen;
    },

    moveToTop: function moveToTop() {
      this._moveToTop();
    },

    _moveToTop: function _moveToTop(event, silent) {
      var moved = false,
          zIndices = this.uiDialog.siblings(".ui-front:visible").map(function () {
        return +$(this).css("z-index");
      }).get(),
          zIndexMax = Math.max.apply(null, zIndices);

      if (zIndexMax >= +this.uiDialog.css("z-index")) {
        this.uiDialog.css("z-index", zIndexMax + 1);
        moved = true;
      }

      if (moved && !silent) {
        this._trigger("focus", event);
      }
      return moved;
    },

    open: function open() {
      var that = this;
      if (this._isOpen) {
        if (this._moveToTop()) {
          this._focusTabbable();
        }
        return;
      }

      this._isOpen = true;
      this.opener = $($.ui.safeActiveElement(this.document[0]));

      this._size();
      this._position();
      this._createOverlay();
      this._moveToTop(null, true);

      // Ensure the overlay is moved to the top with the dialog, but only when
      // opening. The overlay shouldn't move after the dialog is open so that
      // modeless dialogs opened after the modal dialog stack properly.
      if (this.overlay) {
        this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
      }

      this._show(this.uiDialog, this.options.show, function () {
        that._focusTabbable();
        that._trigger("focus");
      });

      // Track the dialog immediately upon openening in case a focus event
      // somehow occurs outside of the dialog before an element inside the
      // dialog is focused (#10152)
      this._makeFocusTarget();

      this._trigger("open");
    },

    _focusTabbable: function _focusTabbable() {

      // Set focus to the first match:
      // 1. An element that was focused previously
      // 2. First element inside the dialog matching [autofocus]
      // 3. Tabbable element inside the content element
      // 4. Tabbable element inside the buttonpane
      // 5. The close button
      // 6. The dialog itself
      var hasFocus = this._focusedElement;
      if (!hasFocus) {
        hasFocus = this.element.find("[autofocus]");
      }
      if (!hasFocus.length) {
        hasFocus = this.element.find(":tabbable");
      }
      if (!hasFocus.length) {
        hasFocus = this.uiDialogButtonPane.find(":tabbable");
      }
      if (!hasFocus.length) {
        hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
      }
      if (!hasFocus.length) {
        hasFocus = this.uiDialog;
      }
      hasFocus.eq(0).trigger("focus");
    },

    _keepFocus: function _keepFocus(event) {
      function checkFocus() {
        var activeElement = $.ui.safeActiveElement(this.document[0]),
            isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
        if (!isActive) {
          this._focusTabbable();
        }
      }
      event.preventDefault();
      checkFocus.call(this);

      // support: IE
      // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
      // so we check again later
      this._delay(checkFocus);
    },

    _createWrapper: function _createWrapper() {
      this.uiDialog = $("<div>").hide().attr({

        // Setting tabIndex makes the div focusable
        tabIndex: -1,
        role: "dialog"
      }).appendTo(this._appendTo());

      this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front");
      this._on(this.uiDialog, {
        keydown: function keydown(event) {
          if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
            event.preventDefault();
            this.close(event);
            return;
          }

          // Prevent tabbing out of dialogs
          if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
            return;
          }
          var tabbables = this.uiDialog.find(":tabbable"),
              first = tabbables.filter(":first"),
              last = tabbables.filter(":last");

          if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
            this._delay(function () {
              first.trigger("focus");
            });
            event.preventDefault();
          } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
            this._delay(function () {
              last.trigger("focus");
            });
            event.preventDefault();
          }
        },
        mousedown: function mousedown(event) {
          if (this._moveToTop(event)) {
            this._focusTabbable();
          }
        }
      });

      // We assume that any existing aria-describedby attribute means
      // that the dialog content is marked up properly
      // otherwise we brute force the content as the description
      if (!this.element.find("[aria-describedby]").length) {
        this.uiDialog.attr({
          "aria-describedby": this.element.uniqueId().attr("id")
        });
      }
    },

    _createTitlebar: function _createTitlebar() {
      var uiDialogTitle;

      this.uiDialogTitlebar = $("<div>");
      this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix");
      this._on(this.uiDialogTitlebar, {
        mousedown: function mousedown(event) {

          // Don't prevent click on close button (#8838)
          // Focusing a dialog that is partially scrolled out of view
          // causes the browser to scroll it into view, preventing the click event
          if (!$(event.target).closest(".ui-dialog-titlebar-close")) {

            // Dialog isn't getting focus when dragging (#8063)
            this.uiDialog.trigger("focus");
          }
        }
      });

      // Support: IE
      // Use type="button" to prevent enter keypresses in textboxes from closing the
      // dialog in IE (#9312)
      this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
        label: $("<a>").text(this.options.closeText).html(),
        icon: "ui-icon-closethick",
        showLabel: false
      }).appendTo(this.uiDialogTitlebar);

      this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close");
      this._on(this.uiDialogTitlebarClose, {
        click: function click(event) {
          event.preventDefault();
          this.close(event);
        }
      });

      uiDialogTitle = $("<span>").uniqueId().prependTo(this.uiDialogTitlebar);
      this._addClass(uiDialogTitle, "ui-dialog-title");
      this._title(uiDialogTitle);

      this.uiDialogTitlebar.prependTo(this.uiDialog);

      this.uiDialog.attr({
        "aria-labelledby": uiDialogTitle.attr("id")
      });
    },

    _title: function _title(title) {
      if (this.options.title) {
        title.text(this.options.title);
      } else {
        title.html("&#160;");
      }
    },

    _createButtonPane: function _createButtonPane() {
      this.uiDialogButtonPane = $("<div>");
      this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix");

      this.uiButtonSet = $("<div>").appendTo(this.uiDialogButtonPane);
      this._addClass(this.uiButtonSet, "ui-dialog-buttonset");

      this._createButtons();
    },

    _createButtons: function _createButtons() {
      var that = this,
          buttons = this.options.buttons;

      // If we already have a button pane, remove it
      this.uiDialogButtonPane.remove();
      this.uiButtonSet.empty();

      if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
        this._removeClass(this.uiDialog, "ui-dialog-buttons");
        return;
      }

      $.each(buttons, function (name, props) {
        var click, buttonOptions;
        props = $.isFunction(props) ? { click: props, text: name } : props;

        // Default to a non-submitting button
        props = $.extend({ type: "button" }, props);

        // Change the context for the click callback to be the main element
        click = props.click;
        buttonOptions = {
          icon: props.icon,
          iconPosition: props.iconPosition,
          showLabel: props.showLabel,

          // Deprecated options
          icons: props.icons,
          text: props.text
        };

        delete props.click;
        delete props.icon;
        delete props.iconPosition;
        delete props.showLabel;

        // Deprecated options
        delete props.icons;
        if (typeof props.text === "boolean") {
          delete props.text;
        }

        $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet).on("click", function () {
          click.apply(that.element[0], arguments);
        });
      });
      this._addClass(this.uiDialog, "ui-dialog-buttons");
      this.uiDialogButtonPane.appendTo(this.uiDialog);
    },

    _makeDraggable: function _makeDraggable() {
      var that = this,
          options = this.options;

      function filteredUi(ui) {
        return {
          position: ui.position,
          offset: ui.offset
        };
      }

      this.uiDialog.draggable({
        cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
        handle: ".ui-dialog-titlebar",
        containment: "document",
        start: function start(event, ui) {
          that._addClass($(this), "ui-dialog-dragging");
          that._blockFrames();
          that._trigger("dragStart", event, filteredUi(ui));
        },
        drag: function drag(event, ui) {
          that._trigger("drag", event, filteredUi(ui));
        },
        stop: function stop(event, ui) {
          var left = ui.offset.left - that.document.scrollLeft(),
              top = ui.offset.top - that.document.scrollTop();

          options.position = {
            my: "left top",
            at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
            of: that.window
          };
          that._removeClass($(this), "ui-dialog-dragging");
          that._unblockFrames();
          that._trigger("dragStop", event, filteredUi(ui));
        }
      });
    },

    _makeResizable: function _makeResizable() {
      var that = this,
          options = this.options,
          handles = options.resizable,


      // .ui-resizable has position: relative defined in the stylesheet
      // but dialogs have to use absolute or fixed positioning
      position = this.uiDialog.css("position"),
          resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";

      function filteredUi(ui) {
        return {
          originalPosition: ui.originalPosition,
          originalSize: ui.originalSize,
          position: ui.position,
          size: ui.size
        };
      }

      this.uiDialog.resizable({
        cancel: ".ui-dialog-content",
        containment: "document",
        alsoResize: this.element,
        maxWidth: options.maxWidth,
        maxHeight: options.maxHeight,
        minWidth: options.minWidth,
        minHeight: this._minHeight(),
        handles: resizeHandles,
        start: function start(event, ui) {
          that._addClass($(this), "ui-dialog-resizing");
          that._blockFrames();
          that._trigger("resizeStart", event, filteredUi(ui));
        },
        resize: function resize(event, ui) {
          that._trigger("resize", event, filteredUi(ui));
        },
        stop: function stop(event, ui) {
          var offset = that.uiDialog.offset(),
              left = offset.left - that.document.scrollLeft(),
              top = offset.top - that.document.scrollTop();

          options.height = that.uiDialog.height();
          options.width = that.uiDialog.width();
          options.position = {
            my: "left top",
            at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
            of: that.window
          };
          that._removeClass($(this), "ui-dialog-resizing");
          that._unblockFrames();
          that._trigger("resizeStop", event, filteredUi(ui));
        }
      }).css("position", position);
    },

    _trackFocus: function _trackFocus() {
      this._on(this.widget(), {
        focusin: function focusin(event) {
          this._makeFocusTarget();
          this._focusedElement = $(event.target);
        }
      });
    },

    _makeFocusTarget: function _makeFocusTarget() {
      this._untrackInstance();
      this._trackingInstances().unshift(this);
    },

    _untrackInstance: function _untrackInstance() {
      var instances = this._trackingInstances(),
          exists = $.inArray(this, instances);
      if (exists !== -1) {
        instances.splice(exists, 1);
      }
    },

    _trackingInstances: function _trackingInstances() {
      var instances = this.document.data("ui-dialog-instances");
      if (!instances) {
        instances = [];
        this.document.data("ui-dialog-instances", instances);
      }
      return instances;
    },

    _minHeight: function _minHeight() {
      var options = this.options;

      return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height);
    },

    _position: function _position() {

      // Need to show the dialog to get the actual offset in the position plugin
      var isVisible = this.uiDialog.is(":visible");
      if (!isVisible) {
        this.uiDialog.show();
      }
      this.uiDialog.position(this.options.position);
      if (!isVisible) {
        this.uiDialog.hide();
      }
    },

    _setOptions: function _setOptions(options) {
      var that = this,
          resize = false,
          resizableOptions = {};

      $.each(options, function (key, value) {
        that._setOption(key, value);

        if (key in that.sizeRelatedOptions) {
          resize = true;
        }
        if (key in that.resizableRelatedOptions) {
          resizableOptions[key] = value;
        }
      });

      if (resize) {
        this._size();
        this._position();
      }
      if (this.uiDialog.is(":data(ui-resizable)")) {
        this.uiDialog.resizable("option", resizableOptions);
      }
    },

    _setOption: function _setOption(key, value) {
      var isDraggable,
          isResizable,
          uiDialog = this.uiDialog;

      if (key === "disabled") {
        return;
      }

      this._super(key, value);

      if (key === "appendTo") {
        this.uiDialog.appendTo(this._appendTo());
      }

      if (key === "buttons") {
        this._createButtons();
      }

      if (key === "closeText") {
        this.uiDialogTitlebarClose.button({

          // Ensure that we always pass a string
          label: $("<a>").text("" + this.options.closeText).html()
        });
      }

      if (key === "draggable") {
        isDraggable = uiDialog.is(":data(ui-draggable)");
        if (isDraggable && !value) {
          uiDialog.draggable("destroy");
        }

        if (!isDraggable && value) {
          this._makeDraggable();
        }
      }

      if (key === "position") {
        this._position();
      }

      if (key === "resizable") {

        // currently resizable, becoming non-resizable
        isResizable = uiDialog.is(":data(ui-resizable)");
        if (isResizable && !value) {
          uiDialog.resizable("destroy");
        }

        // Currently resizable, changing handles
        if (isResizable && typeof value === "string") {
          uiDialog.resizable("option", "handles", value);
        }

        // Currently non-resizable, becoming resizable
        if (!isResizable && value !== false) {
          this._makeResizable();
        }
      }

      if (key === "title") {
        this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
      }
    },

    _size: function _size() {

      // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
      // divs will both have width and height set, so we need to reset them
      var nonContentHeight,
          minContentHeight,
          maxContentHeight,
          options = this.options;

      // Reset content sizing
      this.element.show().css({
        width: "auto",
        minHeight: 0,
        maxHeight: "none",
        height: 0
      });

      if (options.minWidth > options.width) {
        options.width = options.minWidth;
      }

      // Reset wrapper sizing
      // determine the height of all the non-content elements
      nonContentHeight = this.uiDialog.css({
        height: "auto",
        width: options.width
      }).outerHeight();
      minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
      maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";

      if (options.height === "auto") {
        this.element.css({
          minHeight: minContentHeight,
          maxHeight: maxContentHeight,
          height: "auto"
        });
      } else {
        this.element.height(Math.max(0, options.height - nonContentHeight));
      }

      if (this.uiDialog.is(":data(ui-resizable)")) {
        this.uiDialog.resizable("option", "minHeight", this._minHeight());
      }
    },

    _blockFrames: function _blockFrames() {
      this.iframeBlocks = this.document.find("iframe").map(function () {
        var iframe = $(this);

        return $("<div>").css({
          position: "absolute",
          width: iframe.outerWidth(),
          height: iframe.outerHeight()
        }).appendTo(iframe.parent()).offset(iframe.offset())[0];
      });
    },

    _unblockFrames: function _unblockFrames() {
      if (this.iframeBlocks) {
        this.iframeBlocks.remove();
        delete this.iframeBlocks;
      }
    },

    _allowInteraction: function _allowInteraction(event) {
      if ($(event.target).closest(".ui-dialog").length) {
        return true;
      }

      // TODO: Remove hack when datepicker implements
      // the .ui-front logic (#8989)
      return !!$(event.target).closest(".ui-datepicker").length;
    },

    _createOverlay: function _createOverlay() {
      if (!this.options.modal) {
        return;
      }

      // We use a delay in case the overlay is created from an
      // event that we're going to be cancelling (#2804)
      var isOpening = true;
      this._delay(function () {
        isOpening = false;
      });

      if (!this.document.data("ui-dialog-overlays")) {

        // Prevent use of anchors and inputs
        // Using _on() for an event handler shared across many instances is
        // safe because the dialogs stack and must be closed in reverse order
        this._on(this.document, {
          focusin: function focusin(event) {
            if (isOpening) {
              return;
            }

            if (!this._allowInteraction(event)) {
              event.preventDefault();
              this._trackingInstances()[0]._focusTabbable();
            }
          }
        });
      }

      this.overlay = $("<div>").appendTo(this._appendTo());

      this._addClass(this.overlay, null, "ui-widget-overlay ui-front");
      this._on(this.overlay, {
        mousedown: "_keepFocus"
      });
      this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
    },

    _destroyOverlay: function _destroyOverlay() {
      if (!this.options.modal) {
        return;
      }

      if (this.overlay) {
        var overlays = this.document.data("ui-dialog-overlays") - 1;

        if (!overlays) {
          this._off(this.document, "focusin");
          this.document.removeData("ui-dialog-overlays");
        } else {
          this.document.data("ui-dialog-overlays", overlays);
        }

        this.overlay.remove();
        this.overlay = null;
      }
    }
  });

  // DEPRECATED
  // TODO: switch return back to widget declaration at top of file when this is removed
  if ($.uiBackCompat !== false) {

    // Backcompat for dialogClass option
    $.widget("ui.dialog", $.ui.dialog, {
      options: {
        dialogClass: ""
      },
      _createWrapper: function _createWrapper() {
        this._super();
        this.uiDialog.addClass(this.options.dialogClass);
      },
      _setOption: function _setOption(key, value) {
        if (key === "dialogClass") {
          this.uiDialog.removeClass(this.options.dialogClass).addClass(value);
        }
        this._superApply(arguments);
      }
    });
  }

  var widgetsDialog = $.ui.dialog;

  /*!
   * jQuery UI Progressbar 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Progressbar
  //>>group: Widgets
  // jscs:disable maximumLineLength
  //>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
  // jscs:enable maximumLineLength
  //>>docs: http://api.jqueryui.com/progressbar/
  //>>demos: http://jqueryui.com/progressbar/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/progressbar.css
  //>>css.theme: ../../themes/base/theme.css


  var widgetsProgressbar = $.widget("ui.progressbar", {
    version: "1.12.1",
    options: {
      classes: {
        "ui-progressbar": "ui-corner-all",
        "ui-progressbar-value": "ui-corner-left",
        "ui-progressbar-complete": "ui-corner-right"
      },
      max: 100,
      value: 0,

      change: null,
      complete: null
    },

    min: 0,

    _create: function _create() {

      // Constrain initial value
      this.oldValue = this.options.value = this._constrainedValue();

      this.element.attr({

        // Only set static values; aria-valuenow and aria-valuemax are
        // set inside _refreshValue()
        role: "progressbar",
        "aria-valuemin": this.min
      });
      this._addClass("ui-progressbar", "ui-widget ui-widget-content");

      this.valueDiv = $("<div>").appendTo(this.element);
      this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header");
      this._refreshValue();
    },

    _destroy: function _destroy() {
      this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow");

      this.valueDiv.remove();
    },

    value: function value(newValue) {
      if (newValue === undefined) {
        return this.options.value;
      }

      this.options.value = this._constrainedValue(newValue);
      this._refreshValue();
    },

    _constrainedValue: function _constrainedValue(newValue) {
      if (newValue === undefined) {
        newValue = this.options.value;
      }

      this.indeterminate = newValue === false;

      // Sanitize value
      if (typeof newValue !== "number") {
        newValue = 0;
      }

      return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
    },

    _setOptions: function _setOptions(options) {

      // Ensure "value" option is set after other values (like max)
      var value = options.value;
      delete options.value;

      this._super(options);

      this.options.value = this._constrainedValue(value);
      this._refreshValue();
    },

    _setOption: function _setOption(key, value) {
      if (key === "max") {

        // Don't allow a max less than min
        value = Math.max(this.min, value);
      }
      this._super(key, value);
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._super(value);

      this.element.attr("aria-disabled", value);
      this._toggleClass(null, "ui-state-disabled", !!value);
    },

    _percentage: function _percentage() {
      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
    },

    _refreshValue: function _refreshValue() {
      var value = this.options.value,
          percentage = this._percentage();

      this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + "%");

      this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, value === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate);

      if (this.indeterminate) {
        this.element.removeAttr("aria-valuenow");
        if (!this.overlayDiv) {
          this.overlayDiv = $("<div>").appendTo(this.valueDiv);
          this._addClass(this.overlayDiv, "ui-progressbar-overlay");
        }
      } else {
        this.element.attr({
          "aria-valuemax": this.options.max,
          "aria-valuenow": value
        });
        if (this.overlayDiv) {
          this.overlayDiv.remove();
          this.overlayDiv = null;
        }
      }

      if (this.oldValue !== value) {
        this.oldValue = value;
        this._trigger("change");
      }
      if (value === this.options.max) {
        this._trigger("complete");
      }
    }
  });

  /*!
   * jQuery UI Selectmenu 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Selectmenu
  //>>group: Widgets
  // jscs:disable maximumLineLength
  //>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
  // jscs:enable maximumLineLength
  //>>docs: http://api.jqueryui.com/selectmenu/
  //>>demos: http://jqueryui.com/selectmenu/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
  //>>css.theme: ../../themes/base/theme.css


  var widgetsSelectmenu = $.widget("ui.selectmenu", [$.ui.formResetMixin, {
    version: "1.12.1",
    defaultElement: "<select>",
    options: {
      appendTo: null,
      classes: {
        "ui-selectmenu-button-open": "ui-corner-top",
        "ui-selectmenu-button-closed": "ui-corner-all"
      },
      disabled: null,
      icons: {
        button: "ui-icon-triangle-1-s"
      },
      position: {
        my: "left top",
        at: "left bottom",
        collision: "none"
      },
      width: false,

      // Callbacks
      change: null,
      close: null,
      focus: null,
      open: null,
      select: null
    },

    _create: function _create() {
      var selectmenuId = this.element.uniqueId().attr("id");
      this.ids = {
        element: selectmenuId,
        button: selectmenuId + "-button",
        menu: selectmenuId + "-menu"
      };

      this._drawButton();
      this._drawMenu();
      this._bindFormResetHandler();

      this._rendered = false;
      this.menuItems = $();
    },

    _drawButton: function _drawButton() {
      var icon,
          that = this,
          item = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);

      // Associate existing label with the new button
      this.labels = this.element.labels().attr("for", this.ids.button);
      this._on(this.labels, {
        click: function click(event) {
          this.button.focus();
          event.preventDefault();
        }
      });

      // Hide original select element
      this.element.hide();

      // Create button
      this.button = $("<span>", {
        tabindex: this.options.disabled ? -1 : 0,
        id: this.ids.button,
        role: "combobox",
        "aria-expanded": "false",
        "aria-autocomplete": "list",
        "aria-owns": this.ids.menu,
        "aria-haspopup": "true",
        title: this.element.attr("title")
      }).insertAfter(this.element);

      this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget");

      icon = $("<span>").appendTo(this.button);
      this._addClass(icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button);
      this.buttonItem = this._renderButtonItem(item).appendTo(this.button);

      if (this.options.width !== false) {
        this._resizeButton();
      }

      this._on(this.button, this._buttonEvents);
      this.button.one("focusin", function () {

        // Delay rendering the menu items until the button receives focus.
        // The menu may have already been rendered via a programmatic open.
        if (!that._rendered) {
          that._refreshMenu();
        }
      });
    },

    _drawMenu: function _drawMenu() {
      var that = this;

      // Create menu
      this.menu = $("<ul>", {
        "aria-hidden": "true",
        "aria-labelledby": this.ids.button,
        id: this.ids.menu
      });

      // Wrap menu
      this.menuWrap = $("<div>").append(this.menu);
      this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front");
      this.menuWrap.appendTo(this._appendTo());

      // Initialize menu widget
      this.menuInstance = this.menu.menu({
        classes: {
          "ui-menu": "ui-corner-bottom"
        },
        role: "listbox",
        select: function select(event, ui) {
          event.preventDefault();

          // Support: IE8
          // If the item was selected via a click, the text selection
          // will be destroyed in IE
          that._setSelection();

          that._select(ui.item.data("ui-selectmenu-item"), event);
        },
        focus: function focus(event, ui) {
          var item = ui.item.data("ui-selectmenu-item");

          // Prevent inital focus from firing and check if its a newly focused item
          if (that.focusIndex != null && item.index !== that.focusIndex) {
            that._trigger("focus", event, { item: item });
            if (!that.isOpen) {
              that._select(item, event);
            }
          }
          that.focusIndex = item.index;

          that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"));
        }
      }).menu("instance");

      // Don't close the menu on mouseleave
      this.menuInstance._off(this.menu, "mouseleave");

      // Cancel the menu's collapseAll on document click
      this.menuInstance._closeOnDocumentClick = function () {
        return false;
      };

      // Selects often contain empty items, but never contain dividers
      this.menuInstance._isDivider = function () {
        return false;
      };
    },

    refresh: function refresh() {
      this._refreshMenu();
      this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(

      // Fall back to an empty object in case there are no options
      this._getSelectedItem().data("ui-selectmenu-item") || {}));
      if (this.options.width === null) {
        this._resizeButton();
      }
    },

    _refreshMenu: function _refreshMenu() {
      var item,
          options = this.element.find("option");

      this.menu.empty();

      this._parseOptions(options);
      this._renderMenu(this.menu, this.items);

      this.menuInstance.refresh();
      this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper");

      this._rendered = true;

      if (!options.length) {
        return;
      }

      item = this._getSelectedItem();

      // Update the menu to have the correct item focused
      this.menuInstance.focus(null, item);
      this._setAria(item.data("ui-selectmenu-item"));

      // Set disabled state
      this._setOption("disabled", this.element.prop("disabled"));
    },

    open: function open(event) {
      if (this.options.disabled) {
        return;
      }

      // If this is the first time the menu is being opened, render the items
      if (!this._rendered) {
        this._refreshMenu();
      } else {

        // Menu clears focus on close, reset focus to selected item
        this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active");
        this.menuInstance.focus(null, this._getSelectedItem());
      }

      // If there are no options, don't open the menu
      if (!this.menuItems.length) {
        return;
      }

      this.isOpen = true;
      this._toggleAttr();
      this._resizeMenu();
      this._position();

      this._on(this.document, this._documentClick);

      this._trigger("open", event);
    },

    _position: function _position() {
      this.menuWrap.position($.extend({ of: this.button }, this.options.position));
    },

    close: function close(event) {
      if (!this.isOpen) {
        return;
      }

      this.isOpen = false;
      this._toggleAttr();

      this.range = null;
      this._off(this.document);

      this._trigger("close", event);
    },

    widget: function widget() {
      return this.button;
    },

    menuWidget: function menuWidget() {
      return this.menu;
    },

    _renderButtonItem: function _renderButtonItem(item) {
      var buttonItem = $("<span>");

      this._setText(buttonItem, item.label);
      this._addClass(buttonItem, "ui-selectmenu-text");

      return buttonItem;
    },

    _renderMenu: function _renderMenu(ul, items) {
      var that = this,
          currentOptgroup = "";

      $.each(items, function (index, item) {
        var li;

        if (item.optgroup !== currentOptgroup) {
          li = $("<li>", {
            text: item.optgroup
          });
          that._addClass(li, "ui-selectmenu-optgroup", "ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""));

          li.appendTo(ul);

          currentOptgroup = item.optgroup;
        }

        that._renderItemData(ul, item);
      });
    },

    _renderItemData: function _renderItemData(ul, item) {
      return this._renderItem(ul, item).data("ui-selectmenu-item", item);
    },

    _renderItem: function _renderItem(ul, item) {
      var li = $("<li>"),
          wrapper = $("<div>", {
        title: item.element.attr("title")
      });

      if (item.disabled) {
        this._addClass(li, null, "ui-state-disabled");
      }
      this._setText(wrapper, item.label);

      return li.append(wrapper).appendTo(ul);
    },

    _setText: function _setText(element, value) {
      if (value) {
        element.text(value);
      } else {
        element.html("&#160;");
      }
    },

    _move: function _move(direction, event) {
      var item,
          next,
          filter = ".ui-menu-item";

      if (this.isOpen) {
        item = this.menuItems.eq(this.focusIndex).parent("li");
      } else {
        item = this.menuItems.eq(this.element[0].selectedIndex).parent("li");
        filter += ":not(.ui-state-disabled)";
      }

      if (direction === "first" || direction === "last") {
        next = item[direction === "first" ? "prevAll" : "nextAll"](filter).eq(-1);
      } else {
        next = item[direction + "All"](filter).eq(0);
      }

      if (next.length) {
        this.menuInstance.focus(event, next);
      }
    },

    _getSelectedItem: function _getSelectedItem() {
      return this.menuItems.eq(this.element[0].selectedIndex).parent("li");
    },

    _toggle: function _toggle(event) {
      this[this.isOpen ? "close" : "open"](event);
    },

    _setSelection: function _setSelection() {
      var selection;

      if (!this.range) {
        return;
      }

      if (window.getSelection) {
        selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(this.range);

        // Support: IE8
      } else {
        this.range.select();
      }

      // Support: IE
      // Setting the text selection kills the button focus in IE, but
      // restoring the focus doesn't kill the selection.
      this.button.focus();
    },

    _documentClick: {
      mousedown: function mousedown(event) {
        if (!this.isOpen) {
          return;
        }

        if (!$(event.target).closest(".ui-selectmenu-menu, #" + $.ui.escapeSelector(this.ids.button)).length) {
          this.close(event);
        }
      }
    },

    _buttonEvents: {

      // Prevent text selection from being reset when interacting with the selectmenu (#10144)
      mousedown: function mousedown() {
        var selection;

        if (window.getSelection) {
          selection = window.getSelection();
          if (selection.rangeCount) {
            this.range = selection.getRangeAt(0);
          }

          // Support: IE8
        } else {
          this.range = document.selection.createRange();
        }
      },

      click: function click(event) {
        this._setSelection();
        this._toggle(event);
      },

      keydown: function keydown(event) {
        var preventDefault = true;
        switch (event.keyCode) {
          case $.ui.keyCode.TAB:
          case $.ui.keyCode.ESCAPE:
            this.close(event);
            preventDefault = false;
            break;
          case $.ui.keyCode.ENTER:
            if (this.isOpen) {
              this._selectFocusedItem(event);
            }
            break;
          case $.ui.keyCode.UP:
            if (event.altKey) {
              this._toggle(event);
            } else {
              this._move("prev", event);
            }
            break;
          case $.ui.keyCode.DOWN:
            if (event.altKey) {
              this._toggle(event);
            } else {
              this._move("next", event);
            }
            break;
          case $.ui.keyCode.SPACE:
            if (this.isOpen) {
              this._selectFocusedItem(event);
            } else {
              this._toggle(event);
            }
            break;
          case $.ui.keyCode.LEFT:
            this._move("prev", event);
            break;
          case $.ui.keyCode.RIGHT:
            this._move("next", event);
            break;
          case $.ui.keyCode.HOME:
          case $.ui.keyCode.PAGE_UP:
            this._move("first", event);
            break;
          case $.ui.keyCode.END:
          case $.ui.keyCode.PAGE_DOWN:
            this._move("last", event);
            break;
          default:
            this.menu.trigger(event);
            preventDefault = false;
        }

        if (preventDefault) {
          event.preventDefault();
        }
      }
    },

    _selectFocusedItem: function _selectFocusedItem(event) {
      var item = this.menuItems.eq(this.focusIndex).parent("li");
      if (!item.hasClass("ui-state-disabled")) {
        this._select(item.data("ui-selectmenu-item"), event);
      }
    },

    _select: function _select(item, event) {
      var oldIndex = this.element[0].selectedIndex;

      // Change native select element
      this.element[0].selectedIndex = item.index;
      this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item));
      this._setAria(item);
      this._trigger("select", event, { item: item });

      if (item.index !== oldIndex) {
        this._trigger("change", event, { item: item });
      }

      this.close(event);
    },

    _setAria: function _setAria(item) {
      var id = this.menuItems.eq(item.index).attr("id");

      this.button.attr({
        "aria-labelledby": id,
        "aria-activedescendant": id
      });
      this.menu.attr("aria-activedescendant", id);
    },

    _setOption: function _setOption(key, value) {
      if (key === "icons") {
        var icon = this.button.find("span.ui-icon");
        this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button);
      }

      this._super(key, value);

      if (key === "appendTo") {
        this.menuWrap.appendTo(this._appendTo());
      }

      if (key === "width") {
        this._resizeButton();
      }
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._super(value);

      this.menuInstance.option("disabled", value);
      this.button.attr("aria-disabled", value);
      this._toggleClass(this.button, null, "ui-state-disabled", value);

      this.element.prop("disabled", value);
      if (value) {
        this.button.attr("tabindex", -1);
        this.close();
      } else {
        this.button.attr("tabindex", 0);
      }
    },

    _appendTo: function _appendTo() {
      var element = this.options.appendTo;

      if (element) {
        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
      }

      if (!element || !element[0]) {
        element = this.element.closest(".ui-front, dialog");
      }

      if (!element.length) {
        element = this.document[0].body;
      }

      return element;
    },

    _toggleAttr: function _toggleAttr() {
      this.button.attr("aria-expanded", this.isOpen);

      // We can't use two _toggleClass() calls here, because we need to make sure
      // we always remove classes first and add them second, otherwise if both classes have the
      // same theme class, it will be removed after we add it.
      this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen);

      this.menu.attr("aria-hidden", !this.isOpen);
    },

    _resizeButton: function _resizeButton() {
      var width = this.options.width;

      // For `width: false`, just remove inline style and stop
      if (width === false) {
        this.button.css("width", "");
        return;
      }

      // For `width: null`, match the width of the original element
      if (width === null) {
        width = this.element.show().outerWidth();
        this.element.hide();
      }

      this.button.outerWidth(width);
    },

    _resizeMenu: function _resizeMenu() {
      this.menu.outerWidth(Math.max(this.button.outerWidth(),

      // Support: IE10
      // IE10 wraps long text (possibly a rounding bug)
      // so we add 1px to avoid the wrapping
      this.menu.width("").outerWidth() + 1));
    },

    _getCreateOptions: function _getCreateOptions() {
      var options = this._super();

      options.disabled = this.element.prop("disabled");

      return options;
    },

    _parseOptions: function _parseOptions(options) {
      var that = this,
          data = [];
      options.each(function (index, item) {
        data.push(that._parseOption($(item), index));
      });
      this.items = data;
    },

    _parseOption: function _parseOption(option, index) {
      var optgroup = option.parent("optgroup");

      return {
        element: option,
        index: index,
        value: option.val(),
        label: option.text(),
        optgroup: optgroup.attr("label") || "",
        disabled: optgroup.prop("disabled") || option.prop("disabled")
      };
    },

    _destroy: function _destroy() {
      this._unbindFormResetHandler();
      this.menuWrap.remove();
      this.button.remove();
      this.element.show();
      this.element.removeUniqueId();
      this.labels.attr("for", this.ids.element);
    }
  }]);

  /*!
   * jQuery UI Slider 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Slider
  //>>group: Widgets
  //>>description: Displays a flexible slider with ranges and accessibility via keyboard.
  //>>docs: http://api.jqueryui.com/slider/
  //>>demos: http://jqueryui.com/slider/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/slider.css
  //>>css.theme: ../../themes/base/theme.css


  var widgetsSlider = $.widget("ui.slider", $.ui.mouse, {
    version: "1.12.1",
    widgetEventPrefix: "slide",

    options: {
      animate: false,
      classes: {
        "ui-slider": "ui-corner-all",
        "ui-slider-handle": "ui-corner-all",

        // Note: ui-widget-header isn't the most fittingly semantic framework class for this
        // element, but worked best visually with a variety of themes
        "ui-slider-range": "ui-corner-all ui-widget-header"
      },
      distance: 0,
      max: 100,
      min: 0,
      orientation: "horizontal",
      range: false,
      step: 1,
      value: 0,
      values: null,

      // Callbacks
      change: null,
      slide: null,
      start: null,
      stop: null
    },

    // Number of pages in a slider
    // (how many times can you page up/down to go through the whole range)
    numPages: 5,

    _create: function _create() {
      this._keySliding = false;
      this._mouseSliding = false;
      this._animateOff = true;
      this._handleIndex = null;
      this._detectOrientation();
      this._mouseInit();
      this._calculateNewMax();

      this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content");

      this._refresh();

      this._animateOff = false;
    },

    _refresh: function _refresh() {
      this._createRange();
      this._createHandles();
      this._setupEvents();
      this._refreshValue();
    },

    _createHandles: function _createHandles() {
      var i,
          handleCount,
          options = this.options,
          existingHandles = this.element.find(".ui-slider-handle"),
          handle = "<span tabindex='0'></span>",
          handles = [];

      handleCount = options.values && options.values.length || 1;

      if (existingHandles.length > handleCount) {
        existingHandles.slice(handleCount).remove();
        existingHandles = existingHandles.slice(0, handleCount);
      }

      for (i = existingHandles.length; i < handleCount; i++) {
        handles.push(handle);
      }

      this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));

      this._addClass(this.handles, "ui-slider-handle", "ui-state-default");

      this.handle = this.handles.eq(0);

      this.handles.each(function (i) {
        $(this).data("ui-slider-handle-index", i).attr("tabIndex", 0);
      });
    },

    _createRange: function _createRange() {
      var options = this.options;

      if (options.range) {
        if (options.range === true) {
          if (!options.values) {
            options.values = [this._valueMin(), this._valueMin()];
          } else if (options.values.length && options.values.length !== 2) {
            options.values = [options.values[0], options.values[0]];
          } else if ($.isArray(options.values)) {
            options.values = options.values.slice(0);
          }
        }

        if (!this.range || !this.range.length) {
          this.range = $("<div>").appendTo(this.element);

          this._addClass(this.range, "ui-slider-range");
        } else {
          this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max");

          // Handle range switching from true to min/max
          this.range.css({
            "left": "",
            "bottom": ""
          });
        }
        if (options.range === "min" || options.range === "max") {
          this._addClass(this.range, "ui-slider-range-" + options.range);
        }
      } else {
        if (this.range) {
          this.range.remove();
        }
        this.range = null;
      }
    },

    _setupEvents: function _setupEvents() {
      this._off(this.handles);
      this._on(this.handles, this._handleEvents);
      this._hoverable(this.handles);
      this._focusable(this.handles);
    },

    _destroy: function _destroy() {
      this.handles.remove();
      if (this.range) {
        this.range.remove();
      }

      this._mouseDestroy();
    },

    _mouseCapture: function _mouseCapture(event) {
      var position,
          normValue,
          distance,
          closestHandle,
          index,
          allowed,
          offset,
          mouseOverHandle,
          that = this,
          o = this.options;

      if (o.disabled) {
        return false;
      }

      this.elementSize = {
        width: this.element.outerWidth(),
        height: this.element.outerHeight()
      };
      this.elementOffset = this.element.offset();

      position = { x: event.pageX, y: event.pageY };
      normValue = this._normValueFromMouse(position);
      distance = this._valueMax() - this._valueMin() + 1;
      this.handles.each(function (i) {
        var thisDistance = Math.abs(normValue - that.values(i));
        if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
          distance = thisDistance;
          closestHandle = $(this);
          index = i;
        }
      });

      allowed = this._start(event, index);
      if (allowed === false) {
        return false;
      }
      this._mouseSliding = true;

      this._handleIndex = index;

      this._addClass(closestHandle, null, "ui-state-active");
      closestHandle.trigger("focus");

      offset = closestHandle.offset();
      mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
      this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
        left: event.pageX - offset.left - closestHandle.width() / 2,
        top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
      };

      if (!this.handles.hasClass("ui-state-hover")) {
        this._slide(event, index, normValue);
      }
      this._animateOff = true;
      return true;
    },

    _mouseStart: function _mouseStart() {
      return true;
    },

    _mouseDrag: function _mouseDrag(event) {
      var position = { x: event.pageX, y: event.pageY },
          normValue = this._normValueFromMouse(position);

      this._slide(event, this._handleIndex, normValue);

      return false;
    },

    _mouseStop: function _mouseStop(event) {
      this._removeClass(this.handles, null, "ui-state-active");
      this._mouseSliding = false;

      this._stop(event, this._handleIndex);
      this._change(event, this._handleIndex);

      this._handleIndex = null;
      this._clickOffset = null;
      this._animateOff = false;

      return false;
    },

    _detectOrientation: function _detectOrientation() {
      this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
    },

    _normValueFromMouse: function _normValueFromMouse(position) {
      var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;

      if (this.orientation === "horizontal") {
        pixelTotal = this.elementSize.width;
        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
      } else {
        pixelTotal = this.elementSize.height;
        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
      }

      percentMouse = pixelMouse / pixelTotal;
      if (percentMouse > 1) {
        percentMouse = 1;
      }
      if (percentMouse < 0) {
        percentMouse = 0;
      }
      if (this.orientation === "vertical") {
        percentMouse = 1 - percentMouse;
      }

      valueTotal = this._valueMax() - this._valueMin();
      valueMouse = this._valueMin() + percentMouse * valueTotal;

      return this._trimAlignValue(valueMouse);
    },

    _uiHash: function _uiHash(index, value, values) {
      var uiHash = {
        handle: this.handles[index],
        handleIndex: index,
        value: value !== undefined ? value : this.value()
      };

      if (this._hasMultipleValues()) {
        uiHash.value = value !== undefined ? value : this.values(index);
        uiHash.values = values || this.values();
      }

      return uiHash;
    },

    _hasMultipleValues: function _hasMultipleValues() {
      return this.options.values && this.options.values.length;
    },

    _start: function _start(event, index) {
      return this._trigger("start", event, this._uiHash(index));
    },

    _slide: function _slide(event, index, newVal) {
      var allowed,
          otherVal,
          currentValue = this.value(),
          newValues = this.values();

      if (this._hasMultipleValues()) {
        otherVal = this.values(index ? 0 : 1);
        currentValue = this.values(index);

        if (this.options.values.length === 2 && this.options.range === true) {
          newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal);
        }

        newValues[index] = newVal;
      }

      if (newVal === currentValue) {
        return;
      }

      allowed = this._trigger("slide", event, this._uiHash(index, newVal, newValues));

      // A slide can be canceled by returning false from the slide callback
      if (allowed === false) {
        return;
      }

      if (this._hasMultipleValues()) {
        this.values(index, newVal);
      } else {
        this.value(newVal);
      }
    },

    _stop: function _stop(event, index) {
      this._trigger("stop", event, this._uiHash(index));
    },

    _change: function _change(event, index) {
      if (!this._keySliding && !this._mouseSliding) {

        //store the last changed value index for reference when handles overlap
        this._lastChangedValue = index;
        this._trigger("change", event, this._uiHash(index));
      }
    },

    value: function value(newValue) {
      if (arguments.length) {
        this.options.value = this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null, 0);
        return;
      }

      return this._value();
    },

    values: function values(index, newValue) {
      var vals, newValues, i;

      if (arguments.length > 1) {
        this.options.values[index] = this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null, index);
        return;
      }

      if (arguments.length) {
        if ($.isArray(arguments[0])) {
          vals = this.options.values;
          newValues = arguments[0];
          for (i = 0; i < vals.length; i += 1) {
            vals[i] = this._trimAlignValue(newValues[i]);
            this._change(null, i);
          }
          this._refreshValue();
        } else {
          if (this._hasMultipleValues()) {
            return this._values(index);
          } else {
            return this.value();
          }
        }
      } else {
        return this._values();
      }
    },

    _setOption: function _setOption(key, value) {
      var i,
          valsLength = 0;

      if (key === "range" && this.options.range === true) {
        if (value === "min") {
          this.options.value = this._values(0);
          this.options.values = null;
        } else if (value === "max") {
          this.options.value = this._values(this.options.values.length - 1);
          this.options.values = null;
        }
      }

      if ($.isArray(this.options.values)) {
        valsLength = this.options.values.length;
      }

      this._super(key, value);

      switch (key) {
        case "orientation":
          this._detectOrientation();
          this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation);
          this._refreshValue();
          if (this.options.range) {
            this._refreshRange(value);
          }

          // Reset positioning from previous orientation
          this.handles.css(value === "horizontal" ? "bottom" : "left", "");
          break;
        case "value":
          this._animateOff = true;
          this._refreshValue();
          this._change(null, 0);
          this._animateOff = false;
          break;
        case "values":
          this._animateOff = true;
          this._refreshValue();

          // Start from the last handle to prevent unreachable handles (#9046)
          for (i = valsLength - 1; i >= 0; i--) {
            this._change(null, i);
          }
          this._animateOff = false;
          break;
        case "step":
        case "min":
        case "max":
          this._animateOff = true;
          this._calculateNewMax();
          this._refreshValue();
          this._animateOff = false;
          break;
        case "range":
          this._animateOff = true;
          this._refresh();
          this._animateOff = false;
          break;
      }
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._super(value);

      this._toggleClass(null, "ui-state-disabled", !!value);
    },

    //internal value getter
    // _value() returns value trimmed by min and max, aligned by step
    _value: function _value() {
      var val = this.options.value;
      val = this._trimAlignValue(val);

      return val;
    },

    //internal values getter
    // _values() returns array of values trimmed by min and max, aligned by step
    // _values( index ) returns single value trimmed by min and max, aligned by step
    _values: function _values(index) {
      var val, vals, i;

      if (arguments.length) {
        val = this.options.values[index];
        val = this._trimAlignValue(val);

        return val;
      } else if (this._hasMultipleValues()) {

        // .slice() creates a copy of the array
        // this copy gets trimmed by min and max and then returned
        vals = this.options.values.slice();
        for (i = 0; i < vals.length; i += 1) {
          vals[i] = this._trimAlignValue(vals[i]);
        }

        return vals;
      } else {
        return [];
      }
    },

    // Returns the step-aligned value that val is closest to, between (inclusive) min and max
    _trimAlignValue: function _trimAlignValue(val) {
      if (val <= this._valueMin()) {
        return this._valueMin();
      }
      if (val >= this._valueMax()) {
        return this._valueMax();
      }
      var step = this.options.step > 0 ? this.options.step : 1,
          valModStep = (val - this._valueMin()) % step,
          alignValue = val - valModStep;

      if (Math.abs(valModStep) * 2 >= step) {
        alignValue += valModStep > 0 ? step : -step;
      }

      // Since JavaScript has problems with large floats, round
      // the final value to 5 digits after the decimal point (see #4124)
      return parseFloat(alignValue.toFixed(5));
    },

    _calculateNewMax: function _calculateNewMax() {
      var max = this.options.max,
          min = this._valueMin(),
          step = this.options.step,
          aboveMin = Math.round((max - min) / step) * step;
      max = aboveMin + min;
      if (max > this.options.max) {

        //If max is not divisible by step, rounding off may increase its value
        max -= step;
      }
      this.max = parseFloat(max.toFixed(this._precision()));
    },

    _precision: function _precision() {
      var precision = this._precisionOf(this.options.step);
      if (this.options.min !== null) {
        precision = Math.max(precision, this._precisionOf(this.options.min));
      }
      return precision;
    },

    _precisionOf: function _precisionOf(num) {
      var str = num.toString(),
          decimal = str.indexOf(".");
      return decimal === -1 ? 0 : str.length - decimal - 1;
    },

    _valueMin: function _valueMin() {
      return this.options.min;
    },

    _valueMax: function _valueMax() {
      return this.max;
    },

    _refreshRange: function _refreshRange(orientation) {
      if (orientation === "vertical") {
        this.range.css({ "width": "", "left": "" });
      }
      if (orientation === "horizontal") {
        this.range.css({ "height": "", "bottom": "" });
      }
    },

    _refreshValue: function _refreshValue() {
      var lastValPercent,
          valPercent,
          value,
          valueMin,
          valueMax,
          oRange = this.options.range,
          o = this.options,
          that = this,
          animate = !this._animateOff ? o.animate : false,
          _set = {};

      if (this._hasMultipleValues()) {
        this.handles.each(function (i) {
          valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
          _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
          $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
          if (that.options.range === true) {
            if (that.orientation === "horizontal") {
              if (i === 0) {
                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                  left: valPercent + "%"
                }, o.animate);
              }
              if (i === 1) {
                that.range[animate ? "animate" : "css"]({
                  width: valPercent - lastValPercent + "%"
                }, {
                  queue: false,
                  duration: o.animate
                });
              }
            } else {
              if (i === 0) {
                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                  bottom: valPercent + "%"
                }, o.animate);
              }
              if (i === 1) {
                that.range[animate ? "animate" : "css"]({
                  height: valPercent - lastValPercent + "%"
                }, {
                  queue: false,
                  duration: o.animate
                });
              }
            }
          }
          lastValPercent = valPercent;
        });
      } else {
        value = this.value();
        valueMin = this._valueMin();
        valueMax = this._valueMax();
        valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
        _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
        this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);

        if (oRange === "min" && this.orientation === "horizontal") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            width: valPercent + "%"
          }, o.animate);
        }
        if (oRange === "max" && this.orientation === "horizontal") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            width: 100 - valPercent + "%"
          }, o.animate);
        }
        if (oRange === "min" && this.orientation === "vertical") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            height: valPercent + "%"
          }, o.animate);
        }
        if (oRange === "max" && this.orientation === "vertical") {
          this.range.stop(1, 1)[animate ? "animate" : "css"]({
            height: 100 - valPercent + "%"
          }, o.animate);
        }
      }
    },

    _handleEvents: {
      keydown: function keydown(event) {
        var allowed,
            curVal,
            newVal,
            step,
            index = $(event.target).data("ui-slider-handle-index");

        switch (event.keyCode) {
          case $.ui.keyCode.HOME:
          case $.ui.keyCode.END:
          case $.ui.keyCode.PAGE_UP:
          case $.ui.keyCode.PAGE_DOWN:
          case $.ui.keyCode.UP:
          case $.ui.keyCode.RIGHT:
          case $.ui.keyCode.DOWN:
          case $.ui.keyCode.LEFT:
            event.preventDefault();
            if (!this._keySliding) {
              this._keySliding = true;
              this._addClass($(event.target), null, "ui-state-active");
              allowed = this._start(event, index);
              if (allowed === false) {
                return;
              }
            }
            break;
        }

        step = this.options.step;
        if (this._hasMultipleValues()) {
          curVal = newVal = this.values(index);
        } else {
          curVal = newVal = this.value();
        }

        switch (event.keyCode) {
          case $.ui.keyCode.HOME:
            newVal = this._valueMin();
            break;
          case $.ui.keyCode.END:
            newVal = this._valueMax();
            break;
          case $.ui.keyCode.PAGE_UP:
            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
            break;
          case $.ui.keyCode.PAGE_DOWN:
            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
            break;
          case $.ui.keyCode.UP:
          case $.ui.keyCode.RIGHT:
            if (curVal === this._valueMax()) {
              return;
            }
            newVal = this._trimAlignValue(curVal + step);
            break;
          case $.ui.keyCode.DOWN:
          case $.ui.keyCode.LEFT:
            if (curVal === this._valueMin()) {
              return;
            }
            newVal = this._trimAlignValue(curVal - step);
            break;
        }

        this._slide(event, index, newVal);
      },
      keyup: function keyup(event) {
        var index = $(event.target).data("ui-slider-handle-index");

        if (this._keySliding) {
          this._keySliding = false;
          this._stop(event, index);
          this._change(event, index);
          this._removeClass($(event.target), null, "ui-state-active");
        }
      }
    }
  });

  /*!
   * jQuery UI Spinner 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Spinner
  //>>group: Widgets
  //>>description: Displays buttons to easily input numbers via the keyboard or mouse.
  //>>docs: http://api.jqueryui.com/spinner/
  //>>demos: http://jqueryui.com/spinner/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/spinner.css
  //>>css.theme: ../../themes/base/theme.css


  function spinnerModifer(fn) {
    return function () {
      var previous = this.element.val();
      fn.apply(this, arguments);
      this._refresh();
      if (previous !== this.element.val()) {
        this._trigger("change");
      }
    };
  }

  $.widget("ui.spinner", {
    version: "1.12.1",
    defaultElement: "<input>",
    widgetEventPrefix: "spin",
    options: {
      classes: {
        "ui-spinner": "ui-corner-all",
        "ui-spinner-down": "ui-corner-br",
        "ui-spinner-up": "ui-corner-tr"
      },
      culture: null,
      icons: {
        down: "ui-icon-triangle-1-s",
        up: "ui-icon-triangle-1-n"
      },
      incremental: true,
      max: null,
      min: null,
      numberFormat: null,
      page: 10,
      step: 1,

      change: null,
      spin: null,
      start: null,
      stop: null
    },

    _create: function _create() {

      // handle string values that need to be parsed
      this._setOption("max", this.options.max);
      this._setOption("min", this.options.min);
      this._setOption("step", this.options.step);

      // Only format if there is a value, prevents the field from being marked
      // as invalid in Firefox, see #9573.
      if (this.value() !== "") {

        // Format the value, but don't constrain.
        this._value(this.element.val(), true);
      }

      this._draw();
      this._on(this._events);
      this._refresh();

      // Turning off autocomplete prevents the browser from remembering the
      // value when navigating through history, so we re-enable autocomplete
      // if the page is unloaded before the widget is destroyed. #7790
      this._on(this.window, {
        beforeunload: function beforeunload() {
          this.element.removeAttr("autocomplete");
        }
      });
    },

    _getCreateOptions: function _getCreateOptions() {
      var options = this._super();
      var element = this.element;

      $.each(["min", "max", "step"], function (i, option) {
        var value = element.attr(option);
        if (value != null && value.length) {
          options[option] = value;
        }
      });

      return options;
    },

    _events: {
      keydown: function keydown(event) {
        if (this._start(event) && this._keydown(event)) {
          event.preventDefault();
        }
      },
      keyup: "_stop",
      focus: function focus() {
        this.previous = this.element.val();
      },
      blur: function blur(event) {
        if (this.cancelBlur) {
          delete this.cancelBlur;
          return;
        }

        this._stop();
        this._refresh();
        if (this.previous !== this.element.val()) {
          this._trigger("change", event);
        }
      },
      mousewheel: function mousewheel(event, delta) {
        if (!delta) {
          return;
        }
        if (!this.spinning && !this._start(event)) {
          return false;
        }

        this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
        clearTimeout(this.mousewheelTimer);
        this.mousewheelTimer = this._delay(function () {
          if (this.spinning) {
            this._stop(event);
          }
        }, 100);
        event.preventDefault();
      },
      "mousedown .ui-spinner-button": function mousedownUiSpinnerButton(event) {
        var previous;

        // We never want the buttons to have focus; whenever the user is
        // interacting with the spinner, the focus should be on the input.
        // If the input is focused then this.previous is properly set from
        // when the input first received focus. If the input is not focused
        // then we need to set this.previous based on the value before spinning.
        previous = this.element[0] === $.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val();
        function checkFocus() {
          var isActive = this.element[0] === $.ui.safeActiveElement(this.document[0]);
          if (!isActive) {
            this.element.trigger("focus");
            this.previous = previous;

            // support: IE
            // IE sets focus asynchronously, so we need to check if focus
            // moved off of the input because the user clicked on the button.
            this._delay(function () {
              this.previous = previous;
            });
          }
        }

        // Ensure focus is on (or stays on) the text field
        event.preventDefault();
        checkFocus.call(this);

        // Support: IE
        // IE doesn't prevent moving focus even with event.preventDefault()
        // so we set a flag to know when we should ignore the blur event
        // and check (again) if focus moved off of the input.
        this.cancelBlur = true;
        this._delay(function () {
          delete this.cancelBlur;
          checkFocus.call(this);
        });

        if (this._start(event) === false) {
          return;
        }

        this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
      },
      "mouseup .ui-spinner-button": "_stop",
      "mouseenter .ui-spinner-button": function mouseenterUiSpinnerButton(event) {

        // button will add ui-state-active if mouse was down while mouseleave and kept down
        if (!$(event.currentTarget).hasClass("ui-state-active")) {
          return;
        }

        if (this._start(event) === false) {
          return false;
        }
        this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
      },

      // TODO: do we really want to consider this a stop?
      // shouldn't we just stop the repeater and wait until mouseup before
      // we trigger the stop event?
      "mouseleave .ui-spinner-button": "_stop"
    },

    // Support mobile enhanced option and make backcompat more sane
    _enhance: function _enhance() {
      this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent()

      // Add buttons
      .append("<a></a><a></a>");
    },

    _draw: function _draw() {
      this._enhance();

      this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content");
      this._addClass("ui-spinner-input");

      this.element.attr("role", "spinbutton");

      // Button bindings
      this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", true).button({
        classes: {
          "ui-button": ""
        }
      });

      // TODO: Right now button does not support classes this is already updated in button PR
      this._removeClass(this.buttons, "ui-corner-all");

      this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up");
      this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down");
      this.buttons.first().button({
        "icon": this.options.icons.up,
        "showLabel": false
      });
      this.buttons.last().button({
        "icon": this.options.icons.down,
        "showLabel": false
      });

      // IE 6 doesn't understand height: 50% for the buttons
      // unless the wrapper has an explicit height
      if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * 0.5) && this.uiSpinner.height() > 0) {
        this.uiSpinner.height(this.uiSpinner.height());
      }
    },

    _keydown: function _keydown(event) {
      var options = this.options,
          keyCode = $.ui.keyCode;

      switch (event.keyCode) {
        case keyCode.UP:
          this._repeat(null, 1, event);
          return true;
        case keyCode.DOWN:
          this._repeat(null, -1, event);
          return true;
        case keyCode.PAGE_UP:
          this._repeat(null, options.page, event);
          return true;
        case keyCode.PAGE_DOWN:
          this._repeat(null, -options.page, event);
          return true;
      }

      return false;
    },

    _start: function _start(event) {
      if (!this.spinning && this._trigger("start", event) === false) {
        return false;
      }

      if (!this.counter) {
        this.counter = 1;
      }
      this.spinning = true;
      return true;
    },

    _repeat: function _repeat(i, steps, event) {
      i = i || 500;

      clearTimeout(this.timer);
      this.timer = this._delay(function () {
        this._repeat(40, steps, event);
      }, i);

      this._spin(steps * this.options.step, event);
    },

    _spin: function _spin(step, event) {
      var value = this.value() || 0;

      if (!this.counter) {
        this.counter = 1;
      }

      value = this._adjustValue(value + step * this._increment(this.counter));

      if (!this.spinning || this._trigger("spin", event, { value: value }) !== false) {
        this._value(value);
        this.counter++;
      }
    },

    _increment: function _increment(i) {
      var incremental = this.options.incremental;

      if (incremental) {
        return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);
      }

      return 1;
    },

    _precision: function _precision() {
      var precision = this._precisionOf(this.options.step);
      if (this.options.min !== null) {
        precision = Math.max(precision, this._precisionOf(this.options.min));
      }
      return precision;
    },

    _precisionOf: function _precisionOf(num) {
      var str = num.toString(),
          decimal = str.indexOf(".");
      return decimal === -1 ? 0 : str.length - decimal - 1;
    },

    _adjustValue: function _adjustValue(value) {
      var base,
          aboveMin,
          options = this.options;

      // Make sure we're at a valid step
      // - find out where we are relative to the base (min or 0)
      base = options.min !== null ? options.min : 0;
      aboveMin = value - base;

      // - round to the nearest step
      aboveMin = Math.round(aboveMin / options.step) * options.step;

      // - rounding is based on 0, so adjust back to our base
      value = base + aboveMin;

      // Fix precision from bad JS floating point math
      value = parseFloat(value.toFixed(this._precision()));

      // Clamp the value
      if (options.max !== null && value > options.max) {
        return options.max;
      }
      if (options.min !== null && value < options.min) {
        return options.min;
      }

      return value;
    },

    _stop: function _stop(event) {
      if (!this.spinning) {
        return;
      }

      clearTimeout(this.timer);
      clearTimeout(this.mousewheelTimer);
      this.counter = 0;
      this.spinning = false;
      this._trigger("stop", event);
    },

    _setOption: function _setOption(key, value) {
      var prevValue, first, last;

      if (key === "culture" || key === "numberFormat") {
        prevValue = this._parse(this.element.val());
        this.options[key] = value;
        this.element.val(this._format(prevValue));
        return;
      }

      if (key === "max" || key === "min" || key === "step") {
        if (typeof value === "string") {
          value = this._parse(value);
        }
      }
      if (key === "icons") {
        first = this.buttons.first().find(".ui-icon");
        this._removeClass(first, null, this.options.icons.up);
        this._addClass(first, null, value.up);
        last = this.buttons.last().find(".ui-icon");
        this._removeClass(last, null, this.options.icons.down);
        this._addClass(last, null, value.down);
      }

      this._super(key, value);
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this._super(value);

      this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!value);
      this.element.prop("disabled", !!value);
      this.buttons.button(value ? "disable" : "enable");
    },

    _setOptions: spinnerModifer(function (options) {
      this._super(options);
    }),

    _parse: function _parse(val) {
      if (typeof val === "string" && val !== "") {
        val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;
      }
      return val === "" || isNaN(val) ? null : val;
    },

    _format: function _format(value) {
      if (value === "") {
        return "";
      }
      return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
    },

    _refresh: function _refresh() {
      this.element.attr({
        "aria-valuemin": this.options.min,
        "aria-valuemax": this.options.max,

        // TODO: what should we do with values that can't be parsed?
        "aria-valuenow": this._parse(this.element.val())
      });
    },

    isValid: function isValid() {
      var value = this.value();

      // Null is invalid
      if (value === null) {
        return false;
      }

      // If value gets adjusted, it's invalid
      return value === this._adjustValue(value);
    },

    // Update the value without triggering change
    _value: function _value(value, allowAny) {
      var parsed;
      if (value !== "") {
        parsed = this._parse(value);
        if (parsed !== null) {
          if (!allowAny) {
            parsed = this._adjustValue(parsed);
          }
          value = this._format(parsed);
        }
      }
      this.element.val(value);
      this._refresh();
    },

    _destroy: function _destroy() {
      this.element.prop("disabled", false).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow");

      this.uiSpinner.replaceWith(this.element);
    },

    stepUp: spinnerModifer(function (steps) {
      this._stepUp(steps);
    }),
    _stepUp: function _stepUp(steps) {
      if (this._start()) {
        this._spin((steps || 1) * this.options.step);
        this._stop();
      }
    },

    stepDown: spinnerModifer(function (steps) {
      this._stepDown(steps);
    }),
    _stepDown: function _stepDown(steps) {
      if (this._start()) {
        this._spin((steps || 1) * -this.options.step);
        this._stop();
      }
    },

    pageUp: spinnerModifer(function (pages) {
      this._stepUp((pages || 1) * this.options.page);
    }),

    pageDown: spinnerModifer(function (pages) {
      this._stepDown((pages || 1) * this.options.page);
    }),

    value: function value(newVal) {
      if (!arguments.length) {
        return this._parse(this.element.val());
      }
      spinnerModifer(this._value).call(this, newVal);
    },

    widget: function widget() {
      return this.uiSpinner;
    }
  });

  // DEPRECATED
  // TODO: switch return back to widget declaration at top of file when this is removed
  if ($.uiBackCompat !== false) {

    // Backcompat for spinner html extension points
    $.widget("ui.spinner", $.ui.spinner, {
      _enhance: function _enhance() {
        this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent()

        // Add buttons
        .append(this._buttonHtml());
      },
      _uiSpinnerHtml: function _uiSpinnerHtml() {
        return "<span>";
      },

      _buttonHtml: function _buttonHtml() {
        return "<a></a><a></a>";
      }
    });
  }

  var widgetsSpinner = $.ui.spinner;

  /*!
   * jQuery UI Tabs 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Tabs
  //>>group: Widgets
  //>>description: Transforms a set of container elements into a tab structure.
  //>>docs: http://api.jqueryui.com/tabs/
  //>>demos: http://jqueryui.com/tabs/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/tabs.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.tabs", {
    version: "1.12.1",
    delay: 300,
    options: {
      active: null,
      classes: {
        "ui-tabs": "ui-corner-all",
        "ui-tabs-nav": "ui-corner-all",
        "ui-tabs-panel": "ui-corner-bottom",
        "ui-tabs-tab": "ui-corner-top"
      },
      collapsible: false,
      event: "click",
      heightStyle: "content",
      hide: null,
      show: null,

      // Callbacks
      activate: null,
      beforeActivate: null,
      beforeLoad: null,
      load: null
    },

    _isLocal: function () {
      var rhash = /#.*$/;

      return function (anchor) {
        var anchorUrl, locationUrl;

        anchorUrl = anchor.href.replace(rhash, "");
        locationUrl = location.href.replace(rhash, "");

        // Decoding may throw an error if the URL isn't UTF-8 (#9518)
        try {
          anchorUrl = decodeURIComponent(anchorUrl);
        } catch (error) {}
        try {
          locationUrl = decodeURIComponent(locationUrl);
        } catch (error) {}

        return anchor.hash.length > 1 && anchorUrl === locationUrl;
      };
    }(),

    _create: function _create() {
      var that = this,
          options = this.options;

      this.running = false;

      this._addClass("ui-tabs", "ui-widget ui-widget-content");
      this._toggleClass("ui-tabs-collapsible", null, options.collapsible);

      this._processTabs();
      options.active = this._initialActive();

      // Take disabling tabs via class attribute from HTML
      // into account and update option properly.
      if ($.isArray(options.disabled)) {
        options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function (li) {
          return that.tabs.index(li);
        }))).sort();
      }

      // Check for length avoids error when initializing empty list
      if (this.options.active !== false && this.anchors.length) {
        this.active = this._findActive(options.active);
      } else {
        this.active = $();
      }

      this._refresh();

      if (this.active.length) {
        this.load(options.active);
      }
    },

    _initialActive: function _initialActive() {
      var active = this.options.active,
          collapsible = this.options.collapsible,
          locationHash = location.hash.substring(1);

      if (active === null) {

        // check the fragment identifier in the URL
        if (locationHash) {
          this.tabs.each(function (i, tab) {
            if ($(tab).attr("aria-controls") === locationHash) {
              active = i;
              return false;
            }
          });
        }

        // Check for a tab marked active via a class
        if (active === null) {
          active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
        }

        // No active tab, set to false
        if (active === null || active === -1) {
          active = this.tabs.length ? 0 : false;
        }
      }

      // Handle numbers: negative, out of range
      if (active !== false) {
        active = this.tabs.index(this.tabs.eq(active));
        if (active === -1) {
          active = collapsible ? false : 0;
        }
      }

      // Don't allow collapsible: false and active: false
      if (!collapsible && active === false && this.anchors.length) {
        active = 0;
      }

      return active;
    },

    _getCreateEventData: function _getCreateEventData() {
      return {
        tab: this.active,
        panel: !this.active.length ? $() : this._getPanelForTab(this.active)
      };
    },

    _tabKeydown: function _tabKeydown(event) {
      var focusedTab = $($.ui.safeActiveElement(this.document[0])).closest("li"),
          selectedIndex = this.tabs.index(focusedTab),
          goingForward = true;

      if (this._handlePageNav(event)) {
        return;
      }

      switch (event.keyCode) {
        case $.ui.keyCode.RIGHT:
        case $.ui.keyCode.DOWN:
          selectedIndex++;
          break;
        case $.ui.keyCode.UP:
        case $.ui.keyCode.LEFT:
          goingForward = false;
          selectedIndex--;
          break;
        case $.ui.keyCode.END:
          selectedIndex = this.anchors.length - 1;
          break;
        case $.ui.keyCode.HOME:
          selectedIndex = 0;
          break;
        case $.ui.keyCode.SPACE:

          // Activate only, no collapsing
          event.preventDefault();
          clearTimeout(this.activating);
          this._activate(selectedIndex);
          return;
        case $.ui.keyCode.ENTER:

          // Toggle (cancel delayed activation, allow collapsing)
          event.preventDefault();
          clearTimeout(this.activating);

          // Determine if we should collapse or activate
          this._activate(selectedIndex === this.options.active ? false : selectedIndex);
          return;
        default:
          return;
      }

      // Focus the appropriate tab, based on which key was pressed
      event.preventDefault();
      clearTimeout(this.activating);
      selectedIndex = this._focusNextTab(selectedIndex, goingForward);

      // Navigating with control/command key will prevent automatic activation
      if (!event.ctrlKey && !event.metaKey) {

        // Update aria-selected immediately so that AT think the tab is already selected.
        // Otherwise AT may confuse the user by stating that they need to activate the tab,
        // but the tab will already be activated by the time the announcement finishes.
        focusedTab.attr("aria-selected", "false");
        this.tabs.eq(selectedIndex).attr("aria-selected", "true");

        this.activating = this._delay(function () {
          this.option("active", selectedIndex);
        }, this.delay);
      }
    },

    _panelKeydown: function _panelKeydown(event) {
      if (this._handlePageNav(event)) {
        return;
      }

      // Ctrl+up moves focus to the current tab
      if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
        event.preventDefault();
        this.active.trigger("focus");
      }
    },

    // Alt+page up/down moves focus to the previous/next tab (and activates)
    _handlePageNav: function _handlePageNav(event) {
      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
        this._activate(this._focusNextTab(this.options.active - 1, false));
        return true;
      }
      if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
        this._activate(this._focusNextTab(this.options.active + 1, true));
        return true;
      }
    },

    _findNextTab: function _findNextTab(index, goingForward) {
      var lastTabIndex = this.tabs.length - 1;

      function constrain() {
        if (index > lastTabIndex) {
          index = 0;
        }
        if (index < 0) {
          index = lastTabIndex;
        }
        return index;
      }

      while ($.inArray(constrain(), this.options.disabled) !== -1) {
        index = goingForward ? index + 1 : index - 1;
      }

      return index;
    },

    _focusNextTab: function _focusNextTab(index, goingForward) {
      index = this._findNextTab(index, goingForward);
      this.tabs.eq(index).trigger("focus");
      return index;
    },

    _setOption: function _setOption(key, value) {
      if (key === "active") {

        // _activate() will handle invalid values and update this.options
        this._activate(value);
        return;
      }

      this._super(key, value);

      if (key === "collapsible") {
        this._toggleClass("ui-tabs-collapsible", null, value);

        // Setting collapsible: false while collapsed; open first panel
        if (!value && this.options.active === false) {
          this._activate(0);
        }
      }

      if (key === "event") {
        this._setupEvents(value);
      }

      if (key === "heightStyle") {
        this._setupHeightStyle(value);
      }
    },

    _sanitizeSelector: function _sanitizeSelector(hash) {
      return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
    },

    refresh: function refresh() {
      var options = this.options,
          lis = this.tablist.children(":has(a[href])");

      // Get disabled tabs from class attribute from HTML
      // this will get converted to a boolean if needed in _refresh()
      options.disabled = $.map(lis.filter(".ui-state-disabled"), function (tab) {
        return lis.index(tab);
      });

      this._processTabs();

      // Was collapsed or no tabs
      if (options.active === false || !this.anchors.length) {
        options.active = false;
        this.active = $();

        // was active, but active tab is gone
      } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {

        // all remaining tabs are disabled
        if (this.tabs.length === options.disabled.length) {
          options.active = false;
          this.active = $();

          // activate previous tab
        } else {
          this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
        }

        // was active, active tab still exists
      } else {

        // make sure active index is correct
        options.active = this.tabs.index(this.active);
      }

      this._refresh();
    },

    _refresh: function _refresh() {
      this._setOptionDisabled(this.options.disabled);
      this._setupEvents(this.options.event);
      this._setupHeightStyle(this.options.heightStyle);

      this.tabs.not(this.active).attr({
        "aria-selected": "false",
        "aria-expanded": "false",
        tabIndex: -1
      });
      this.panels.not(this._getPanelForTab(this.active)).hide().attr({
        "aria-hidden": "true"
      });

      // Make sure one tab is in the tab order
      if (!this.active.length) {
        this.tabs.eq(0).attr("tabIndex", 0);
      } else {
        this.active.attr({
          "aria-selected": "true",
          "aria-expanded": "true",
          tabIndex: 0
        });
        this._addClass(this.active, "ui-tabs-active", "ui-state-active");
        this._getPanelForTab(this.active).show().attr({
          "aria-hidden": "false"
        });
      }
    },

    _processTabs: function _processTabs() {
      var that = this,
          prevTabs = this.tabs,
          prevAnchors = this.anchors,
          prevPanels = this.panels;

      this.tablist = this._getList().attr("role", "tablist");
      this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header");

      // Prevent users from focusing disabled tabs via click
      this.tablist.on("mousedown" + this.eventNamespace, "> li", function (event) {
        if ($(this).is(".ui-state-disabled")) {
          event.preventDefault();
        }
      })

      // Support: IE <9
      // Preventing the default action in mousedown doesn't prevent IE
      // from focusing the element, so if the anchor gets focused, blur.
      // We don't have to worry about focusing the previously focused
      // element since clicking on a non-focusable element should focus
      // the body anyway.
      .on("focus" + this.eventNamespace, ".ui-tabs-anchor", function () {
        if ($(this).closest("li").is(".ui-state-disabled")) {
          this.blur();
        }
      });

      this.tabs = this.tablist.find("> li:has(a[href])").attr({
        role: "tab",
        tabIndex: -1
      });
      this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default");

      this.anchors = this.tabs.map(function () {
        return $("a", this)[0];
      }).attr({
        role: "presentation",
        tabIndex: -1
      });
      this._addClass(this.anchors, "ui-tabs-anchor");

      this.panels = $();

      this.anchors.each(function (i, anchor) {
        var selector,
            panel,
            panelId,
            anchorId = $(anchor).uniqueId().attr("id"),
            tab = $(anchor).closest("li"),
            originalAriaControls = tab.attr("aria-controls");

        // Inline tab
        if (that._isLocal(anchor)) {
          selector = anchor.hash;
          panelId = selector.substring(1);
          panel = that.element.find(that._sanitizeSelector(selector));

          // remote tab
        } else {

          // If the tab doesn't already have aria-controls,
          // generate an id by using a throw-away element
          panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
          selector = "#" + panelId;
          panel = that.element.find(selector);
          if (!panel.length) {
            panel = that._createPanel(panelId);
            panel.insertAfter(that.panels[i - 1] || that.tablist);
          }
          panel.attr("aria-live", "polite");
        }

        if (panel.length) {
          that.panels = that.panels.add(panel);
        }
        if (originalAriaControls) {
          tab.data("ui-tabs-aria-controls", originalAriaControls);
        }
        tab.attr({
          "aria-controls": panelId,
          "aria-labelledby": anchorId
        });
        panel.attr("aria-labelledby", anchorId);
      });

      this.panels.attr("role", "tabpanel");
      this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content");

      // Avoid memory leaks (#10056)
      if (prevTabs) {
        this._off(prevTabs.not(this.tabs));
        this._off(prevAnchors.not(this.anchors));
        this._off(prevPanels.not(this.panels));
      }
    },

    // Allow overriding how to find the list for rare usage scenarios (#7715)
    _getList: function _getList() {
      return this.tablist || this.element.find("ol, ul").eq(0);
    },

    _createPanel: function _createPanel(id) {
      return $("<div>").attr("id", id).data("ui-tabs-destroy", true);
    },

    _setOptionDisabled: function _setOptionDisabled(disabled) {
      var currentItem, li, i;

      if ($.isArray(disabled)) {
        if (!disabled.length) {
          disabled = false;
        } else if (disabled.length === this.anchors.length) {
          disabled = true;
        }
      }

      // Disable tabs
      for (i = 0; li = this.tabs[i]; i++) {
        currentItem = $(li);
        if (disabled === true || $.inArray(i, disabled) !== -1) {
          currentItem.attr("aria-disabled", "true");
          this._addClass(currentItem, null, "ui-state-disabled");
        } else {
          currentItem.removeAttr("aria-disabled");
          this._removeClass(currentItem, null, "ui-state-disabled");
        }
      }

      this.options.disabled = disabled;

      this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, disabled === true);
    },

    _setupEvents: function _setupEvents(event) {
      var events = {};
      if (event) {
        $.each(event.split(" "), function (index, eventName) {
          events[eventName] = "_eventHandler";
        });
      }

      this._off(this.anchors.add(this.tabs).add(this.panels));

      // Always prevent the default action, even when disabled
      this._on(true, this.anchors, {
        click: function click(event) {
          event.preventDefault();
        }
      });
      this._on(this.anchors, events);
      this._on(this.tabs, { keydown: "_tabKeydown" });
      this._on(this.panels, { keydown: "_panelKeydown" });

      this._focusable(this.tabs);
      this._hoverable(this.tabs);
    },

    _setupHeightStyle: function _setupHeightStyle(heightStyle) {
      var maxHeight,
          parent = this.element.parent();

      if (heightStyle === "fill") {
        maxHeight = parent.height();
        maxHeight -= this.element.outerHeight() - this.element.height();

        this.element.siblings(":visible").each(function () {
          var elem = $(this),
              position = elem.css("position");

          if (position === "absolute" || position === "fixed") {
            return;
          }
          maxHeight -= elem.outerHeight(true);
        });

        this.element.children().not(this.panels).each(function () {
          maxHeight -= $(this).outerHeight(true);
        });

        this.panels.each(function () {
          $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
        }).css("overflow", "auto");
      } else if (heightStyle === "auto") {
        maxHeight = 0;
        this.panels.each(function () {
          maxHeight = Math.max(maxHeight, $(this).height("").height());
        }).height(maxHeight);
      }
    },

    _eventHandler: function _eventHandler(event) {
      var options = this.options,
          active = this.active,
          anchor = $(event.currentTarget),
          tab = anchor.closest("li"),
          clickedIsActive = tab[0] === active[0],
          collapsing = clickedIsActive && options.collapsible,
          toShow = collapsing ? $() : this._getPanelForTab(tab),
          toHide = !active.length ? $() : this._getPanelForTab(active),
          eventData = {
        oldTab: active,
        oldPanel: toHide,
        newTab: collapsing ? $() : tab,
        newPanel: toShow
      };

      event.preventDefault();

      if (tab.hasClass("ui-state-disabled") ||

      // tab is already loading
      tab.hasClass("ui-tabs-loading") ||

      // can't switch durning an animation
      this.running ||

      // click on active header, but not collapsible
      clickedIsActive && !options.collapsible ||

      // allow canceling activation
      this._trigger("beforeActivate", event, eventData) === false) {
        return;
      }

      options.active = collapsing ? false : this.tabs.index(tab);

      this.active = clickedIsActive ? $() : tab;
      if (this.xhr) {
        this.xhr.abort();
      }

      if (!toHide.length && !toShow.length) {
        $.error("jQuery UI Tabs: Mismatching fragment identifier.");
      }

      if (toShow.length) {
        this.load(this.tabs.index(tab), event);
      }
      this._toggle(event, eventData);
    },

    // Handles show/hide for selecting tabs
    _toggle: function _toggle(event, eventData) {
      var that = this,
          toShow = eventData.newPanel,
          toHide = eventData.oldPanel;

      this.running = true;

      function complete() {
        that.running = false;
        that._trigger("activate", event, eventData);
      }

      function show() {
        that._addClass(eventData.newTab.closest("li"), "ui-tabs-active", "ui-state-active");

        if (toShow.length && that.options.show) {
          that._show(toShow, that.options.show, complete);
        } else {
          toShow.show();
          complete();
        }
      }

      // Start out by hiding, then showing, then completing
      if (toHide.length && this.options.hide) {
        this._hide(toHide, this.options.hide, function () {
          that._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active");
          show();
        });
      } else {
        this._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active");
        toHide.hide();
        show();
      }

      toHide.attr("aria-hidden", "true");
      eventData.oldTab.attr({
        "aria-selected": "false",
        "aria-expanded": "false"
      });

      // If we're switching tabs, remove the old tab from the tab order.
      // If we're opening from collapsed state, remove the previous tab from the tab order.
      // If we're collapsing, then keep the collapsing tab in the tab order.
      if (toShow.length && toHide.length) {
        eventData.oldTab.attr("tabIndex", -1);
      } else if (toShow.length) {
        this.tabs.filter(function () {
          return $(this).attr("tabIndex") === 0;
        }).attr("tabIndex", -1);
      }

      toShow.attr("aria-hidden", "false");
      eventData.newTab.attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      });
    },

    _activate: function _activate(index) {
      var anchor,
          active = this._findActive(index);

      // Trying to activate the already active panel
      if (active[0] === this.active[0]) {
        return;
      }

      // Trying to collapse, simulate a click on the current active header
      if (!active.length) {
        active = this.active;
      }

      anchor = active.find(".ui-tabs-anchor")[0];
      this._eventHandler({
        target: anchor,
        currentTarget: anchor,
        preventDefault: $.noop
      });
    },

    _findActive: function _findActive(index) {
      return index === false ? $() : this.tabs.eq(index);
    },

    _getIndex: function _getIndex(index) {

      // meta-function to give users option to provide a href string instead of a numerical index.
      if (typeof index === "string") {
        index = this.anchors.index(this.anchors.filter("[href$='" + $.ui.escapeSelector(index) + "']"));
      }

      return index;
    },

    _destroy: function _destroy() {
      if (this.xhr) {
        this.xhr.abort();
      }

      this.tablist.removeAttr("role").off(this.eventNamespace);

      this.anchors.removeAttr("role tabIndex").removeUniqueId();

      this.tabs.add(this.panels).each(function () {
        if ($.data(this, "ui-tabs-destroy")) {
          $(this).remove();
        } else {
          $(this).removeAttr("role tabIndex " + "aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");
        }
      });

      this.tabs.each(function () {
        var li = $(this),
            prev = li.data("ui-tabs-aria-controls");
        if (prev) {
          li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls");
        } else {
          li.removeAttr("aria-controls");
        }
      });

      this.panels.show();

      if (this.options.heightStyle !== "content") {
        this.panels.css("height", "");
      }
    },

    enable: function enable(index) {
      var disabled = this.options.disabled;
      if (disabled === false) {
        return;
      }

      if (index === undefined) {
        disabled = false;
      } else {
        index = this._getIndex(index);
        if ($.isArray(disabled)) {
          disabled = $.map(disabled, function (num) {
            return num !== index ? num : null;
          });
        } else {
          disabled = $.map(this.tabs, function (li, num) {
            return num !== index ? num : null;
          });
        }
      }
      this._setOptionDisabled(disabled);
    },

    disable: function disable(index) {
      var disabled = this.options.disabled;
      if (disabled === true) {
        return;
      }

      if (index === undefined) {
        disabled = true;
      } else {
        index = this._getIndex(index);
        if ($.inArray(index, disabled) !== -1) {
          return;
        }
        if ($.isArray(disabled)) {
          disabled = $.merge([index], disabled).sort();
        } else {
          disabled = [index];
        }
      }
      this._setOptionDisabled(disabled);
    },

    load: function load(index, event) {
      index = this._getIndex(index);
      var that = this,
          tab = this.tabs.eq(index),
          anchor = tab.find(".ui-tabs-anchor"),
          panel = this._getPanelForTab(tab),
          eventData = {
        tab: tab,
        panel: panel
      },
          complete = function complete(jqXHR, status) {
        if (status === "abort") {
          that.panels.stop(false, true);
        }

        that._removeClass(tab, "ui-tabs-loading");
        panel.removeAttr("aria-busy");

        if (jqXHR === that.xhr) {
          delete that.xhr;
        }
      };

      // Not remote
      if (this._isLocal(anchor[0])) {
        return;
      }

      this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));

      // Support: jQuery <1.8
      // jQuery <1.8 returns false if the request is canceled in beforeSend,
      // but as of 1.8, $.ajax() always returns a jqXHR object.
      if (this.xhr && this.xhr.statusText !== "canceled") {
        this._addClass(tab, "ui-tabs-loading");
        panel.attr("aria-busy", "true");

        this.xhr.done(function (response, status, jqXHR) {

          // support: jQuery <1.8
          // http://bugs.jquery.com/ticket/11778
          setTimeout(function () {
            panel.html(response);
            that._trigger("load", event, eventData);

            complete(jqXHR, status);
          }, 1);
        }).fail(function (jqXHR, status) {

          // support: jQuery <1.8
          // http://bugs.jquery.com/ticket/11778
          setTimeout(function () {
            complete(jqXHR, status);
          }, 1);
        });
      }
    },

    _ajaxSettings: function _ajaxSettings(anchor, event, eventData) {
      var that = this;
      return {

        // Support: IE <11 only
        // Strip any hash that exists to prevent errors with the Ajax request
        url: anchor.attr("href").replace(/#.*$/, ""),
        beforeSend: function beforeSend(jqXHR, settings) {
          return that._trigger("beforeLoad", event, $.extend({ jqXHR: jqXHR, ajaxSettings: settings }, eventData));
        }
      };
    },

    _getPanelForTab: function _getPanelForTab(tab) {
      var id = $(tab).attr("aria-controls");
      return this.element.find(this._sanitizeSelector("#" + id));
    }
  });

  // DEPRECATED
  // TODO: Switch return back to widget declaration at top of file when this is removed
  if ($.uiBackCompat !== false) {

    // Backcompat for ui-tab class (now ui-tabs-tab)
    $.widget("ui.tabs", $.ui.tabs, {
      _processTabs: function _processTabs() {
        this._superApply(arguments);
        this._addClass(this.tabs, "ui-tab");
      }
    });
  }

  var widgetsTabs = $.ui.tabs;

  /*!
   * jQuery UI Tooltip 1.12.1
   * http://jqueryui.com
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   */

  //>>label: Tooltip
  //>>group: Widgets
  //>>description: Shows additional information for any element on hover or focus.
  //>>docs: http://api.jqueryui.com/tooltip/
  //>>demos: http://jqueryui.com/tooltip/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/tooltip.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget("ui.tooltip", {
    version: "1.12.1",
    options: {
      classes: {
        "ui-tooltip": "ui-corner-all ui-widget-shadow"
      },
      content: function content() {

        // support: IE<9, Opera in jQuery <1.7
        // .text() can't accept undefined, so coerce to a string
        var title = $(this).attr("title") || "";

        // Escape title, since we're going from an attribute to raw HTML
        return $("<a>").text(title).html();
      },
      hide: true,

      // Disabled elements have inconsistent behavior across browsers (#8661)
      items: "[title]:not([disabled])",
      position: {
        my: "left top+15",
        at: "left bottom",
        collision: "flipfit flip"
      },
      show: true,
      track: false,

      // Callbacks
      close: null,
      open: null
    },

    _addDescribedBy: function _addDescribedBy(elem, id) {
      var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
      describedby.push(id);
      elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
    },

    _removeDescribedBy: function _removeDescribedBy(elem) {
      var id = elem.data("ui-tooltip-id"),
          describedby = (elem.attr("aria-describedby") || "").split(/\s+/),
          index = $.inArray(id, describedby);

      if (index !== -1) {
        describedby.splice(index, 1);
      }

      elem.removeData("ui-tooltip-id");
      describedby = $.trim(describedby.join(" "));
      if (describedby) {
        elem.attr("aria-describedby", describedby);
      } else {
        elem.removeAttr("aria-describedby");
      }
    },

    _create: function _create() {
      this._on({
        mouseover: "open",
        focusin: "open"
      });

      // IDs of generated tooltips, needed for destroy
      this.tooltips = {};

      // IDs of parent tooltips where we removed the title attribute
      this.parents = {};

      // Append the aria-live region so tooltips announce correctly
      this.liveRegion = $("<div>").attr({
        role: "log",
        "aria-live": "assertive",
        "aria-relevant": "additions"
      }).appendTo(this.document[0].body);
      this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");

      this.disabledTitles = $([]);
    },

    _setOption: function _setOption(key, value) {
      var that = this;

      this._super(key, value);

      if (key === "content") {
        $.each(this.tooltips, function (id, tooltipData) {
          that._updateContent(tooltipData.element);
        });
      }
    },

    _setOptionDisabled: function _setOptionDisabled(value) {
      this[value ? "_disable" : "_enable"]();
    },

    _disable: function _disable() {
      var that = this;

      // Close open tooltips
      $.each(this.tooltips, function (id, tooltipData) {
        var event = $.Event("blur");
        event.target = event.currentTarget = tooltipData.element[0];
        that.close(event, true);
      });

      // Remove title attributes to prevent native tooltips
      this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function () {
        var element = $(this);
        if (element.is("[title]")) {
          return element.data("ui-tooltip-title", element.attr("title")).removeAttr("title");
        }
      }));
    },

    _enable: function _enable() {

      // restore title attributes
      this.disabledTitles.each(function () {
        var element = $(this);
        if (element.data("ui-tooltip-title")) {
          element.attr("title", element.data("ui-tooltip-title"));
        }
      });
      this.disabledTitles = $([]);
    },

    open: function open(event) {
      var that = this,
          target = $(event ? event.target : this.element)

      // we need closest here due to mouseover bubbling,
      // but always pointing at the same event target
      .closest(this.options.items);

      // No element to show a tooltip for or the tooltip is already open
      if (!target.length || target.data("ui-tooltip-id")) {
        return;
      }

      if (target.attr("title")) {
        target.data("ui-tooltip-title", target.attr("title"));
      }

      target.data("ui-tooltip-open", true);

      // Kill parent tooltips, custom or native, for hover
      if (event && event.type === "mouseover") {
        target.parents().each(function () {
          var parent = $(this),
              blurEvent;
          if (parent.data("ui-tooltip-open")) {
            blurEvent = $.Event("blur");
            blurEvent.target = blurEvent.currentTarget = this;
            that.close(blurEvent, true);
          }
          if (parent.attr("title")) {
            parent.uniqueId();
            that.parents[this.id] = {
              element: this,
              title: parent.attr("title")
            };
            parent.attr("title", "");
          }
        });
      }

      this._registerCloseHandlers(event, target);
      this._updateContent(target, event);
    },

    _updateContent: function _updateContent(target, event) {
      var content,
          contentOption = this.options.content,
          that = this,
          eventType = event ? event.type : null;

      if (typeof contentOption === "string" || contentOption.nodeType || contentOption.jquery) {
        return this._open(event, target, contentOption);
      }

      content = contentOption.call(target[0], function (response) {

        // IE may instantly serve a cached response for ajax requests
        // delay this call to _open so the other call to _open runs first
        that._delay(function () {

          // Ignore async response if tooltip was closed already
          if (!target.data("ui-tooltip-open")) {
            return;
          }

          // JQuery creates a special event for focusin when it doesn't
          // exist natively. To improve performance, the native event
          // object is reused and the type is changed. Therefore, we can't
          // rely on the type being correct after the event finished
          // bubbling, so we set it back to the previous value. (#8740)
          if (event) {
            event.type = eventType;
          }
          this._open(event, target, response);
        });
      });
      if (content) {
        this._open(event, target, content);
      }
    },

    _open: function _open(event, target, content) {
      var tooltipData,
          tooltip,
          delayedShow,
          a11yContent,
          positionOption = $.extend({}, this.options.position);

      if (!content) {
        return;
      }

      // Content can be updated multiple times. If the tooltip already
      // exists, then just update the content and bail.
      tooltipData = this._find(target);
      if (tooltipData) {
        tooltipData.tooltip.find(".ui-tooltip-content").html(content);
        return;
      }

      // If we have a title, clear it to prevent the native tooltip
      // we have to check first to avoid defining a title if none exists
      // (we don't want to cause an element to start matching [title])
      //
      // We use removeAttr only for key events, to allow IE to export the correct
      // accessible attributes. For mouse events, set to empty string to avoid
      // native tooltip showing up (happens only when removing inside mouseover).
      if (target.is("[title]")) {
        if (event && event.type === "mouseover") {
          target.attr("title", "");
        } else {
          target.removeAttr("title");
        }
      }

      tooltipData = this._tooltip(target);
      tooltip = tooltipData.tooltip;
      this._addDescribedBy(target, tooltip.attr("id"));
      tooltip.find(".ui-tooltip-content").html(content);

      // Support: Voiceover on OS X, JAWS on IE <= 9
      // JAWS announces deletions even when aria-relevant="additions"
      // Voiceover will sometimes re-read the entire log region's contents from the beginning
      this.liveRegion.children().hide();
      a11yContent = $("<div>").html(tooltip.find(".ui-tooltip-content").html());
      a11yContent.removeAttr("name").find("[name]").removeAttr("name");
      a11yContent.removeAttr("id").find("[id]").removeAttr("id");
      a11yContent.appendTo(this.liveRegion);

      function position(event) {
        positionOption.of = event;
        if (tooltip.is(":hidden")) {
          return;
        }
        tooltip.position(positionOption);
      }
      if (this.options.track && event && /^mouse/.test(event.type)) {
        this._on(this.document, {
          mousemove: position
        });

        // trigger once to override element-relative positioning
        position(event);
      } else {
        tooltip.position($.extend({
          of: target
        }, this.options.position));
      }

      tooltip.hide();

      this._show(tooltip, this.options.show);

      // Handle tracking tooltips that are shown with a delay (#8644). As soon
      // as the tooltip is visible, position the tooltip using the most recent
      // event.
      // Adds the check to add the timers only when both delay and track options are set (#14682)
      if (this.options.track && this.options.show && this.options.show.delay) {
        delayedShow = this.delayedShow = setInterval(function () {
          if (tooltip.is(":visible")) {
            position(positionOption.of);
            clearInterval(delayedShow);
          }
        }, $.fx.interval);
      }

      this._trigger("open", event, { tooltip: tooltip });
    },

    _registerCloseHandlers: function _registerCloseHandlers(event, target) {
      var events = {
        keyup: function keyup(event) {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            var fakeEvent = $.Event(event);
            fakeEvent.currentTarget = target[0];
            this.close(fakeEvent, true);
          }
        }
      };

      // Only bind remove handler for delegated targets. Non-delegated
      // tooltips will handle this in destroy.
      if (target[0] !== this.element[0]) {
        events.remove = function () {
          this._removeTooltip(this._find(target).tooltip);
        };
      }

      if (!event || event.type === "mouseover") {
        events.mouseleave = "close";
      }
      if (!event || event.type === "focusin") {
        events.focusout = "close";
      }
      this._on(true, target, events);
    },

    close: function close(event) {
      var tooltip,
          that = this,
          target = $(event ? event.currentTarget : this.element),
          tooltipData = this._find(target);

      // The tooltip may already be closed
      if (!tooltipData) {

        // We set ui-tooltip-open immediately upon open (in open()), but only set the
        // additional data once there's actually content to show (in _open()). So even if the
        // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
        // the period between open() and _open().
        target.removeData("ui-tooltip-open");
        return;
      }

      tooltip = tooltipData.tooltip;

      // Disabling closes the tooltip, so we need to track when we're closing
      // to avoid an infinite loop in case the tooltip becomes disabled on close
      if (tooltipData.closing) {
        return;
      }

      // Clear the interval for delayed tracking tooltips
      clearInterval(this.delayedShow);

      // Only set title if we had one before (see comment in _open())
      // If the title attribute has changed since open(), don't restore
      if (target.data("ui-tooltip-title") && !target.attr("title")) {
        target.attr("title", target.data("ui-tooltip-title"));
      }

      this._removeDescribedBy(target);

      tooltipData.hiding = true;
      tooltip.stop(true);
      this._hide(tooltip, this.options.hide, function () {
        that._removeTooltip($(this));
      });

      target.removeData("ui-tooltip-open");
      this._off(target, "mouseleave focusout keyup");

      // Remove 'remove' binding only on delegated targets
      if (target[0] !== this.element[0]) {
        this._off(target, "remove");
      }
      this._off(this.document, "mousemove");

      if (event && event.type === "mouseleave") {
        $.each(this.parents, function (id, parent) {
          $(parent.element).attr("title", parent.title);
          delete that.parents[id];
        });
      }

      tooltipData.closing = true;
      this._trigger("close", event, { tooltip: tooltip });
      if (!tooltipData.hiding) {
        tooltipData.closing = false;
      }
    },

    _tooltip: function _tooltip(element) {
      var tooltip = $("<div>").attr("role", "tooltip"),
          content = $("<div>").appendTo(tooltip),
          id = tooltip.uniqueId().attr("id");

      this._addClass(content, "ui-tooltip-content");
      this._addClass(tooltip, "ui-tooltip", "ui-widget ui-widget-content");

      tooltip.appendTo(this._appendTo(element));

      return this.tooltips[id] = {
        element: element,
        tooltip: tooltip
      };
    },

    _find: function _find(target) {
      var id = target.data("ui-tooltip-id");
      return id ? this.tooltips[id] : null;
    },

    _removeTooltip: function _removeTooltip(tooltip) {
      tooltip.remove();
      delete this.tooltips[tooltip.attr("id")];
    },

    _appendTo: function _appendTo(target) {
      var element = target.closest(".ui-front, dialog");

      if (!element.length) {
        element = this.document[0].body;
      }

      return element;
    },

    _destroy: function _destroy() {
      var that = this;

      // Close open tooltips
      $.each(this.tooltips, function (id, tooltipData) {

        // Delegate to close method to handle common cleanup
        var event = $.Event("blur"),
            element = tooltipData.element;
        event.target = event.currentTarget = element[0];
        that.close(event, true);

        // Remove immediately; destroying an open tooltip doesn't use the
        // hide animation
        $("#" + id).remove();

        // Restore the title
        if (element.data("ui-tooltip-title")) {

          // If the title attribute has changed since open(), don't restore
          if (!element.attr("title")) {
            element.attr("title", element.data("ui-tooltip-title"));
          }
          element.removeData("ui-tooltip-title");
        }
      });
      this.liveRegion.remove();
    }
  });

  // DEPRECATED
  // TODO: Switch return back to widget declaration at top of file when this is removed
  if ($.uiBackCompat !== false) {

    // Backcompat for tooltipClass option
    $.widget("ui.tooltip", $.ui.tooltip, {
      options: {
        tooltipClass: null
      },
      _tooltip: function _tooltip() {
        var tooltipData = this._superApply(arguments);
        if (this.options.tooltipClass) {
          tooltipData.tooltip.addClass(this.options.tooltipClass);
        }
        return tooltipData;
      }
    });
  }

  var widgetsTooltip = $.ui.tooltip;
});
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//! moment.js
//! version : 2.10.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function (a, b) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.moment = b();
}(this, function () {
    "use strict";
    function a() {
        return Dc.apply(null, arguments);
    }function b(a) {
        Dc = a;
    }function c(a) {
        return "[object Array]" === Object.prototype.toString.call(a);
    }function d(a) {
        return a instanceof Date || "[object Date]" === Object.prototype.toString.call(a);
    }function e(a, b) {
        var c,
            d = [];for (c = 0; c < a.length; ++c) {
            d.push(b(a[c], c));
        }return d;
    }function f(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }function g(a, b) {
        for (var c in b) {
            f(b, c) && (a[c] = b[c]);
        }return f(b, "toString") && (a.toString = b.toString), f(b, "valueOf") && (a.valueOf = b.valueOf), a;
    }function h(a, b, c, d) {
        return za(a, b, c, d, !0).utc();
    }function i() {
        return { empty: !1, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: !1, invalidMonth: null, invalidFormat: !1, userInvalidated: !1, iso: !1 };
    }function j(a) {
        return null == a._pf && (a._pf = i()), a._pf;
    }function k(a) {
        if (null == a._isValid) {
            var b = j(a);a._isValid = !isNaN(a._d.getTime()) && b.overflow < 0 && !b.empty && !b.invalidMonth && !b.nullInput && !b.invalidFormat && !b.userInvalidated, a._strict && (a._isValid = a._isValid && 0 === b.charsLeftOver && 0 === b.unusedTokens.length && void 0 === b.bigHour);
        }return a._isValid;
    }function l(a) {
        var b = h(0 / 0);return null != a ? g(j(b), a) : j(b).userInvalidated = !0, b;
    }function m(a, b) {
        var c, d, e;if ("undefined" != typeof b._isAMomentObject && (a._isAMomentObject = b._isAMomentObject), "undefined" != typeof b._i && (a._i = b._i), "undefined" != typeof b._f && (a._f = b._f), "undefined" != typeof b._l && (a._l = b._l), "undefined" != typeof b._strict && (a._strict = b._strict), "undefined" != typeof b._tzm && (a._tzm = b._tzm), "undefined" != typeof b._isUTC && (a._isUTC = b._isUTC), "undefined" != typeof b._offset && (a._offset = b._offset), "undefined" != typeof b._pf && (a._pf = j(b)), "undefined" != typeof b._locale && (a._locale = b._locale), Fc.length > 0) for (c in Fc) {
            d = Fc[c], e = b[d], "undefined" != typeof e && (a[d] = e);
        }return a;
    }function n(b) {
        m(this, b), this._d = new Date(+b._d), Gc === !1 && (Gc = !0, a.updateOffset(this), Gc = !1);
    }function o(a) {
        return a instanceof n || null != a && null != a._isAMomentObject;
    }function p(a) {
        var b = +a,
            c = 0;return 0 !== b && isFinite(b) && (c = b >= 0 ? Math.floor(b) : Math.ceil(b)), c;
    }function q(a, b, c) {
        var d,
            e = Math.min(a.length, b.length),
            f = Math.abs(a.length - b.length),
            g = 0;for (d = 0; e > d; d++) {
            (c && a[d] !== b[d] || !c && p(a[d]) !== p(b[d])) && g++;
        }return g + f;
    }function r() {}function s(a) {
        return a ? a.toLowerCase().replace("_", "-") : a;
    }function t(a) {
        for (var b, c, d, e, f = 0; f < a.length;) {
            for (e = s(a[f]).split("-"), b = e.length, c = s(a[f + 1]), c = c ? c.split("-") : null; b > 0;) {
                if (d = u(e.slice(0, b).join("-"))) return d;if (c && c.length >= b && q(e, c, !0) >= b - 1) break;b--;
            }f++;
        }return null;
    }function u(a) {
        var b = null;if (!Hc[a] && "undefined" != typeof module && module && module.exports) try {
            b = Ec._abbr, require("./locale/" + a), v(b);
        } catch (c) {}return Hc[a];
    }function v(a, b) {
        var c;return a && (c = "undefined" == typeof b ? x(a) : w(a, b), c && (Ec = c)), Ec._abbr;
    }function w(a, b) {
        return null !== b ? (b.abbr = a, Hc[a] || (Hc[a] = new r()), Hc[a].set(b), v(a), Hc[a]) : (delete Hc[a], null);
    }function x(a) {
        var b;if (a && a._locale && a._locale._abbr && (a = a._locale._abbr), !a) return Ec;if (!c(a)) {
            if (b = u(a)) return b;a = [a];
        }return t(a);
    }function y(a, b) {
        var c = a.toLowerCase();Ic[c] = Ic[c + "s"] = Ic[b] = a;
    }function z(a) {
        return "string" == typeof a ? Ic[a] || Ic[a.toLowerCase()] : void 0;
    }function A(a) {
        var b,
            c,
            d = {};for (c in a) {
            f(a, c) && (b = z(c), b && (d[b] = a[c]));
        }return d;
    }function B(b, c) {
        return function (d) {
            return null != d ? (D(this, b, d), a.updateOffset(this, c), this) : C(this, b);
        };
    }function C(a, b) {
        return a._d["get" + (a._isUTC ? "UTC" : "") + b]();
    }function D(a, b, c) {
        return a._d["set" + (a._isUTC ? "UTC" : "") + b](c);
    }function E(a, b) {
        var c;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) for (c in a) {
            this.set(c, a[c]);
        } else if (a = z(a), "function" == typeof this[a]) return this[a](b);return this;
    }function F(a, b, c) {
        for (var d = "" + Math.abs(a), e = a >= 0; d.length < b;) {
            d = "0" + d;
        }return (e ? c ? "+" : "" : "-") + d;
    }function G(a, b, c, d) {
        var e = d;"string" == typeof d && (e = function e() {
            return this[d]();
        }), a && (Mc[a] = e), b && (Mc[b[0]] = function () {
            return F(e.apply(this, arguments), b[1], b[2]);
        }), c && (Mc[c] = function () {
            return this.localeData().ordinal(e.apply(this, arguments), a);
        });
    }function H(a) {
        return a.match(/\[[\s\S]/) ? a.replace(/^\[|\]$/g, "") : a.replace(/\\/g, "");
    }function I(a) {
        var b,
            c,
            d = a.match(Jc);for (b = 0, c = d.length; c > b; b++) {
            Mc[d[b]] ? d[b] = Mc[d[b]] : d[b] = H(d[b]);
        }return function (e) {
            var f = "";for (b = 0; c > b; b++) {
                f += d[b] instanceof Function ? d[b].call(e, a) : d[b];
            }return f;
        };
    }function J(a, b) {
        return a.isValid() ? (b = K(b, a.localeData()), Lc[b] || (Lc[b] = I(b)), Lc[b](a)) : a.localeData().invalidDate();
    }function K(a, b) {
        function c(a) {
            return b.longDateFormat(a) || a;
        }var d = 5;for (Kc.lastIndex = 0; d >= 0 && Kc.test(a);) {
            a = a.replace(Kc, c), Kc.lastIndex = 0, d -= 1;
        }return a;
    }function L(a, b, c) {
        _c[a] = "function" == typeof b ? b : function (a) {
            return a && c ? c : b;
        };
    }function M(a, b) {
        return f(_c, a) ? _c[a](b._strict, b._locale) : new RegExp(N(a));
    }function N(a) {
        return a.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (a, b, c, d, e) {
            return b || c || d || e;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }function O(a, b) {
        var c,
            d = b;for ("string" == typeof a && (a = [a]), "number" == typeof b && (d = function d(a, c) {
            c[b] = p(a);
        }), c = 0; c < a.length; c++) {
            ad[a[c]] = d;
        }
    }function P(a, b) {
        O(a, function (a, c, d, e) {
            d._w = d._w || {}, b(a, d._w, d, e);
        });
    }function Q(a, b, c) {
        null != b && f(ad, a) && ad[a](b, c._a, c, a);
    }function R(a, b) {
        return new Date(Date.UTC(a, b + 1, 0)).getUTCDate();
    }function S(a) {
        return this._months[a.month()];
    }function T(a) {
        return this._monthsShort[a.month()];
    }function U(a, b, c) {
        var d, e, f;for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), d = 0; 12 > d; d++) {
            if (e = h([2e3, d]), c && !this._longMonthsParse[d] && (this._longMonthsParse[d] = new RegExp("^" + this.months(e, "").replace(".", "") + "$", "i"), this._shortMonthsParse[d] = new RegExp("^" + this.monthsShort(e, "").replace(".", "") + "$", "i")), c || this._monthsParse[d] || (f = "^" + this.months(e, "") + "|^" + this.monthsShort(e, ""), this._monthsParse[d] = new RegExp(f.replace(".", ""), "i")), c && "MMMM" === b && this._longMonthsParse[d].test(a)) return d;if (c && "MMM" === b && this._shortMonthsParse[d].test(a)) return d;if (!c && this._monthsParse[d].test(a)) return d;
        }
    }function V(a, b) {
        var c;return "string" == typeof b && (b = a.localeData().monthsParse(b), "number" != typeof b) ? a : (c = Math.min(a.date(), R(a.year(), b)), a._d["set" + (a._isUTC ? "UTC" : "") + "Month"](b, c), a);
    }function W(b) {
        return null != b ? (V(this, b), a.updateOffset(this, !0), this) : C(this, "Month");
    }function X() {
        return R(this.year(), this.month());
    }function Y(a) {
        var b,
            c = a._a;return c && -2 === j(a).overflow && (b = c[cd] < 0 || c[cd] > 11 ? cd : c[dd] < 1 || c[dd] > R(c[bd], c[cd]) ? dd : c[ed] < 0 || c[ed] > 24 || 24 === c[ed] && (0 !== c[fd] || 0 !== c[gd] || 0 !== c[hd]) ? ed : c[fd] < 0 || c[fd] > 59 ? fd : c[gd] < 0 || c[gd] > 59 ? gd : c[hd] < 0 || c[hd] > 999 ? hd : -1, j(a)._overflowDayOfYear && (bd > b || b > dd) && (b = dd), j(a).overflow = b), a;
    }function Z(b) {
        a.suppressDeprecationWarnings === !1 && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + b);
    }function $(a, b) {
        var c = !0,
            d = a + "\n" + new Error().stack;return g(function () {
            return c && (Z(d), c = !1), b.apply(this, arguments);
        }, b);
    }function _(a, b) {
        kd[a] || (Z(b), kd[a] = !0);
    }function aa(a) {
        var b,
            c,
            d = a._i,
            e = ld.exec(d);if (e) {
            for (j(a).iso = !0, b = 0, c = md.length; c > b; b++) {
                if (md[b][1].exec(d)) {
                    a._f = md[b][0] + (e[6] || " ");break;
                }
            }for (b = 0, c = nd.length; c > b; b++) {
                if (nd[b][1].exec(d)) {
                    a._f += nd[b][0];break;
                }
            }d.match(Yc) && (a._f += "Z"), ta(a);
        } else a._isValid = !1;
    }function ba(b) {
        var c = od.exec(b._i);return null !== c ? void (b._d = new Date(+c[1])) : (aa(b), void (b._isValid === !1 && (delete b._isValid, a.createFromInputFallback(b))));
    }function ca(a, b, c, d, e, f, g) {
        var h = new Date(a, b, c, d, e, f, g);return 1970 > a && h.setFullYear(a), h;
    }function da(a) {
        var b = new Date(Date.UTC.apply(null, arguments));return 1970 > a && b.setUTCFullYear(a), b;
    }function ea(a) {
        return fa(a) ? 366 : 365;
    }function fa(a) {
        return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;
    }function ga() {
        return fa(this.year());
    }function ha(a, b, c) {
        var d,
            e = c - b,
            f = c - a.day();return f > e && (f -= 7), e - 7 > f && (f += 7), d = Aa(a).add(f, "d"), { week: Math.ceil(d.dayOfYear() / 7), year: d.year() };
    }function ia(a) {
        return ha(a, this._week.dow, this._week.doy).week;
    }function ja() {
        return this._week.dow;
    }function ka() {
        return this._week.doy;
    }function la(a) {
        var b = this.localeData().week(this);return null == a ? b : this.add(7 * (a - b), "d");
    }function ma(a) {
        var b = ha(this, 1, 4).week;return null == a ? b : this.add(7 * (a - b), "d");
    }function na(a, b, c, d, e) {
        var f,
            g,
            h = da(a, 0, 1).getUTCDay();return h = 0 === h ? 7 : h, c = null != c ? c : e, f = e - h + (h > d ? 7 : 0) - (e > h ? 7 : 0), g = 7 * (b - 1) + (c - e) + f + 1, { year: g > 0 ? a : a - 1, dayOfYear: g > 0 ? g : ea(a - 1) + g };
    }function oa(a) {
        var b = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;return null == a ? b : this.add(a - b, "d");
    }function pa(a, b, c) {
        return null != a ? a : null != b ? b : c;
    }function qa(a) {
        var b = new Date();return a._useUTC ? [b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate()] : [b.getFullYear(), b.getMonth(), b.getDate()];
    }function ra(a) {
        var b,
            c,
            d,
            e,
            f = [];if (!a._d) {
            for (d = qa(a), a._w && null == a._a[dd] && null == a._a[cd] && sa(a), a._dayOfYear && (e = pa(a._a[bd], d[bd]), a._dayOfYear > ea(e) && (j(a)._overflowDayOfYear = !0), c = da(e, 0, a._dayOfYear), a._a[cd] = c.getUTCMonth(), a._a[dd] = c.getUTCDate()), b = 0; 3 > b && null == a._a[b]; ++b) {
                a._a[b] = f[b] = d[b];
            }for (; 7 > b; b++) {
                a._a[b] = f[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b];
            }24 === a._a[ed] && 0 === a._a[fd] && 0 === a._a[gd] && 0 === a._a[hd] && (a._nextDay = !0, a._a[ed] = 0), a._d = (a._useUTC ? da : ca).apply(null, f), null != a._tzm && a._d.setUTCMinutes(a._d.getUTCMinutes() - a._tzm), a._nextDay && (a._a[ed] = 24);
        }
    }function sa(a) {
        var b, c, d, e, f, g, h;b = a._w, null != b.GG || null != b.W || null != b.E ? (f = 1, g = 4, c = pa(b.GG, a._a[bd], ha(Aa(), 1, 4).year), d = pa(b.W, 1), e = pa(b.E, 1)) : (f = a._locale._week.dow, g = a._locale._week.doy, c = pa(b.gg, a._a[bd], ha(Aa(), f, g).year), d = pa(b.w, 1), null != b.d ? (e = b.d, f > e && ++d) : e = null != b.e ? b.e + f : f), h = na(c, d, e, g, f), a._a[bd] = h.year, a._dayOfYear = h.dayOfYear;
    }function ta(b) {
        if (b._f === a.ISO_8601) return void aa(b);b._a = [], j(b).empty = !0;var c,
            d,
            e,
            f,
            g,
            h = "" + b._i,
            i = h.length,
            k = 0;for (e = K(b._f, b._locale).match(Jc) || [], c = 0; c < e.length; c++) {
            f = e[c], d = (h.match(M(f, b)) || [])[0], d && (g = h.substr(0, h.indexOf(d)), g.length > 0 && j(b).unusedInput.push(g), h = h.slice(h.indexOf(d) + d.length), k += d.length), Mc[f] ? (d ? j(b).empty = !1 : j(b).unusedTokens.push(f), Q(f, d, b)) : b._strict && !d && j(b).unusedTokens.push(f);
        }j(b).charsLeftOver = i - k, h.length > 0 && j(b).unusedInput.push(h), j(b).bigHour === !0 && b._a[ed] <= 12 && b._a[ed] > 0 && (j(b).bigHour = void 0), b._a[ed] = ua(b._locale, b._a[ed], b._meridiem), ra(b), Y(b);
    }function ua(a, b, c) {
        var d;return null == c ? b : null != a.meridiemHour ? a.meridiemHour(b, c) : null != a.isPM ? (d = a.isPM(c), d && 12 > b && (b += 12), d || 12 !== b || (b = 0), b) : b;
    }function va(a) {
        var b, c, d, e, f;if (0 === a._f.length) return j(a).invalidFormat = !0, void (a._d = new Date(0 / 0));for (e = 0; e < a._f.length; e++) {
            f = 0, b = m({}, a), null != a._useUTC && (b._useUTC = a._useUTC), b._f = a._f[e], ta(b), k(b) && (f += j(b).charsLeftOver, f += 10 * j(b).unusedTokens.length, j(b).score = f, (null == d || d > f) && (d = f, c = b));
        }g(a, c || b);
    }function wa(a) {
        if (!a._d) {
            var b = A(a._i);a._a = [b.year, b.month, b.day || b.date, b.hour, b.minute, b.second, b.millisecond], ra(a);
        }
    }function xa(a) {
        var b,
            e = a._i,
            f = a._f;return a._locale = a._locale || x(a._l), null === e || void 0 === f && "" === e ? l({ nullInput: !0 }) : ("string" == typeof e && (a._i = e = a._locale.preparse(e)), o(e) ? new n(Y(e)) : (c(f) ? va(a) : f ? ta(a) : d(e) ? a._d = e : ya(a), b = new n(Y(a)), b._nextDay && (b.add(1, "d"), b._nextDay = void 0), b));
    }function ya(b) {
        var f = b._i;void 0 === f ? b._d = new Date() : d(f) ? b._d = new Date(+f) : "string" == typeof f ? ba(b) : c(f) ? (b._a = e(f.slice(0), function (a) {
            return parseInt(a, 10);
        }), ra(b)) : "object" == (typeof f === "undefined" ? "undefined" : _typeof(f)) ? wa(b) : "number" == typeof f ? b._d = new Date(f) : a.createFromInputFallback(b);
    }function za(a, b, c, d, e) {
        var f = {};return "boolean" == typeof c && (d = c, c = void 0), f._isAMomentObject = !0, f._useUTC = f._isUTC = e, f._l = c, f._i = a, f._f = b, f._strict = d, xa(f);
    }function Aa(a, b, c, d) {
        return za(a, b, c, d, !1);
    }function Ba(a, b) {
        var d, e;if (1 === b.length && c(b[0]) && (b = b[0]), !b.length) return Aa();for (d = b[0], e = 1; e < b.length; ++e) {
            b[e][a](d) && (d = b[e]);
        }return d;
    }function Ca() {
        var a = [].slice.call(arguments, 0);return Ba("isBefore", a);
    }function Da() {
        var a = [].slice.call(arguments, 0);return Ba("isAfter", a);
    }function Ea(a) {
        var b = A(a),
            c = b.year || 0,
            d = b.quarter || 0,
            e = b.month || 0,
            f = b.week || 0,
            g = b.day || 0,
            h = b.hour || 0,
            i = b.minute || 0,
            j = b.second || 0,
            k = b.millisecond || 0;this._milliseconds = +k + 1e3 * j + 6e4 * i + 36e5 * h, this._days = +g + 7 * f, this._months = +e + 3 * d + 12 * c, this._data = {}, this._locale = x(), this._bubble();
    }function Fa(a) {
        return a instanceof Ea;
    }function Ga(a, b) {
        G(a, 0, 0, function () {
            var a = this.utcOffset(),
                c = "+";return 0 > a && (a = -a, c = "-"), c + F(~~(a / 60), 2) + b + F(~~a % 60, 2);
        });
    }function Ha(a) {
        var b = (a || "").match(Yc) || [],
            c = b[b.length - 1] || [],
            d = (c + "").match(td) || ["-", 0, 0],
            e = +(60 * d[1]) + p(d[2]);return "+" === d[0] ? e : -e;
    }function Ia(b, c) {
        var e, f;return c._isUTC ? (e = c.clone(), f = (o(b) || d(b) ? +b : +Aa(b)) - +e, e._d.setTime(+e._d + f), a.updateOffset(e, !1), e) : Aa(b).local();return c._isUTC ? Aa(b).zone(c._offset || 0) : Aa(b).local();
    }function Ja(a) {
        return 15 * -Math.round(a._d.getTimezoneOffset() / 15);
    }function Ka(b, c) {
        var d,
            e = this._offset || 0;return null != b ? ("string" == typeof b && (b = Ha(b)), Math.abs(b) < 16 && (b = 60 * b), !this._isUTC && c && (d = Ja(this)), this._offset = b, this._isUTC = !0, null != d && this.add(d, "m"), e !== b && (!c || this._changeInProgress ? $a(this, Va(b - e, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, a.updateOffset(this, !0), this._changeInProgress = null)), this) : this._isUTC ? e : Ja(this);
    }function La(a, b) {
        return null != a ? ("string" != typeof a && (a = -a), this.utcOffset(a, b), this) : -this.utcOffset();
    }function Ma(a) {
        return this.utcOffset(0, a);
    }function Na(a) {
        return this._isUTC && (this.utcOffset(0, a), this._isUTC = !1, a && this.subtract(Ja(this), "m")), this;
    }function Oa() {
        return this._tzm ? this.utcOffset(this._tzm) : "string" == typeof this._i && this.utcOffset(Ha(this._i)), this;
    }function Pa(a) {
        return a = a ? Aa(a).utcOffset() : 0, (this.utcOffset() - a) % 60 === 0;
    }function Qa() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }function Ra() {
        if (this._a) {
            var a = this._isUTC ? h(this._a) : Aa(this._a);return this.isValid() && q(this._a, a.toArray()) > 0;
        }return !1;
    }function Sa() {
        return !this._isUTC;
    }function Ta() {
        return this._isUTC;
    }function Ua() {
        return this._isUTC && 0 === this._offset;
    }function Va(a, b) {
        var c,
            d,
            e,
            g = a,
            h = null;return Fa(a) ? g = { ms: a._milliseconds, d: a._days, M: a._months } : "number" == typeof a ? (g = {}, b ? g[b] = a : g.milliseconds = a) : (h = ud.exec(a)) ? (c = "-" === h[1] ? -1 : 1, g = { y: 0, d: p(h[dd]) * c, h: p(h[ed]) * c, m: p(h[fd]) * c, s: p(h[gd]) * c, ms: p(h[hd]) * c }) : (h = vd.exec(a)) ? (c = "-" === h[1] ? -1 : 1, g = { y: Wa(h[2], c), M: Wa(h[3], c), d: Wa(h[4], c), h: Wa(h[5], c), m: Wa(h[6], c), s: Wa(h[7], c), w: Wa(h[8], c) }) : null == g ? g = {} : "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) && ("from" in g || "to" in g) && (e = Ya(Aa(g.from), Aa(g.to)), g = {}, g.ms = e.milliseconds, g.M = e.months), d = new Ea(g), Fa(a) && f(a, "_locale") && (d._locale = a._locale), d;
    }function Wa(a, b) {
        var c = a && parseFloat(a.replace(",", "."));return (isNaN(c) ? 0 : c) * b;
    }function Xa(a, b) {
        var c = { milliseconds: 0, months: 0 };return c.months = b.month() - a.month() + 12 * (b.year() - a.year()), a.clone().add(c.months, "M").isAfter(b) && --c.months, c.milliseconds = +b - +a.clone().add(c.months, "M"), c;
    }function Ya(a, b) {
        var c;return b = Ia(b, a), a.isBefore(b) ? c = Xa(a, b) : (c = Xa(b, a), c.milliseconds = -c.milliseconds, c.months = -c.months), c;
    }function Za(a, b) {
        return function (c, d) {
            var e, f;return null === d || isNaN(+d) || (_(b, "moment()." + b + "(period, number) is deprecated. Please use moment()." + b + "(number, period)."), f = c, c = d, d = f), c = "string" == typeof c ? +c : c, e = Va(c, d), $a(this, e, a), this;
        };
    }function $a(b, c, d, e) {
        var f = c._milliseconds,
            g = c._days,
            h = c._months;e = null == e ? !0 : e, f && b._d.setTime(+b._d + f * d), g && D(b, "Date", C(b, "Date") + g * d), h && V(b, C(b, "Month") + h * d), e && a.updateOffset(b, g || h);
    }function _a(a) {
        var b = a || Aa(),
            c = Ia(b, this).startOf("day"),
            d = this.diff(c, "days", !0),
            e = -6 > d ? "sameElse" : -1 > d ? "lastWeek" : 0 > d ? "lastDay" : 1 > d ? "sameDay" : 2 > d ? "nextDay" : 7 > d ? "nextWeek" : "sameElse";return this.format(this.localeData().calendar(e, this, Aa(b)));
    }function ab() {
        return new n(this);
    }function bb(a, b) {
        var c;return b = z("undefined" != typeof b ? b : "millisecond"), "millisecond" === b ? (a = o(a) ? a : Aa(a), +this > +a) : (c = o(a) ? +a : +Aa(a), c < +this.clone().startOf(b));
    }function cb(a, b) {
        var c;return b = z("undefined" != typeof b ? b : "millisecond"), "millisecond" === b ? (a = o(a) ? a : Aa(a), +a > +this) : (c = o(a) ? +a : +Aa(a), +this.clone().endOf(b) < c);
    }function db(a, b, c) {
        return this.isAfter(a, c) && this.isBefore(b, c);
    }function eb(a, b) {
        var c;return b = z(b || "millisecond"), "millisecond" === b ? (a = o(a) ? a : Aa(a), +this === +a) : (c = +Aa(a), +this.clone().startOf(b) <= c && c <= +this.clone().endOf(b));
    }function fb(a) {
        return 0 > a ? Math.ceil(a) : Math.floor(a);
    }function gb(a, b, c) {
        var d,
            e,
            f = Ia(a, this),
            g = 6e4 * (f.utcOffset() - this.utcOffset());return b = z(b), "year" === b || "month" === b || "quarter" === b ? (e = hb(this, f), "quarter" === b ? e /= 3 : "year" === b && (e /= 12)) : (d = this - f, e = "second" === b ? d / 1e3 : "minute" === b ? d / 6e4 : "hour" === b ? d / 36e5 : "day" === b ? (d - g) / 864e5 : "week" === b ? (d - g) / 6048e5 : d), c ? e : fb(e);
    }function hb(a, b) {
        var c,
            d,
            e = 12 * (b.year() - a.year()) + (b.month() - a.month()),
            f = a.clone().add(e, "months");return 0 > b - f ? (c = a.clone().add(e - 1, "months"), d = (b - f) / (f - c)) : (c = a.clone().add(e + 1, "months"), d = (b - f) / (c - f)), -(e + d);
    }function ib() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }function jb() {
        var a = this.clone().utc();return 0 < a.year() && a.year() <= 9999 ? "function" == typeof Date.prototype.toISOString ? this.toDate().toISOString() : J(a, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : J(a, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
    }function kb(b) {
        var c = J(this, b || a.defaultFormat);return this.localeData().postformat(c);
    }function lb(a, b) {
        return this.isValid() ? Va({ to: this, from: a }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();
    }function mb(a) {
        return this.from(Aa(), a);
    }function nb(a, b) {
        return this.isValid() ? Va({ from: this, to: a }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();
    }function ob(a) {
        return this.to(Aa(), a);
    }function pb(a) {
        var b;return void 0 === a ? this._locale._abbr : (b = x(a), null != b && (this._locale = b), this);
    }function qb() {
        return this._locale;
    }function rb(a) {
        switch (a = z(a)) {case "year":
                this.month(0);case "quarter":case "month":
                this.date(1);case "week":case "isoWeek":case "day":
                this.hours(0);case "hour":
                this.minutes(0);case "minute":
                this.seconds(0);case "second":
                this.milliseconds(0);}return "week" === a && this.weekday(0), "isoWeek" === a && this.isoWeekday(1), "quarter" === a && this.month(3 * Math.floor(this.month() / 3)), this;
    }function sb(a) {
        return a = z(a), void 0 === a || "millisecond" === a ? this : this.startOf(a).add(1, "isoWeek" === a ? "week" : a).subtract(1, "ms");
    }function tb() {
        return +this._d - 6e4 * (this._offset || 0);
    }function ub() {
        return Math.floor(+this / 1e3);
    }function vb() {
        return this._offset ? new Date(+this) : this._d;
    }function wb() {
        var a = this;return [a.year(), a.month(), a.date(), a.hour(), a.minute(), a.second(), a.millisecond()];
    }function xb() {
        return k(this);
    }function yb() {
        return g({}, j(this));
    }function zb() {
        return j(this).overflow;
    }function Ab(a, b) {
        G(0, [a, a.length], 0, b);
    }function Bb(a, b, c) {
        return ha(Aa([a, 11, 31 + b - c]), b, c).week;
    }function Cb(a) {
        var b = ha(this, this.localeData()._week.dow, this.localeData()._week.doy).year;return null == a ? b : this.add(a - b, "y");
    }function Db(a) {
        var b = ha(this, 1, 4).year;return null == a ? b : this.add(a - b, "y");
    }function Eb() {
        return Bb(this.year(), 1, 4);
    }function Fb() {
        var a = this.localeData()._week;return Bb(this.year(), a.dow, a.doy);
    }function Gb(a) {
        return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3);
    }function Hb(a, b) {
        if ("string" == typeof a) if (isNaN(a)) {
            if (a = b.weekdaysParse(a), "number" != typeof a) return null;
        } else a = parseInt(a, 10);return a;
    }function Ib(a) {
        return this._weekdays[a.day()];
    }function Jb(a) {
        return this._weekdaysShort[a.day()];
    }function Kb(a) {
        return this._weekdaysMin[a.day()];
    }function Lb(a) {
        var b, c, d;for (this._weekdaysParse || (this._weekdaysParse = []), b = 0; 7 > b; b++) {
            if (this._weekdaysParse[b] || (c = Aa([2e3, 1]).day(b), d = "^" + this.weekdays(c, "") + "|^" + this.weekdaysShort(c, "") + "|^" + this.weekdaysMin(c, ""), this._weekdaysParse[b] = new RegExp(d.replace(".", ""), "i")), this._weekdaysParse[b].test(a)) return b;
        }
    }function Mb(a) {
        var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();return null != a ? (a = Hb(a, this.localeData()), this.add(a - b, "d")) : b;
    }function Nb(a) {
        var b = (this.day() + 7 - this.localeData()._week.dow) % 7;return null == a ? b : this.add(a - b, "d");
    }function Ob(a) {
        return null == a ? this.day() || 7 : this.day(this.day() % 7 ? a : a - 7);
    }function Pb(a, b) {
        G(a, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), b);
        });
    }function Qb(a, b) {
        return b._meridiemParse;
    }function Rb(a) {
        return "p" === (a + "").toLowerCase().charAt(0);
    }function Sb(a, b, c) {
        return a > 11 ? c ? "pm" : "PM" : c ? "am" : "AM";
    }function Tb(a) {
        G(0, [a, 3], 0, "millisecond");
    }function Ub() {
        return this._isUTC ? "UTC" : "";
    }function Vb() {
        return this._isUTC ? "Coordinated Universal Time" : "";
    }function Wb(a) {
        return Aa(1e3 * a);
    }function Xb() {
        return Aa.apply(null, arguments).parseZone();
    }function Yb(a, b, c) {
        var d = this._calendar[a];return "function" == typeof d ? d.call(b, c) : d;
    }function Zb(a) {
        var b = this._longDateFormat[a];return !b && this._longDateFormat[a.toUpperCase()] && (b = this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (a) {
            return a.slice(1);
        }), this._longDateFormat[a] = b), b;
    }function $b() {
        return this._invalidDate;
    }function _b(a) {
        return this._ordinal.replace("%d", a);
    }function ac(a) {
        return a;
    }function bc(a, b, c, d) {
        var e = this._relativeTime[c];return "function" == typeof e ? e(a, b, c, d) : e.replace(/%d/i, a);
    }function cc(a, b) {
        var c = this._relativeTime[a > 0 ? "future" : "past"];return "function" == typeof c ? c(b) : c.replace(/%s/i, b);
    }function dc(a) {
        var b, c;for (c in a) {
            b = a[c], "function" == typeof b ? this[c] = b : this["_" + c] = b;
        }this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source);
    }function ec(a, b, c, d) {
        var e = x(),
            f = h().set(d, b);return e[c](f, a);
    }function fc(a, b, c, d, e) {
        if ("number" == typeof a && (b = a, a = void 0), a = a || "", null != b) return ec(a, b, c, e);var f,
            g = [];for (f = 0; d > f; f++) {
            g[f] = ec(a, f, c, e);
        }return g;
    }function gc(a, b) {
        return fc(a, b, "months", 12, "month");
    }function hc(a, b) {
        return fc(a, b, "monthsShort", 12, "month");
    }function ic(a, b) {
        return fc(a, b, "weekdays", 7, "day");
    }function jc(a, b) {
        return fc(a, b, "weekdaysShort", 7, "day");
    }function kc(a, b) {
        return fc(a, b, "weekdaysMin", 7, "day");
    }function lc() {
        var a = this._data;return this._milliseconds = Rd(this._milliseconds), this._days = Rd(this._days), this._months = Rd(this._months), a.milliseconds = Rd(a.milliseconds), a.seconds = Rd(a.seconds), a.minutes = Rd(a.minutes), a.hours = Rd(a.hours), a.months = Rd(a.months), a.years = Rd(a.years), this;
    }function mc(a, b, c, d) {
        var e = Va(b, c);return a._milliseconds += d * e._milliseconds, a._days += d * e._days, a._months += d * e._months, a._bubble();
    }function nc(a, b) {
        return mc(this, a, b, 1);
    }function oc(a, b) {
        return mc(this, a, b, -1);
    }function pc() {
        var a,
            b,
            c,
            d = this._milliseconds,
            e = this._days,
            f = this._months,
            g = this._data,
            h = 0;return g.milliseconds = d % 1e3, a = fb(d / 1e3), g.seconds = a % 60, b = fb(a / 60), g.minutes = b % 60, c = fb(b / 60), g.hours = c % 24, e += fb(c / 24), h = fb(qc(e)), e -= fb(rc(h)), f += fb(e / 30), e %= 30, h += fb(f / 12), f %= 12, g.days = e, g.months = f, g.years = h, this;
    }function qc(a) {
        return 400 * a / 146097;
    }function rc(a) {
        return 146097 * a / 400;
    }function sc(a) {
        var b,
            c,
            d = this._milliseconds;if (a = z(a), "month" === a || "year" === a) return b = this._days + d / 864e5, c = this._months + 12 * qc(b), "month" === a ? c : c / 12;switch (b = this._days + Math.round(rc(this._months / 12)), a) {case "week":
                return b / 7 + d / 6048e5;case "day":
                return b + d / 864e5;case "hour":
                return 24 * b + d / 36e5;case "minute":
                return 1440 * b + d / 6e4;case "second":
                return 86400 * b + d / 1e3;case "millisecond":
                return Math.floor(864e5 * b) + d;default:
                throw new Error("Unknown unit " + a);}
    }function tc() {
        return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * p(this._months / 12);
    }function uc(a) {
        return function () {
            return this.as(a);
        };
    }function vc(a) {
        return a = z(a), this[a + "s"]();
    }function wc(a) {
        return function () {
            return this._data[a];
        };
    }function xc() {
        return fb(this.days() / 7);
    }function yc(a, b, c, d, e) {
        return e.relativeTime(b || 1, !!c, a, d);
    }function zc(a, b, c) {
        var d = Va(a).abs(),
            e = fe(d.as("s")),
            f = fe(d.as("m")),
            g = fe(d.as("h")),
            h = fe(d.as("d")),
            i = fe(d.as("M")),
            j = fe(d.as("y")),
            k = e < ge.s && ["s", e] || 1 === f && ["m"] || f < ge.m && ["mm", f] || 1 === g && ["h"] || g < ge.h && ["hh", g] || 1 === h && ["d"] || h < ge.d && ["dd", h] || 1 === i && ["M"] || i < ge.M && ["MM", i] || 1 === j && ["y"] || ["yy", j];return k[2] = b, k[3] = +a > 0, k[4] = c, yc.apply(null, k);
    }function Ac(a, b) {
        return void 0 === ge[a] ? !1 : void 0 === b ? ge[a] : (ge[a] = b, !0);
    }function Bc(a) {
        var b = this.localeData(),
            c = zc(this, !a, b);return a && (c = b.pastFuture(+this, c)), b.postformat(c);
    }function Cc() {
        var a = he(this.years()),
            b = he(this.months()),
            c = he(this.days()),
            d = he(this.hours()),
            e = he(this.minutes()),
            f = he(this.seconds() + this.milliseconds() / 1e3),
            g = this.asSeconds();return g ? (0 > g ? "-" : "") + "P" + (a ? a + "Y" : "") + (b ? b + "M" : "") + (c ? c + "D" : "") + (d || e || f ? "T" : "") + (d ? d + "H" : "") + (e ? e + "M" : "") + (f ? f + "S" : "") : "P0D";
    }var Dc,
        Ec,
        Fc = a.momentProperties = [],
        Gc = !1,
        Hc = {},
        Ic = {},
        Jc = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
        Kc = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        Lc = {},
        Mc = {},
        Nc = /\d/,
        Oc = /\d\d/,
        Pc = /\d{3}/,
        Qc = /\d{4}/,
        Rc = /[+-]?\d{6}/,
        Sc = /\d\d?/,
        Tc = /\d{1,3}/,
        Uc = /\d{1,4}/,
        Vc = /[+-]?\d{1,6}/,
        Wc = /\d+/,
        Xc = /[+-]?\d+/,
        Yc = /Z|[+-]\d\d:?\d\d/gi,
        Zc = /[+-]?\d+(\.\d{1,3})?/,
        $c = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
        _c = {},
        ad = {},
        bd = 0,
        cd = 1,
        dd = 2,
        ed = 3,
        fd = 4,
        gd = 5,
        hd = 6;G("M", ["MM", 2], "Mo", function () {
        return this.month() + 1;
    }), G("MMM", 0, 0, function (a) {
        return this.localeData().monthsShort(this, a);
    }), G("MMMM", 0, 0, function (a) {
        return this.localeData().months(this, a);
    }), y("month", "M"), L("M", Sc), L("MM", Sc, Oc), L("MMM", $c), L("MMMM", $c), O(["M", "MM"], function (a, b) {
        b[cd] = p(a) - 1;
    }), O(["MMM", "MMMM"], function (a, b, c, d) {
        var e = c._locale.monthsParse(a, d, c._strict);null != e ? b[cd] = e : j(c).invalidMonth = a;
    });var id = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        jd = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        kd = {};a.suppressDeprecationWarnings = !1;var ld = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        md = [["YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/], ["YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/], ["GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/], ["GGGG-[W]WW", /\d{4}-W\d{2}/], ["YYYY-DDD", /\d{4}-\d{3}/]],
        nd = [["HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/], ["HH:mm", /(T| )\d\d:\d\d/], ["HH", /(T| )\d\d/]],
        od = /^\/?Date\((\-?\d+)/i;a.createFromInputFallback = $("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.", function (a) {
        a._d = new Date(a._i + (a._useUTC ? " UTC" : ""));
    }), G(0, ["YY", 2], 0, function () {
        return this.year() % 100;
    }), G(0, ["YYYY", 4], 0, "year"), G(0, ["YYYYY", 5], 0, "year"), G(0, ["YYYYYY", 6, !0], 0, "year"), y("year", "y"), L("Y", Xc), L("YY", Sc, Oc), L("YYYY", Uc, Qc), L("YYYYY", Vc, Rc), L("YYYYYY", Vc, Rc), O(["YYYY", "YYYYY", "YYYYYY"], bd), O("YY", function (b, c) {
        c[bd] = a.parseTwoDigitYear(b);
    }), a.parseTwoDigitYear = function (a) {
        return p(a) + (p(a) > 68 ? 1900 : 2e3);
    };var pd = B("FullYear", !1);G("w", ["ww", 2], "wo", "week"), G("W", ["WW", 2], "Wo", "isoWeek"), y("week", "w"), y("isoWeek", "W"), L("w", Sc), L("ww", Sc, Oc), L("W", Sc), L("WW", Sc, Oc), P(["w", "ww", "W", "WW"], function (a, b, c, d) {
        b[d.substr(0, 1)] = p(a);
    });var qd = { dow: 0, doy: 6 };G("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), y("dayOfYear", "DDD"), L("DDD", Tc), L("DDDD", Pc), O(["DDD", "DDDD"], function (a, b, c) {
        c._dayOfYear = p(a);
    }), a.ISO_8601 = function () {};var rd = $("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548", function () {
        var a = Aa.apply(null, arguments);return this > a ? this : a;
    }),
        sd = $("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548", function () {
        var a = Aa.apply(null, arguments);return a > this ? this : a;
    });Ga("Z", ":"), Ga("ZZ", ""), L("Z", Yc), L("ZZ", Yc), O(["Z", "ZZ"], function (a, b, c) {
        c._useUTC = !0, c._tzm = Ha(a);
    });var td = /([\+\-]|\d\d)/gi;a.updateOffset = function () {};var ud = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,
        vd = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Va.fn = Ea.prototype;var wd = Za(1, "add"),
        xd = Za(-1, "subtract");a.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";var yd = $("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (a) {
        return void 0 === a ? this.localeData() : this.locale(a);
    });G(0, ["gg", 2], 0, function () {
        return this.weekYear() % 100;
    }), G(0, ["GG", 2], 0, function () {
        return this.isoWeekYear() % 100;
    }), Ab("gggg", "weekYear"), Ab("ggggg", "weekYear"), Ab("GGGG", "isoWeekYear"), Ab("GGGGG", "isoWeekYear"), y("weekYear", "gg"), y("isoWeekYear", "GG"), L("G", Xc), L("g", Xc), L("GG", Sc, Oc), L("gg", Sc, Oc), L("GGGG", Uc, Qc), L("gggg", Uc, Qc), L("GGGGG", Vc, Rc), L("ggggg", Vc, Rc), P(["gggg", "ggggg", "GGGG", "GGGGG"], function (a, b, c, d) {
        b[d.substr(0, 2)] = p(a);
    }), P(["gg", "GG"], function (b, c, d, e) {
        c[e] = a.parseTwoDigitYear(b);
    }), G("Q", 0, 0, "quarter"), y("quarter", "Q"), L("Q", Nc), O("Q", function (a, b) {
        b[cd] = 3 * (p(a) - 1);
    }), G("D", ["DD", 2], "Do", "date"), y("date", "D"), L("D", Sc), L("DD", Sc, Oc), L("Do", function (a, b) {
        return a ? b._ordinalParse : b._ordinalParseLenient;
    }), O(["D", "DD"], dd), O("Do", function (a, b) {
        b[dd] = p(a.match(Sc)[0], 10);
    });var zd = B("Date", !0);G("d", 0, "do", "day"), G("dd", 0, 0, function (a) {
        return this.localeData().weekdaysMin(this, a);
    }), G("ddd", 0, 0, function (a) {
        return this.localeData().weekdaysShort(this, a);
    }), G("dddd", 0, 0, function (a) {
        return this.localeData().weekdays(this, a);
    }), G("e", 0, 0, "weekday"), G("E", 0, 0, "isoWeekday"), y("day", "d"), y("weekday", "e"), y("isoWeekday", "E"), L("d", Sc), L("e", Sc), L("E", Sc), L("dd", $c), L("ddd", $c), L("dddd", $c), P(["dd", "ddd", "dddd"], function (a, b, c) {
        var d = c._locale.weekdaysParse(a);null != d ? b.d = d : j(c).invalidWeekday = a;
    }), P(["d", "e", "E"], function (a, b, c, d) {
        b[d] = p(a);
    });var Ad = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        Bd = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        Cd = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("H", ["HH", 2], 0, "hour"), G("h", ["hh", 2], 0, function () {
        return this.hours() % 12 || 12;
    }), Pb("a", !0), Pb("A", !1), y("hour", "h"), L("a", Qb), L("A", Qb), L("H", Sc), L("h", Sc), L("HH", Sc, Oc), L("hh", Sc, Oc), O(["H", "HH"], ed), O(["a", "A"], function (a, b, c) {
        c._isPm = c._locale.isPM(a), c._meridiem = a;
    }), O(["h", "hh"], function (a, b, c) {
        b[ed] = p(a), j(c).bigHour = !0;
    });var Dd = /[ap]\.?m?\.?/i,
        Ed = B("Hours", !0);G("m", ["mm", 2], 0, "minute"), y("minute", "m"), L("m", Sc), L("mm", Sc, Oc), O(["m", "mm"], fd);var Fd = B("Minutes", !1);G("s", ["ss", 2], 0, "second"), y("second", "s"), L("s", Sc), L("ss", Sc, Oc), O(["s", "ss"], gd);var Gd = B("Seconds", !1);G("S", 0, 0, function () {
        return ~~(this.millisecond() / 100);
    }), G(0, ["SS", 2], 0, function () {
        return ~~(this.millisecond() / 10);
    }), Tb("SSS"), Tb("SSSS"), y("millisecond", "ms"), L("S", Tc, Nc), L("SS", Tc, Oc), L("SSS", Tc, Pc), L("SSSS", Wc), O(["S", "SS", "SSS", "SSSS"], function (a, b) {
        b[hd] = p(1e3 * ("0." + a));
    });var Hd = B("Milliseconds", !1);G("z", 0, 0, "zoneAbbr"), G("zz", 0, 0, "zoneName");var Id = n.prototype;Id.add = wd, Id.calendar = _a, Id.clone = ab, Id.diff = gb, Id.endOf = sb, Id.format = kb, Id.from = lb, Id.fromNow = mb, Id.to = nb, Id.toNow = ob, Id.get = E, Id.invalidAt = zb, Id.isAfter = bb, Id.isBefore = cb, Id.isBetween = db, Id.isSame = eb, Id.isValid = xb, Id.lang = yd, Id.locale = pb, Id.localeData = qb, Id.max = sd, Id.min = rd, Id.parsingFlags = yb, Id.set = E, Id.startOf = rb, Id.subtract = xd, Id.toArray = wb, Id.toDate = vb, Id.toISOString = jb, Id.toJSON = jb, Id.toString = ib, Id.unix = ub, Id.valueOf = tb, Id.year = pd, Id.isLeapYear = ga, Id.weekYear = Cb, Id.isoWeekYear = Db, Id.quarter = Id.quarters = Gb, Id.month = W, Id.daysInMonth = X, Id.week = Id.weeks = la, Id.isoWeek = Id.isoWeeks = ma, Id.weeksInYear = Fb, Id.isoWeeksInYear = Eb, Id.date = zd, Id.day = Id.days = Mb, Id.weekday = Nb, Id.isoWeekday = Ob, Id.dayOfYear = oa, Id.hour = Id.hours = Ed, Id.minute = Id.minutes = Fd, Id.second = Id.seconds = Gd, Id.millisecond = Id.milliseconds = Hd, Id.utcOffset = Ka, Id.utc = Ma, Id.local = Na, Id.parseZone = Oa, Id.hasAlignedHourOffset = Pa, Id.isDST = Qa, Id.isDSTShifted = Ra, Id.isLocal = Sa, Id.isUtcOffset = Ta, Id.isUtc = Ua, Id.isUTC = Ua, Id.zoneAbbr = Ub, Id.zoneName = Vb, Id.dates = $("dates accessor is deprecated. Use date instead.", zd), Id.months = $("months accessor is deprecated. Use month instead", W), Id.years = $("years accessor is deprecated. Use year instead", pd), Id.zone = $("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779", La);var Jd = Id,
        Kd = { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" },
        Ld = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY LT", LLLL: "dddd, MMMM D, YYYY LT" },
        Md = "Invalid date",
        Nd = "%d",
        Od = /\d{1,2}/,
        Pd = {
        future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour",
        hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years"
    },
        Qd = r.prototype;Qd._calendar = Kd, Qd.calendar = Yb, Qd._longDateFormat = Ld, Qd.longDateFormat = Zb, Qd._invalidDate = Md, Qd.invalidDate = $b, Qd._ordinal = Nd, Qd.ordinal = _b, Qd._ordinalParse = Od, Qd.preparse = ac, Qd.postformat = ac, Qd._relativeTime = Pd, Qd.relativeTime = bc, Qd.pastFuture = cc, Qd.set = dc, Qd.months = S, Qd._months = id, Qd.monthsShort = T, Qd._monthsShort = jd, Qd.monthsParse = U, Qd.week = ia, Qd._week = qd, Qd.firstDayOfYear = ka, Qd.firstDayOfWeek = ja, Qd.weekdays = Ib, Qd._weekdays = Ad, Qd.weekdaysMin = Kb, Qd._weekdaysMin = Cd, Qd.weekdaysShort = Jb, Qd._weekdaysShort = Bd, Qd.weekdaysParse = Lb, Qd.isPM = Rb, Qd._meridiemParse = Dd, Qd.meridiem = Sb, v("en", { ordinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function ordinal(a) {
            var b = a % 10,
                c = 1 === p(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
        } }), a.lang = $("moment.lang is deprecated. Use moment.locale instead.", v), a.langData = $("moment.langData is deprecated. Use moment.localeData instead.", x);var Rd = Math.abs,
        Sd = uc("ms"),
        Td = uc("s"),
        Ud = uc("m"),
        Vd = uc("h"),
        Wd = uc("d"),
        Xd = uc("w"),
        Yd = uc("M"),
        Zd = uc("y"),
        $d = wc("milliseconds"),
        _d = wc("seconds"),
        ae = wc("minutes"),
        be = wc("hours"),
        ce = wc("days"),
        de = wc("months"),
        ee = wc("years"),
        fe = Math.round,
        ge = { s: 45, m: 45, h: 22, d: 26, M: 11 },
        he = Math.abs,
        ie = Ea.prototype;ie.abs = lc, ie.add = nc, ie.subtract = oc, ie.as = sc, ie.asMilliseconds = Sd, ie.asSeconds = Td, ie.asMinutes = Ud, ie.asHours = Vd, ie.asDays = Wd, ie.asWeeks = Xd, ie.asMonths = Yd, ie.asYears = Zd, ie.valueOf = tc, ie._bubble = pc, ie.get = vc, ie.milliseconds = $d, ie.seconds = _d, ie.minutes = ae, ie.hours = be, ie.days = ce, ie.weeks = xc, ie.months = de, ie.years = ee, ie.humanize = Bc, ie.toISOString = Cc, ie.toString = Cc, ie.toJSON = Cc, ie.locale = pb, ie.localeData = qb, ie.toIsoString = $("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Cc), ie.lang = yd, G("X", 0, 0, "unix"), G("x", 0, 0, "valueOf"), L("x", Xc), L("X", Zc), O("X", function (a, b, c) {
        c._d = new Date(1e3 * parseFloat(a, 10));
    }), O("x", function (a, b, c) {
        c._d = new Date(p(a));
    }), a.version = "2.10.3", b(Aa), a.fn = Jd, a.min = Ca, a.max = Da, a.utc = h, a.unix = Wb, a.months = gc, a.isDate = d, a.locale = v, a.invalid = l, a.duration = Va, a.isMoment = o, a.weekdays = ic, a.parseZone = Xb, a.localeData = x, a.isDuration = Fa, a.monthsShort = hc, a.weekdaysMin = kc, a.defineLocale = w, a.weekdaysShort = jc, a.normalizeUnits = z, a.relativeTimeThreshold = Ac;var je = a;return je;
});
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
* fingerprintJS 0.5.4 - Fast browser fingerprint library
* https://github.com/Valve/fingerprintjs
* Copyright (c) 2013 Valentin Vasilyev (valentin.vasilyev@outlook.com)
* Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

;(function (name, context, definition) {
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = definition();
  } else if (typeof define === 'function' && define.amd) {
    define(definition);
  } else {
    context[name] = definition();
  }
})('Fingerprint', window, function () {
  'use strict';

  var Fingerprint = function Fingerprint(options) {
    var nativeForEach, nativeMap;
    nativeForEach = Array.prototype.forEach;
    nativeMap = Array.prototype.map;

    this.each = function (obj, iterator, context) {
      if (obj === null) {
        return;
      }
      if (nativeForEach && obj.forEach === nativeForEach) {
        obj.forEach(iterator, context);
      } else if (obj.length === +obj.length) {
        for (var i = 0, l = obj.length; i < l; i++) {
          if (iterator.call(context, obj[i], i, obj) === {}) return;
        }
      } else {
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (iterator.call(context, obj[key], key, obj) === {}) return;
          }
        }
      }
    };

    this.map = function (obj, iterator, context) {
      var results = [];
      // Not using strict equality so that this acts as a
      // shortcut to checking for `null` and `undefined`.
      if (obj == null) return results;
      if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
      this.each(obj, function (value, index, list) {
        results[results.length] = iterator.call(context, value, index, list);
      });
      return results;
    };

    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) == 'object') {
      this.hasher = options.hasher;
      this.screen_resolution = options.screen_resolution;
      this.screen_orientation = options.screen_orientation;
      this.canvas = options.canvas;
      this.ie_activex = options.ie_activex;
    } else if (typeof options == 'function') {
      this.hasher = options;
    }
  };

  Fingerprint.prototype = {
    get: function get() {
      var keys = [];
      keys.push(navigator.userAgent);
      keys.push(navigator.language);
      keys.push(screen.colorDepth);
      if (this.screen_resolution) {
        var resolution = this.getScreenResolution();
        if (typeof resolution !== 'undefined') {
          // headless browsers, such as phantomjs
          keys.push(this.getScreenResolution().join('x'));
        }
      }
      keys.push(new Date().getTimezoneOffset());
      keys.push(this.hasSessionStorage());
      keys.push(this.hasLocalStorage());
      keys.push(!!window.indexedDB);
      //body might not be defined at this point or removed programmatically
      if (document.body) {
        keys.push(_typeof(document.body.addBehavior));
      } else {
        keys.push(typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined));
      }
      keys.push(_typeof(window.openDatabase));
      keys.push(navigator.cpuClass);
      keys.push(navigator.platform);
      keys.push(navigator.doNotTrack);
      keys.push(this.getPluginsString());
      if (this.canvas && this.isCanvasSupported()) {
        keys.push(this.getCanvasFingerprint());
      }
      if (this.hasher) {
        return this.hasher(keys.join('###'), 31);
      } else {
        return this.murmurhash3_32_gc(keys.join('###'), 31);
      }
    },

    /**
     * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
     *
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/murmurhash-js
     * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
     * @see http://sites.google.com/site/murmurhash/
     *
     * @param {string} key ASCII only
     * @param {number} seed Positive integer only
     * @return {number} 32-bit positive integer hash
     */

    murmurhash3_32_gc: function murmurhash3_32_gc(key, seed) {
      var remainder, bytes, h1, h1b, c1, c2, k1, i;

      remainder = key.length & 3; // key.length % 4
      bytes = key.length - remainder;
      h1 = seed;
      c1 = 0xcc9e2d51;
      c2 = 0x1b873593;
      i = 0;

      while (i < bytes) {
        k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;
        ++i;

        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;

        h1 ^= k1;
        h1 = h1 << 13 | h1 >>> 19;
        h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
        h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);
      }

      k1 = 0;

      switch (remainder) {
        case 3:
          k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
          k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
          k1 ^= key.charCodeAt(i) & 0xff;

          k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
          k1 = k1 << 15 | k1 >>> 17;
          k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;
          h1 ^= k1;
      }

      h1 ^= key.length;

      h1 ^= h1 >>> 16;
      h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
      h1 ^= h1 >>> 13;
      h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
      h1 ^= h1 >>> 16;

      return h1 >>> 0;
    },

    // https://bugzilla.mozilla.org/show_bug.cgi?id=781447
    hasLocalStorage: function hasLocalStorage() {
      try {
        return !!window.localStorage;
      } catch (e) {
        return true; // SecurityError when referencing it means it exists
      }
    },

    hasSessionStorage: function hasSessionStorage() {
      try {
        return !!window.sessionStorage;
      } catch (e) {
        return true; // SecurityError when referencing it means it exists
      }
    },

    isCanvasSupported: function isCanvasSupported() {
      var elem = document.createElement('canvas');
      return !!(elem.getContext && elem.getContext('2d'));
    },

    isIE: function isIE() {
      if (navigator.appName === 'Microsoft Internet Explorer') {
        return true;
      } else if (navigator.appName === 'Netscape' && /Trident/.test(navigator.userAgent)) {
        // IE 11
        return true;
      }
      return false;
    },

    getPluginsString: function getPluginsString() {
      if (this.isIE() && this.ie_activex) {
        return this.getIEPluginsString();
      } else {
        return this.getRegularPluginsString();
      }
    },

    getRegularPluginsString: function getRegularPluginsString() {
      return this.map(navigator.plugins, function (p) {
        var mimeTypes = this.map(p, function (mt) {
          return [mt.type, mt.suffixes].join('~');
        }).join(',');
        return [p.name, p.description, mimeTypes].join('::');
      }, this).join(';');
    },

    getIEPluginsString: function getIEPluginsString() {
      if (window.ActiveXObject) {
        var names = ['ShockwaveFlash.ShockwaveFlash', //flash plugin
        'AcroPDF.PDF', // Adobe PDF reader 7+
        'PDF.PdfCtrl', // Adobe PDF reader 6 and earlier, brrr
        'QuickTime.QuickTime', // QuickTime
        // 5 versions of real players
        'rmocx.RealPlayer G2 Control', 'rmocx.RealPlayer G2 Control.1', 'RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)', 'RealVideo.RealVideo(tm) ActiveX Control (32-bit)', 'RealPlayer', 'SWCtl.SWCtl', // ShockWave player
        'WMPlayer.OCX', // Windows media player
        'AgControl.AgControl', // Silverlight
        'Skype.Detection'];

        // starting to detect plugins in IE
        return this.map(names, function (name) {
          try {
            new ActiveXObject(name);
            return name;
          } catch (e) {
            return null;
          }
        }).join(';');
      } else {
        return ""; // behavior prior version 0.5.0, not breaking backwards compat.
      }
    },

    getScreenResolution: function getScreenResolution() {
      var resolution;
      if (this.screen_orientation) {
        resolution = screen.height > screen.width ? [screen.height, screen.width] : [screen.width, screen.height];
      } else {
        resolution = [screen.height, screen.width];
      }
      return resolution;
    },

    getCanvasFingerprint: function getCanvasFingerprint() {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      // https://www.browserleaks.com/canvas#how-does-it-work
      var txt = 'http://valve.github.io';
      ctx.textBaseline = "top";
      ctx.font = "14px 'Arial'";
      ctx.textBaseline = "alphabetic";
      ctx.fillStyle = "#f60";
      ctx.fillRect(125, 1, 62, 20);
      ctx.fillStyle = "#069";
      ctx.fillText(txt, 2, 15);
      ctx.fillStyle = "rgba(102, 204, 0, 0.7)";
      ctx.fillText(txt, 4, 17);
      return canvas.toDataURL();
    }
  };

  return Fingerprint;
});
/** Notify.js - v0.3.1 - 2014/06/29
 * http://notifyjs.com/
 * Copyright (c) 2014 Jaime Pillora - MIT
 */
(function (window, document, $, undefined) {
    'use strict';

    var Notification,
        addStyle,
        blankFieldName,
        coreStyle,
        createElem,
        defaults,
        _encode,
        find,
        findFields,
        getAnchorElement,
        getStyle,
        globalAnchors,
        hAligns,
        incr,
        inherit,
        insertCSS,
        mainPositions,
        opposites,
        parsePosition,
        pluginClassName,
        pluginName,
        pluginOptions,
        positions,
        realign,
        stylePrefixes,
        styles,
        vAligns,
        __indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }return -1;
    };

    pluginName = 'notify';

    pluginClassName = pluginName + 'js';

    blankFieldName = pluginName + "!blank";

    positions = {
        t: 'top',
        m: 'middle',
        b: 'bottom',
        l: 'left',
        c: 'center',
        r: 'right'
    };

    hAligns = ['l', 'c', 'r'];

    vAligns = ['t', 'm', 'b'];

    mainPositions = ['t', 'b', 'l', 'r'];

    opposites = {
        t: 'b',
        m: null,
        b: 't',
        l: 'r',
        c: null,
        r: 'l'
    };

    parsePosition = function parsePosition(str) {
        var pos;
        pos = [];
        $.each(str.split(/\W+/), function (i, word) {
            var w;
            w = word.toLowerCase().charAt(0);
            if (positions[w]) {
                return pos.push(w);
            }
        });
        return pos;
    };

    styles = {};

    coreStyle = {
        name: 'core',
        html: "<div class=\"" + pluginClassName + "-wrapper\">\n  <div class=\"" + pluginClassName + "-arrow\"></div>\n  <div class=\"" + pluginClassName + "-container\"></div>\n</div>",
        css: "." + pluginClassName + "-corner {\n  position: fixed;\n  margin: 5px;\n  z-index: 1050;\n}\n\n." + pluginClassName + "-corner ." + pluginClassName + "-wrapper,\n." + pluginClassName + "-corner ." + pluginClassName + "-container {\n  position: relative;\n  display: block;\n  height: inherit;\n  width: inherit;\n  margin: 3px;\n}\n\n." + pluginClassName + "-wrapper {\n  z-index: 2;\n  position: absolute;\n  display: inline-block;\n  height: 0;\n  width: 0;\n}\n\n." + pluginClassName + "-container {\n  display: none;\n  z-index: 1;\n  position: absolute;\n}\n\n." + pluginClassName + "-hidable {\n  cursor: pointer;\n}\n\n[data-notify-text],[data-notify-html] {\n  position: relative;\n}\n\n." + pluginClassName + "-arrow {\n  position: absolute;\n  z-index: 2;\n  width: 0;\n  height: 0;\n}"
    };

    stylePrefixes = {
        "border-radius": ["-webkit-", "-moz-"]
    };

    getStyle = function getStyle(name) {
        return styles[name];
    };

    addStyle = function addStyle(name, def) {
        var cssText, elem, fields, _ref;
        if (!name) {
            throw "Missing Style name";
        }
        if (!def) {
            throw "Missing Style definition";
        }
        if (!def.html) {
            throw "Missing Style HTML";
        }
        if ((_ref = styles[name]) != null ? _ref.cssElem : void 0) {
            if (window.console) {
                console.warn("" + pluginName + ": overwriting style '" + name + "'");
            }
            styles[name].cssElem.remove();
        }
        def.name = name;
        styles[name] = def;
        cssText = "";
        if (def.classes) {
            $.each(def.classes, function (className, props) {
                cssText += "." + pluginClassName + "-" + def.name + "-" + className + " {\n";
                $.each(props, function (name, val) {
                    if (stylePrefixes[name]) {
                        $.each(stylePrefixes[name], function (i, prefix) {
                            return cssText += "  " + prefix + name + ": " + val + ";\n";
                        });
                    }
                    return cssText += "  " + name + ": " + val + ";\n";
                });
                return cssText += "}\n";
            });
        }
        if (def.css) {
            cssText += "/* styles for " + def.name + " */\n" + def.css;
        }
        if (cssText) {
            def.cssElem = insertCSS(cssText);
            def.cssElem.attr('id', "notify-" + def.name);
        }
        fields = {};
        elem = $(def.html);
        findFields('html', elem, fields);
        findFields('text', elem, fields);
        return def.fields = fields;
    };

    insertCSS = function insertCSS(cssText) {
        var elem;
        elem = createElem("style");
        elem.attr('type', 'text/css');
        $("head").append(elem);
        try {
            elem.html(cssText);
        } catch (e) {
            elem[0].styleSheet.cssText = cssText;
        }
        return elem;
    };

    findFields = function findFields(type, elem, fields) {
        var attr;
        if (type !== 'html') {
            type = 'text';
        }
        attr = "data-notify-" + type;
        return find(elem, "[" + attr + "]").each(function () {
            var name;
            name = $(this).attr(attr);
            if (!name) {
                name = blankFieldName;
            }
            return fields[name] = type;
        });
    };

    find = function find(elem, selector) {
        if (elem.is(selector)) {
            return elem;
        } else {
            return elem.find(selector);
        }
    };

    pluginOptions = {
        clickToHide: true,
        autoHide: true,
        autoHideDelay: 5000,
        arrowShow: true,
        arrowSize: 5,
        breakNewLines: true,
        elementPosition: 'bottom right',
        globalPosition: 'top right',
        style: 'bootstrap',
        className: 'error',
        showAnimation: 'slideDown',
        showDuration: 400,
        hideAnimation: 'slideUp',
        hideDuration: 200,
        gap: 5
    };

    inherit = function inherit(a, b) {
        var F;
        F = function F() {};
        F.prototype = a;
        return $.extend(true, new F(), b);
    };

    defaults = function defaults(opts) {
        return $.extend(pluginOptions, opts);
    };

    createElem = function createElem(tag) {
        return $("<" + tag + "></" + tag + ">");
    };

    globalAnchors = {};

    getAnchorElement = function getAnchorElement(element) {
        var radios;
        if (element.is('[type=radio]')) {
            radios = element.parents('form:first').find('[type=radio]').filter(function (i, e) {
                return $(e).attr('name') === element.attr('name');
            });
            element = radios.first();
        }
        return element;
    };

    incr = function incr(obj, pos, val) {
        var opp, temp;
        if (typeof val === 'string') {
            val = parseInt(val, 10);
        } else if (typeof val !== 'number') {
            return;
        }
        if (isNaN(val)) {
            return;
        }
        opp = positions[opposites[pos.charAt(0)]];
        temp = pos;
        if (obj[opp] !== undefined) {
            pos = positions[opp.charAt(0)];
            val = -val;
        }
        if (obj[pos] === undefined) {
            obj[pos] = val;
        } else {
            obj[pos] += val;
        }
        return null;
    };

    realign = function realign(alignment, inner, outer) {
        if (alignment === 'l' || alignment === 't') {
            return 0;
        } else if (alignment === 'c' || alignment === 'm') {
            return outer / 2 - inner / 2;
        } else if (alignment === 'r' || alignment === 'b') {
            return outer - inner;
        }
        throw "Invalid alignment";
    };

    _encode = function encode(text) {
        _encode.e = _encode.e || createElem("div");
        return _encode.e.text(text).html();
    };

    Notification = function () {

        function Notification(elem, data, options) {
            if (typeof options === 'string') {
                options = {
                    className: options
                };
            }
            this.options = inherit(pluginOptions, $.isPlainObject(options) ? options : {});
            this.loadHTML();
            this.wrapper = $(coreStyle.html);
            if (this.options.clickToHide) {
                this.wrapper.addClass("" + pluginClassName + "-hidable");
            }
            this.wrapper.data(pluginClassName, this);
            this.arrow = this.wrapper.find("." + pluginClassName + "-arrow");
            this.container = this.wrapper.find("." + pluginClassName + "-container");
            this.container.append(this.userContainer);
            if (elem && elem.length) {
                this.elementType = elem.attr('type');
                this.originalElement = elem;
                this.elem = getAnchorElement(elem);
                this.elem.data(pluginClassName, this);
                this.elem.before(this.wrapper);
            }
            this.container.hide();
            this.run(data);
        }

        Notification.prototype.loadHTML = function () {
            var style;
            style = this.getStyle();
            this.userContainer = $(style.html);
            return this.userFields = style.fields;
        };

        Notification.prototype.show = function (show, userCallback) {
            var args,
                callback,
                elems,
                fn,
                hidden,
                _this = this;
            callback = function callback() {
                if (!show && !_this.elem) {
                    _this.destroy();
                }
                if (userCallback) {
                    return userCallback();
                }
            };
            hidden = this.container.parent().parents(':hidden').length > 0;
            elems = this.container.add(this.arrow);
            args = [];
            if (hidden && show) {
                fn = 'show';
            } else if (hidden && !show) {
                fn = 'hide';
            } else if (!hidden && show) {
                fn = this.options.showAnimation;
                args.push(this.options.showDuration);
            } else if (!hidden && !show) {
                fn = this.options.hideAnimation;
                args.push(this.options.hideDuration);
            } else {
                return callback();
            }
            args.push(callback);
            return elems[fn].apply(elems, args);
        };

        Notification.prototype.setGlobalPosition = function () {
            var align, anchor, css, key, main, pAlign, pMain, _ref;
            _ref = this.getPosition(), pMain = _ref[0], pAlign = _ref[1];
            main = positions[pMain];
            align = positions[pAlign];
            key = pMain + "|" + pAlign;
            anchor = globalAnchors[key];
            if (!anchor) {
                anchor = globalAnchors[key] = createElem("div");
                css = {};
                css[main] = 0;
                if (align === 'middle') {
                    css.top = '45%';
                } else if (align === 'center') {
                    css.left = '45%';
                } else {
                    css[align] = 0;
                }
                anchor.css(css).addClass("" + pluginClassName + "-corner");
                $("body").append(anchor);
            }
            return anchor.prepend(this.wrapper);
        };

        Notification.prototype.setElementPosition = function () {
            var arrowColor, arrowCss, arrowSize, color, contH, contW, css, elemH, elemIH, elemIW, elemPos, elemW, gap, mainFull, margin, opp, oppFull, pAlign, pArrow, pMain, pos, posFull, position, wrapPos, _i, _j, _len, _len1, _ref;
            position = this.getPosition();
            pMain = position[0], pAlign = position[1], pArrow = position[2];
            elemPos = this.elem.position();
            elemH = this.elem.outerHeight();
            elemW = this.elem.outerWidth();
            elemIH = this.elem.innerHeight();
            elemIW = this.elem.innerWidth();
            wrapPos = this.wrapper.position();
            contH = this.container.height();
            contW = this.container.width();
            mainFull = positions[pMain];
            opp = opposites[pMain];
            oppFull = positions[opp];
            css = {};
            css[oppFull] = pMain === 'b' ? elemH : pMain === 'r' ? elemW : 0;
            incr(css, 'top', elemPos.top - wrapPos.top);
            incr(css, 'left', elemPos.left - wrapPos.left);
            _ref = ['top', 'left'];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                pos = _ref[_i];
                margin = parseInt(this.elem.css("margin-" + pos), 10);
                if (margin) {
                    incr(css, pos, margin);
                }
            }
            gap = Math.max(0, this.options.gap - (this.options.arrowShow ? arrowSize : 0));
            incr(css, oppFull, gap);
            if (!this.options.arrowShow) {
                this.arrow.hide();
            } else {
                arrowSize = this.options.arrowSize;
                arrowCss = $.extend({}, css);
                arrowColor = this.userContainer.css("border-color") || this.userContainer.css("background-color") || 'white';
                for (_j = 0, _len1 = mainPositions.length; _j < _len1; _j++) {
                    pos = mainPositions[_j];
                    posFull = positions[pos];
                    if (pos === opp) {
                        continue;
                    }
                    color = posFull === mainFull ? arrowColor : 'transparent';
                    arrowCss["border-" + posFull] = "" + arrowSize + "px solid " + color;
                }
                incr(css, positions[opp], arrowSize);
                if (__indexOf.call(mainPositions, pAlign) >= 0) {
                    incr(arrowCss, positions[pAlign], arrowSize * 2);
                }
            }
            if (__indexOf.call(vAligns, pMain) >= 0) {
                incr(css, 'left', realign(pAlign, contW, elemW));
                if (arrowCss) {
                    incr(arrowCss, 'left', realign(pAlign, arrowSize, elemIW));
                }
            } else if (__indexOf.call(hAligns, pMain) >= 0) {
                incr(css, 'top', realign(pAlign, contH, elemH));
                if (arrowCss) {
                    incr(arrowCss, 'top', realign(pAlign, arrowSize, elemIH));
                }
            }
            if (this.container.is(":visible")) {
                css.display = 'block';
            }
            this.container.removeAttr('style').css(css);
            if (arrowCss) {
                return this.arrow.removeAttr('style').css(arrowCss);
            }
        };

        Notification.prototype.getPosition = function () {
            var pos, text, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
            text = this.options.position || (this.elem ? this.options.elementPosition : this.options.globalPosition);
            pos = parsePosition(text);
            if (pos.length === 0) {
                pos[0] = 'b';
            }
            if (_ref = pos[0], __indexOf.call(mainPositions, _ref) < 0) {
                throw "Must be one of [" + mainPositions + "]";
            }
            if (pos.length === 1 || (_ref1 = pos[0], __indexOf.call(vAligns, _ref1) >= 0) && (_ref2 = pos[1], __indexOf.call(hAligns, _ref2) < 0) || (_ref3 = pos[0], __indexOf.call(hAligns, _ref3) >= 0) && (_ref4 = pos[1], __indexOf.call(vAligns, _ref4) < 0)) {
                pos[1] = (_ref5 = pos[0], __indexOf.call(hAligns, _ref5) >= 0) ? 'm' : 'l';
            }
            if (pos.length === 2) {
                pos[2] = pos[1];
            }
            return pos;
        };

        Notification.prototype.getStyle = function (name) {
            var style;
            if (!name) {
                name = this.options.style;
            }
            if (!name) {
                name = 'default';
            }
            style = styles[name];
            if (!style) {
                throw "Missing style: " + name;
            }
            return style;
        };

        Notification.prototype.updateClasses = function () {
            var classes, style;
            classes = ['base'];
            if ($.isArray(this.options.className)) {
                classes = classes.concat(this.options.className);
            } else if (this.options.className) {
                classes.push(this.options.className);
            }
            style = this.getStyle();
            classes = $.map(classes, function (n) {
                return "" + pluginClassName + "-" + style.name + "-" + n;
            }).join(' ');
            return this.userContainer.attr('class', classes);
        };

        Notification.prototype.run = function (data, options) {
            var d,
                datas,
                name,
                type,
                value,
                _this = this;
            if ($.isPlainObject(options)) {
                $.extend(this.options, options);
            } else if ($.type(options) === 'string') {
                this.options.className = options;
            }
            if (this.container && !data) {
                this.show(false);
                return;
            } else if (!this.container && !data) {
                return;
            }
            datas = {};
            if ($.isPlainObject(data)) {
                datas = data;
            } else {
                datas[blankFieldName] = data;
            }
            for (name in datas) {
                d = datas[name];
                type = this.userFields[name];
                if (!type) {
                    continue;
                }
                if (type === 'text') {
                    d = _encode(d);
                    if (this.options.breakNewLines) {
                        d = d.replace(/\n/g, '<br/>');
                    }
                }
                value = name === blankFieldName ? '' : '=' + name;
                find(this.userContainer, "[data-notify-" + type + value + "]").html(d);
            }
            this.updateClasses();
            if (this.elem) {
                this.setElementPosition();
            } else {
                this.setGlobalPosition();
            }
            this.show(true);
            if (this.options.autoHide) {
                clearTimeout(this.autohideTimer);
                return this.autohideTimer = setTimeout(function () {
                    return _this.show(false);
                }, this.options.autoHideDelay);
            }
        };

        Notification.prototype.destroy = function () {
            return this.wrapper.remove();
        };

        return Notification;
    }();

    $[pluginName] = function (elem, data, options) {
        if (elem && elem.nodeName || elem.jquery) {
            $(elem)[pluginName](data, options);
        } else {
            options = data;
            data = elem;
            new Notification(null, data, options);
        }
        return elem;
    };

    $.fn[pluginName] = function (data, options) {
        $(this).each(function () {
            var inst;
            inst = getAnchorElement($(this)).data(pluginClassName);
            if (inst) {
                return inst.run(data, options);
            } else {
                return new Notification($(this), data, options);
            }
        });
        return this;
    };

    $.extend($[pluginName], {
        defaults: defaults,
        addStyle: addStyle,
        pluginOptions: pluginOptions,
        getStyle: getStyle,
        insertCSS: insertCSS
    });

    $(function () {
        insertCSS(coreStyle.css).attr('id', 'core-notify');
        $(document).on('click', "." + pluginClassName + "-hidable", function (e) {
            return $(this).trigger('notify-hide');
        });
        return $(document).on('notify-hide', "." + pluginClassName + "-wrapper", function (e) {
            var _ref;
            return (_ref = $(this).data(pluginClassName)) != null ? _ref.show(false) : void 0;
        });
    });
})(window, document, jQuery);

$.notify.addStyle("bootstrap", {
    html: "<div>\n<span data-notify-text></span>\n</div>",
    classes: {
        base: {
            "font-family": "Verdana",
            "padding": "8px 15px 8px 14px",
            "background-color": "#fcf8e3",
            "border": "1px solid #fbeed5",
            "border-radius": "4px",
            "line-height": "1.45", //Se a�ade el alto de l�nea para evitar conflictos con altos de l�nea de dise�o web
            "white-space": "nowrap",
            "padding-left": "15px",
            "background-repeat": "no-repeat",
            "background-position": "3px 7px",
            "color": "#ffffff"
        },
        error: {
            "color": "#ffffff",
            "font-family": "Verdana",
            "font-size": "10px",
            "background-color": "#f2555b",
            "border-color": "#f2555b"
        },
        success: {
            "color": "#468847",
            "background-color": "#DFF0D8",
            "border-color": "#D6E9C6"
        },
        info: {
            "color": "#3A87AD",
            "background-color": "#D9EDF7",
            "border-color": "#BCE8F1"
        },
        warn: {
            "color": "#C09853",
            "background-color": "#FCF8E3",
            "border-color": "#FBEED5"
        }
    }
});
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! VelocityJS.org (1.3.0). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */

/*************************
 Velocity jQuery Shim
 *************************/

/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */

/* This file contains the jQuery functions that Velocity relies on, thereby removing Velocity's dependency on a full copy of jQuery, and allowing it to work in any environment. */
/* These shimmed functions are only used if jQuery isn't present. If both this shim and jQuery are loaded, Velocity defaults to jQuery proper. */
/* Browser support: Using this shim instead of jQuery proper removes support for IE8. */

(function (window) {
    "use strict";
    /***************
    Setup
    ***************/

    /* If jQuery is already loaded, there's no point in loading this shim. */

    if (window.jQuery) {
        return;
    }

    /* jQuery base. */
    var $ = function $(selector, context) {
        return new $.fn.init(selector, context);
    };

    /********************
    Private Methods
    ********************/

    /* jQuery */
    $.isWindow = function (obj) {
        /* jshint eqeqeq: false */
        return obj && obj === obj.window;
    };

    /* jQuery */
    $.type = function (obj) {
        if (!obj) {
            return obj + "";
        }

        return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
    };

    /* jQuery */
    $.isArray = Array.isArray || function (obj) {
        return $.type(obj) === "array";
    };

    /* jQuery */
    function isArraylike(obj) {
        var length = obj.length,
            type = $.type(obj);

        if (type === "function" || $.isWindow(obj)) {
            return false;
        }

        if (obj.nodeType === 1 && length) {
            return true;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }

    /***************
    $ Methods
    ***************/

    /* jQuery: Support removed for IE<9. */
    $.isPlainObject = function (obj) {
        var key;

        if (!obj || $.type(obj) !== "object" || obj.nodeType || $.isWindow(obj)) {
            return false;
        }

        try {
            if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            return false;
        }

        for (key in obj) {}

        return key === undefined || hasOwn.call(obj, key);
    };

    /* jQuery */
    $.each = function (obj, callback, args) {
        var value,
            i = 0,
            length = obj.length,
            isArray = isArraylike(obj);

        if (args) {
            if (isArray) {
                for (; i < length; i++) {
                    value = callback.apply(obj[i], args);

                    if (value === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    value = callback.apply(obj[i], args);

                    if (value === false) {
                        break;
                    }
                }
            }
        } else {
            if (isArray) {
                for (; i < length; i++) {
                    value = callback.call(obj[i], i, obj[i]);

                    if (value === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    value = callback.call(obj[i], i, obj[i]);

                    if (value === false) {
                        break;
                    }
                }
            }
        }

        return obj;
    };

    /* Custom */
    $.data = function (node, key, value) {
        /* $.getData() */
        if (value === undefined) {
            var getId = node[$.expando],
                store = getId && cache[getId];

            if (key === undefined) {
                return store;
            } else if (store) {
                if (key in store) {
                    return store[key];
                }
            }
            /* $.setData() */
        } else if (key !== undefined) {
            var setId = node[$.expando] || (node[$.expando] = ++$.uuid);

            cache[setId] = cache[setId] || {};
            cache[setId][key] = value;

            return value;
        }
    };

    /* Custom */
    $.removeData = function (node, keys) {
        var id = node[$.expando],
            store = id && cache[id];

        if (store) {
            // Cleanup the entire store if no keys are provided.
            if (!keys) {
                delete cache[id];
            } else {
                $.each(keys, function (_, key) {
                    delete store[key];
                });
            }
        }
    };

    /* jQuery */
    $.extend = function () {
        var src,
            copyIsArray,
            copy,
            name,
            options,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        if (typeof target === "boolean") {
            deep = target;

            target = arguments[i] || {};
            i++;
        }

        if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && $.type(target) !== "function") {
            target = {};
        }

        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            if (options = arguments[i]) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    if (target === copy) {
                        continue;
                    }

                    if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && $.isArray(src) ? src : [];
                        } else {
                            clone = src && $.isPlainObject(src) ? src : {};
                        }

                        target[name] = $.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        return target;
    };

    /* jQuery 1.4.3 */
    $.queue = function (elem, type, data) {
        function $makeArray(arr, results) {
            var ret = results || [];

            if (arr) {
                if (isArraylike(Object(arr))) {
                    /* $.merge */
                    (function (first, second) {
                        var len = +second.length,
                            j = 0,
                            i = first.length;

                        while (j < len) {
                            first[i++] = second[j++];
                        }

                        if (len !== len) {
                            while (second[j] !== undefined) {
                                first[i++] = second[j++];
                            }
                        }

                        first.length = i;

                        return first;
                    })(ret, typeof arr === "string" ? [arr] : arr);
                } else {
                    [].push.call(ret, arr);
                }
            }

            return ret;
        }

        if (!elem) {
            return;
        }

        type = (type || "fx") + "queue";

        var q = $.data(elem, type);

        if (!data) {
            return q || [];
        }

        if (!q || $.isArray(data)) {
            q = $.data(elem, type, $makeArray(data));
        } else {
            q.push(data);
        }

        return q;
    };

    /* jQuery 1.4.3 */
    $.dequeue = function (elems, type) {
        /* Custom: Embed element iteration. */
        $.each(elems.nodeType ? [elems] : elems, function (i, elem) {
            type = type || "fx";

            var queue = $.queue(elem, type),
                fn = queue.shift();

            if (fn === "inprogress") {
                fn = queue.shift();
            }

            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                fn.call(elem, function () {
                    $.dequeue(elem, type);
                });
            }
        });
    };

    /******************
    $.fn Methods
    ******************/

    /* jQuery */
    $.fn = $.prototype = {
        init: function init(selector) {
            /* Just return the element wrapped inside an array; don't proceed with the actual jQuery node wrapping process. */
            if (selector.nodeType) {
                this[0] = selector;

                return this;
            } else {
                throw new Error("Not a DOM node.");
            }
        },
        offset: function offset() {
            /* jQuery altered code: Dropped disconnected DOM node checking. */
            var box = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : { top: 0, left: 0 };

            return {
                top: box.top + (window.pageYOffset || document.scrollTop || 0) - (document.clientTop || 0),
                left: box.left + (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || 0)
            };
        },
        position: function position() {
            /* jQuery */
            function offsetParentFn(elem) {
                var offsetParent = elem.offsetParent || document;

                while (offsetParent && offsetParent.nodeType.toLowerCase !== "html" && offsetParent.style.position === "static") {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || document;
            }

            /* Zepto */
            var elem = this[0],
                offsetParent = offsetParentFn(elem),
                offset = this.offset(),
                parentOffset = /^(?:body|html)$/i.test(offsetParent.nodeName) ? { top: 0, left: 0 } : $(offsetParent).offset();

            offset.top -= parseFloat(elem.style.marginTop) || 0;
            offset.left -= parseFloat(elem.style.marginLeft) || 0;

            if (offsetParent.style) {
                parentOffset.top += parseFloat(offsetParent.style.borderTopWidth) || 0;
                parentOffset.left += parseFloat(offsetParent.style.borderLeftWidth) || 0;
            }

            return {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            };
        }
    };

    /**********************
    Private Variables
    **********************/

    /* For $.data() */
    var cache = {};
    $.expando = "velocity" + new Date().getTime();
    $.uuid = 0;

    /* For $.queue() */
    var class2type = {},
        hasOwn = class2type.hasOwnProperty,
        toString = class2type.toString;

    var types = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
    for (var i = 0; i < types.length; i++) {
        class2type["[object " + types[i] + "]"] = types[i].toLowerCase();
    }

    /* Makes $(node) possible, without having to call init. */
    $.fn.init.prototype = $.fn;

    /* Globalize Velocity onto the window, and assign its Utilities property. */
    window.Velocity = { Utilities: $ };
})(window);

/******************
 Velocity.js
 ******************/

(function (factory) {
    "use strict";
    /* CommonJS module. */

    if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = factory();
        /* AMD module. */
    } else if (typeof define === "function" && define.amd) {
        define(factory);
        /* Browser globals. */
    } else {
        factory();
    }
})(function () {
    "use strict";

    return function (global, window, document, undefined) {

        /***************
        Summary
        ***************/

        /*
        - CSS: CSS stack that works independently from the rest of Velocity.
        - animate(): Core animation method that iterates over the targeted elements and queues the incoming call onto each element individually.
        - Pre-Queueing: Prepare the element for animation by instantiating its data cache and processing the call's options.
        - Queueing: The logic that runs once the call has reached its point of execution in the element's $.queue() stack.
        Most logic is placed here to avoid risking it becoming stale (if the element's properties have changed).
        - Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
        - tick(): The single requestAnimationFrame loop responsible for tweening all in-progress calls.
        - completeCall(): Handles the cleanup process for each Velocity call.
        */

        /*********************
        Helper Functions
        *********************/

        /* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */
        var IE = function () {
            if (document.documentMode) {
                return document.documentMode;
            } else {
                for (var i = 7; i > 4; i--) {
                    var div = document.createElement("div");

                    div.innerHTML = "<!--[if IE " + i + "]><span></span><![endif]-->";

                    if (div.getElementsByTagName("span").length) {
                        div = null;

                        return i;
                    }
                }
            }

            return undefined;
        }();

        /* rAF shim. Gist: https://gist.github.com/julianshapiro/9497513 */
        var rAFShim = function () {
            var timeLast = 0;

            return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
                var timeCurrent = new Date().getTime(),
                    timeDelta;

                /* Dynamically set delay on a per-tick basis to match 60fps. */
                /* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
                timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
                timeLast = timeCurrent + timeDelta;

                return setTimeout(function () {
                    callback(timeCurrent + timeDelta);
                }, timeDelta);
            };
        }();

        /* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
        function compactSparseArray(array) {
            var index = -1,
                length = array ? array.length : 0,
                result = [];

            while (++index < length) {
                var value = array[index];

                if (value) {
                    result.push(value);
                }
            }

            return result;
        }

        function sanitizeElements(elements) {
            /* Unwrap jQuery/Zepto objects. */
            if (Type.isWrapped(elements)) {
                elements = [].slice.call(elements);
                /* Wrap a single element in an array so that $.each() can iterate with the element instead of its node's children. */
            } else if (Type.isNode(elements)) {
                elements = [elements];
            }

            return elements;
        }

        var Type = {
            isString: function isString(variable) {
                return typeof variable === "string";
            },
            isArray: Array.isArray || function (variable) {
                return Object.prototype.toString.call(variable) === "[object Array]";
            },
            isFunction: function isFunction(variable) {
                return Object.prototype.toString.call(variable) === "[object Function]";
            },
            isNode: function isNode(variable) {
                return variable && variable.nodeType;
            },
            /* Copyright Martin Bohm. MIT License: https://gist.github.com/Tomalak/818a78a226a0738eaade */
            isNodeList: function isNodeList(variable) {
                return (typeof variable === "undefined" ? "undefined" : _typeof(variable)) === "object" && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(variable)) && variable.length !== undefined && (variable.length === 0 || _typeof(variable[0]) === "object" && variable[0].nodeType > 0);
            },
            /* Determine if variable is a wrapped jQuery or Zepto element. */
            isWrapped: function isWrapped(variable) {
                return variable && (variable.jquery || window.Zepto && window.Zepto.zepto.isZ(variable));
            },
            isSVG: function isSVG(variable) {
                return window.SVGElement && variable instanceof window.SVGElement;
            },
            isEmptyObject: function isEmptyObject(variable) {
                for (var name in variable) {
                    return false;
                }

                return true;
            }
        };

        /*****************
        Dependencies
        *****************/

        var $,
            isJQuery = false;

        if (global.fn && global.fn.jquery) {
            $ = global;
            isJQuery = true;
        } else {
            $ = window.Velocity.Utilities;
        }

        if (IE <= 8 && !isJQuery) {
            throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
        } else if (IE <= 7) {
            /* Revert to jQuery's $.animate(), and lose Velocity's extra features. */
            jQuery.fn.velocity = jQuery.fn.animate;

            /* Now that $.fn.velocity is aliased, abort this Velocity declaration. */
            return;
        }

        /*****************
        Constants
        *****************/

        var DURATION_DEFAULT = 400,
            EASING_DEFAULT = "swing";

        /*************
        State
        *************/

        var Velocity = {
            /* Container for page-wide Velocity state data. */
            State: {
                /* Detect mobile devices to determine if mobileHA should be turned on. */
                isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
                /* The mobileHA option's behavior changes on older Android devices (Gingerbread, versions 2.3.3-2.3.7). */
                isAndroid: /Android/i.test(navigator.userAgent),
                isGingerbread: /Android 2\.3\.[3-7]/i.test(navigator.userAgent),
                isChrome: window.chrome,
                isFirefox: /Firefox/i.test(navigator.userAgent),
                /* Create a cached element for re-use when checking for CSS property prefixes. */
                prefixElement: document.createElement("div"),
                /* Cache every prefix match to avoid repeating lookups. */
                prefixMatches: {},
                /* Cache the anchor used for animating window scrolling. */
                scrollAnchor: null,
                /* Cache the browser-specific property names associated with the scroll anchor. */
                scrollPropertyLeft: null,
                scrollPropertyTop: null,
                /* Keep track of whether our RAF tick is running. */
                isTicking: false,
                /* Container for every in-progress call to Velocity. */
                calls: []
            },
            /* Velocity's custom CSS stack. Made global for unit testing. */
            CSS: {/* Defined below. */},
            /* A shim of the jQuery utility functions used by Velocity -- provided by Velocity's optional jQuery shim. */
            Utilities: $,
            /* Container for the user's custom animation redirects that are referenced by name in place of the properties map argument. */
            Redirects: {/* Manually registered by the user. */},
            Easings: {/* Defined below. */},
            /* Attempt to use ES6 Promises by default. Users can override this with a third-party promises library. */
            Promise: window.Promise,
            /* Velocity option defaults, which can be overriden by the user. */
            defaults: {
                queue: "",
                duration: DURATION_DEFAULT,
                easing: EASING_DEFAULT,
                begin: undefined,
                complete: undefined,
                progress: undefined,
                display: undefined,
                visibility: undefined,
                loop: false,
                delay: false,
                mobileHA: true,
                /* Advanced: Set to false to prevent property values from being cached between consecutive Velocity-initiated chain calls. */
                _cacheValues: true
            },
            /* A design goal of Velocity is to cache data wherever possible in order to avoid DOM requerying. Accordingly, each element has a data cache. */
            init: function init(element) {
                $.data(element, "velocity", {
                    /* Store whether this is an SVG element, since its properties are retrieved and updated differently than standard HTML elements. */
                    isSVG: Type.isSVG(element),
                    /* Keep track of whether the element is currently being animated by Velocity.
                    This is used to ensure that property values are not transferred between non-consecutive (stale) calls. */
                    isAnimating: false,
                    /* A reference to the element's live computedStyle object. Learn more here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
                    computedStyle: null,
                    /* Tween data is cached for each animation on the element so that data can be passed across calls --
                    in particular, end values are used as subsequent start values in consecutive Velocity calls. */
                    tweensContainer: null,
                    /* The full root property values of each CSS hook being animated on this element are cached so that:
                    1) Concurrently-animating hooks sharing the same root can have their root values' merged into one while tweening.
                    2) Post-hook-injection root values can be transferred over to consecutively chained Velocity calls as starting root values. */
                    rootPropertyValueCache: {},
                    /* A cache for transform updates, which must be manually flushed via CSS.flushTransformCache(). */
                    transformCache: {}
                });
            },
            /* A parallel to jQuery's $.css(), used for getting/setting Velocity's hooked CSS properties. */
            hook: null, /* Defined below. */
            /* Velocity-wide animation time remapping for testing purposes. */
            mock: false,
            version: { major: 1, minor: 3, patch: 0 },
            /* Set to 1 or 2 (most verbose) to output debug info to console. */
            debug: false
        };

        /* Retrieve the appropriate scroll anchor and property name for the browser: https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY */
        if (window.pageYOffset !== undefined) {
            Velocity.State.scrollAnchor = window;
            Velocity.State.scrollPropertyLeft = "pageXOffset";
            Velocity.State.scrollPropertyTop = "pageYOffset";
        } else {
            Velocity.State.scrollAnchor = document.documentElement || document.body.parentNode || document.body;
            Velocity.State.scrollPropertyLeft = "scrollLeft";
            Velocity.State.scrollPropertyTop = "scrollTop";
        }

        /* Shorthand alias for jQuery's $.data() utility. */
        function Data(element) {
            /* Hardcode a reference to the plugin name. */
            var response = $.data(element, "velocity");

            /* jQuery <=1.4.2 returns null instead of undefined when no match is found. We normalize this behavior. */
            return response === null ? undefined : response;
        }

        /**************
        Easing
        **************/

        /* Step easing generator. */
        function generateStep(steps) {
            return function (p) {
                return Math.round(p * steps) * (1 / steps);
            };
        }

        /* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
        function generateBezier(mX1, mY1, mX2, mY2) {
            var NEWTON_ITERATIONS = 4,
                NEWTON_MIN_SLOPE = 0.001,
                SUBDIVISION_PRECISION = 0.0000001,
                SUBDIVISION_MAX_ITERATIONS = 10,
                kSplineTableSize = 11,
                kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
                float32ArraySupported = "Float32Array" in window;

            /* Must contain four arguments. */
            if (arguments.length !== 4) {
                return false;
            }

            /* Arguments must be numbers. */
            for (var i = 0; i < 4; ++i) {
                if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
                    return false;
                }
            }

            /* X values must be in the [0, 1] range. */
            mX1 = Math.min(mX1, 1);
            mX2 = Math.min(mX2, 1);
            mX1 = Math.max(mX1, 0);
            mX2 = Math.max(mX2, 0);

            var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

            function A(aA1, aA2) {
                return 1.0 - 3.0 * aA2 + 3.0 * aA1;
            }
            function B(aA1, aA2) {
                return 3.0 * aA2 - 6.0 * aA1;
            }
            function C(aA1) {
                return 3.0 * aA1;
            }

            function calcBezier(aT, aA1, aA2) {
                return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
            }

            function getSlope(aT, aA1, aA2) {
                return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
            }

            function newtonRaphsonIterate(aX, aGuessT) {
                for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
                    var currentSlope = getSlope(aGuessT, mX1, mX2);

                    if (currentSlope === 0.0) {
                        return aGuessT;
                    }

                    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
                    aGuessT -= currentX / currentSlope;
                }

                return aGuessT;
            }

            function calcSampleValues() {
                for (var i = 0; i < kSplineTableSize; ++i) {
                    mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
                }
            }

            function binarySubdivide(aX, aA, aB) {
                var currentX,
                    currentT,
                    i = 0;

                do {
                    currentT = aA + (aB - aA) / 2.0;
                    currentX = calcBezier(currentT, mX1, mX2) - aX;
                    if (currentX > 0.0) {
                        aB = currentT;
                    } else {
                        aA = currentT;
                    }
                } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

                return currentT;
            }

            function getTForX(aX) {
                var intervalStart = 0.0,
                    currentSample = 1,
                    lastSample = kSplineTableSize - 1;

                for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                    intervalStart += kSampleStepSize;
                }

                --currentSample;

                var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
                    guessForT = intervalStart + dist * kSampleStepSize,
                    initialSlope = getSlope(guessForT, mX1, mX2);

                if (initialSlope >= NEWTON_MIN_SLOPE) {
                    return newtonRaphsonIterate(aX, guessForT);
                } else if (initialSlope === 0.0) {
                    return guessForT;
                } else {
                    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
                }
            }

            var _precomputed = false;

            function precompute() {
                _precomputed = true;
                if (mX1 !== mY1 || mX2 !== mY2) {
                    calcSampleValues();
                }
            }

            var f = function f(aX) {
                if (!_precomputed) {
                    precompute();
                }
                if (mX1 === mY1 && mX2 === mY2) {
                    return aX;
                }
                if (aX === 0) {
                    return 0;
                }
                if (aX === 1) {
                    return 1;
                }

                return calcBezier(getTForX(aX), mY1, mY2);
            };

            f.getControlPoints = function () {
                return [{ x: mX1, y: mY1 }, { x: mX2, y: mY2 }];
            };

            var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
            f.toString = function () {
                return str;
            };

            return f;
        }

        /* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
        /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
        then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
        var generateSpringRK4 = function () {
            function springAccelerationForState(state) {
                return -state.tension * state.x - state.friction * state.v;
            }

            function springEvaluateStateWithDerivative(initialState, dt, derivative) {
                var state = {
                    x: initialState.x + derivative.dx * dt,
                    v: initialState.v + derivative.dv * dt,
                    tension: initialState.tension,
                    friction: initialState.friction
                };

                return { dx: state.v, dv: springAccelerationForState(state) };
            }

            function springIntegrateState(state, dt) {
                var a = {
                    dx: state.v,
                    dv: springAccelerationForState(state)
                },
                    b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
                    c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
                    d = springEvaluateStateWithDerivative(state, dt, c),
                    dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
                    dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

                state.x = state.x + dxdt * dt;
                state.v = state.v + dvdt * dt;

                return state;
            }

            return function springRK4Factory(tension, friction, duration) {

                var initState = {
                    x: -1,
                    v: 0,
                    tension: null,
                    friction: null
                },
                    path = [0],
                    time_lapsed = 0,
                    tolerance = 1 / 10000,
                    DT = 16 / 1000,
                    have_duration,
                    dt,
                    last_state;

                tension = parseFloat(tension) || 500;
                friction = parseFloat(friction) || 20;
                duration = duration || null;

                initState.tension = tension;
                initState.friction = friction;

                have_duration = duration !== null;

                /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
                if (have_duration) {
                    /* Run the simulation without a duration. */
                    time_lapsed = springRK4Factory(tension, friction);
                    /* Compute the adjusted time delta. */
                    dt = time_lapsed / duration * DT;
                } else {
                    dt = DT;
                }

                while (true) {
                    /* Next/step function .*/
                    last_state = springIntegrateState(last_state || initState, dt);
                    /* Store the position. */
                    path.push(1 + last_state.x);
                    time_lapsed += 16;
                    /* If the change threshold is reached, break. */
                    if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
                        break;
                    }
                }

                /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
                computed path and returns a snapshot of the position according to a given percentComplete. */
                return !have_duration ? time_lapsed : function (percentComplete) {
                    return path[percentComplete * (path.length - 1) | 0];
                };
            };
        }();

        /* jQuery easings. */
        Velocity.Easings = {
            linear: function linear(p) {
                return p;
            },
            swing: function swing(p) {
                return 0.5 - Math.cos(p * Math.PI) / 2;
            },
            /* Bonus "spring" easing, which is a less exaggerated version of easeInOutElastic. */
            spring: function spring(p) {
                return 1 - Math.cos(p * 4.5 * Math.PI) * Math.exp(-p * 6);
            }
        };

        /* CSS3 and Robert Penner easings. */
        $.each([["ease", [0.25, 0.1, 0.25, 1.0]], ["ease-in", [0.42, 0.0, 1.00, 1.0]], ["ease-out", [0.00, 0.0, 0.58, 1.0]], ["ease-in-out", [0.42, 0.0, 0.58, 1.0]], ["easeInSine", [0.47, 0, 0.745, 0.715]], ["easeOutSine", [0.39, 0.575, 0.565, 1]], ["easeInOutSine", [0.445, 0.05, 0.55, 0.95]], ["easeInQuad", [0.55, 0.085, 0.68, 0.53]], ["easeOutQuad", [0.25, 0.46, 0.45, 0.94]], ["easeInOutQuad", [0.455, 0.03, 0.515, 0.955]], ["easeInCubic", [0.55, 0.055, 0.675, 0.19]], ["easeOutCubic", [0.215, 0.61, 0.355, 1]], ["easeInOutCubic", [0.645, 0.045, 0.355, 1]], ["easeInQuart", [0.895, 0.03, 0.685, 0.22]], ["easeOutQuart", [0.165, 0.84, 0.44, 1]], ["easeInOutQuart", [0.77, 0, 0.175, 1]], ["easeInQuint", [0.755, 0.05, 0.855, 0.06]], ["easeOutQuint", [0.23, 1, 0.32, 1]], ["easeInOutQuint", [0.86, 0, 0.07, 1]], ["easeInExpo", [0.95, 0.05, 0.795, 0.035]], ["easeOutExpo", [0.19, 1, 0.22, 1]], ["easeInOutExpo", [1, 0, 0, 1]], ["easeInCirc", [0.6, 0.04, 0.98, 0.335]], ["easeOutCirc", [0.075, 0.82, 0.165, 1]], ["easeInOutCirc", [0.785, 0.135, 0.15, 0.86]]], function (i, easingArray) {
            Velocity.Easings[easingArray[0]] = generateBezier.apply(null, easingArray[1]);
        });

        /* Determine the appropriate easing type given an easing input. */
        function getEasing(value, duration) {
            var easing = value;

            /* The easing option can either be a string that references a pre-registered easing,
            or it can be a two-/four-item array of integers to be converted into a bezier/spring function. */
            if (Type.isString(value)) {
                /* Ensure that the easing has been assigned to jQuery's Velocity.Easings object. */
                if (!Velocity.Easings[value]) {
                    easing = false;
                }
            } else if (Type.isArray(value) && value.length === 1) {
                easing = generateStep.apply(null, value);
            } else if (Type.isArray(value) && value.length === 2) {
                /* springRK4 must be passed the animation's duration. */
                /* Note: If the springRK4 array contains non-numbers, generateSpringRK4() returns an easing
                function generated with default tension and friction values. */
                easing = generateSpringRK4.apply(null, value.concat([duration]));
            } else if (Type.isArray(value) && value.length === 4) {
                /* Note: If the bezier array contains non-numbers, generateBezier() returns false. */
                easing = generateBezier.apply(null, value);
            } else {
                easing = false;
            }

            /* Revert to the Velocity-wide default easing type, or fall back to "swing" (which is also jQuery's default)
            if the Velocity-wide default has been incorrectly modified. */
            if (easing === false) {
                if (Velocity.Easings[Velocity.defaults.easing]) {
                    easing = Velocity.defaults.easing;
                } else {
                    easing = EASING_DEFAULT;
                }
            }

            return easing;
        }

        /*****************
        CSS Stack
        *****************/

        /* The CSS object is a highly condensed and performant CSS stack that fully replaces jQuery's.
        It handles the validation, getting, and setting of both standard CSS properties and CSS property hooks. */
        /* Note: A "CSS" shorthand is aliased so that our code is easier to read. */
        var CSS = Velocity.CSS = {
            /*************
            RegEx
            *************/

            RegEx: {
                isHex: /^#([A-f\d]{3}){1,2}$/i,
                /* Unwrap a property value's surrounding text, e.g. "rgba(4, 3, 2, 1)" ==> "4, 3, 2, 1" and "rect(4px 3px 2px 1px)" ==> "4px 3px 2px 1px". */
                valueUnwrap: /^[A-z]+\((.*)\)$/i,
                wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
                /* Split a multi-value property into an array of subvalues, e.g. "rgba(4, 3, 2, 1) 4px 3px 2px 1px" ==> [ "rgba(4, 3, 2, 1)", "4px", "3px", "2px", "1px" ]. */
                valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/ig
            },
            /************
            Lists
            ************/

            Lists: {
                colors: ["fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor"],
                transformsBase: ["translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ"],
                transforms3D: ["transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY"]
            },
            /************
            Hooks
            ************/

            /* Hooks allow a subproperty (e.g. "boxShadowBlur") of a compound-value CSS property
            (e.g. "boxShadow: X Y Blur Spread Color") to be animated as if it were a discrete property. */
            /* Note: Beyond enabling fine-grained property animation, hooking is necessary since Velocity only
            tweens properties with single numeric values; unlike CSS transitions, Velocity does not interpolate compound-values. */
            Hooks: {
                /********************
                Registration
                ********************/

                /* Templates are a concise way of indicating which subproperties must be individually registered for each compound-value CSS property. */
                /* Each template consists of the compound-value's base name, its constituent subproperty names, and those subproperties' default values. */
                templates: {
                    "textShadow": ["Color X Y Blur", "black 0px 0px 0px"],
                    "boxShadow": ["Color X Y Blur Spread", "black 0px 0px 0px 0px"],
                    "clip": ["Top Right Bottom Left", "0px 0px 0px 0px"],
                    "backgroundPosition": ["X Y", "0% 0%"],
                    "transformOrigin": ["X Y Z", "50% 50% 0px"],
                    "perspectiveOrigin": ["X Y", "50% 50%"]
                },
                /* A "registered" hook is one that has been converted from its template form into a live,
                tweenable property. It contains data to associate it with its root property. */
                registered: {
                    /* Note: A registered hook looks like this ==> textShadowBlur: [ "textShadow", 3 ],
                    which consists of the subproperty's name, the associated root property's name,
                    and the subproperty's position in the root's value. */
                },
                /* Convert the templates into individual hooks then append them to the registered object above. */
                register: function register() {
                    /* Color hooks registration: Colors are defaulted to white -- as opposed to black -- since colors that are
                    currently set to "transparent" default to their respective template below when color-animated,
                    and white is typically a closer match to transparent than black is. An exception is made for text ("color"),
                    which is almost always set closer to black than white. */
                    for (var i = 0; i < CSS.Lists.colors.length; i++) {
                        var rgbComponents = CSS.Lists.colors[i] === "color" ? "0 0 0 1" : "255 255 255 1";
                        CSS.Hooks.templates[CSS.Lists.colors[i]] = ["Red Green Blue Alpha", rgbComponents];
                    }

                    var rootProperty, hookTemplate, hookNames;

                    /* In IE, color values inside compound-value properties are positioned at the end the value instead of at the beginning.
                    Thus, we re-arrange the templates accordingly. */
                    if (IE) {
                        for (rootProperty in CSS.Hooks.templates) {
                            hookTemplate = CSS.Hooks.templates[rootProperty];
                            hookNames = hookTemplate[0].split(" ");

                            var defaultValues = hookTemplate[1].match(CSS.RegEx.valueSplit);

                            if (hookNames[0] === "Color") {
                                /* Reposition both the hook's name and its default value to the end of their respective strings. */
                                hookNames.push(hookNames.shift());
                                defaultValues.push(defaultValues.shift());

                                /* Replace the existing template for the hook's root property. */
                                CSS.Hooks.templates[rootProperty] = [hookNames.join(" "), defaultValues.join(" ")];
                            }
                        }
                    }

                    /* Hook registration. */
                    for (rootProperty in CSS.Hooks.templates) {
                        hookTemplate = CSS.Hooks.templates[rootProperty];
                        hookNames = hookTemplate[0].split(" ");

                        for (var j in hookNames) {
                            var fullHookName = rootProperty + hookNames[j],
                                hookPosition = j;

                            /* For each hook, register its full name (e.g. textShadowBlur) with its root property (e.g. textShadow)
                            and the hook's position in its template's default value string. */
                            CSS.Hooks.registered[fullHookName] = [rootProperty, hookPosition];
                        }
                    }
                },
                /*****************************
                Injection and Extraction
                *****************************/

                /* Look up the root property associated with the hook (e.g. return "textShadow" for "textShadowBlur"). */
                /* Since a hook cannot be set directly (the browser won't recognize it), style updating for hooks is routed through the hook's root property. */
                getRoot: function getRoot(property) {
                    var hookData = CSS.Hooks.registered[property];

                    if (hookData) {
                        return hookData[0];
                    } else {
                        /* If there was no hook match, return the property name untouched. */
                        return property;
                    }
                },
                /* Convert any rootPropertyValue, null or otherwise, into a space-delimited list of hook values so that
                the targeted hook can be injected or extracted at its standard position. */
                cleanRootPropertyValue: function cleanRootPropertyValue(rootProperty, rootPropertyValue) {
                    /* If the rootPropertyValue is wrapped with "rgb()", "clip()", etc., remove the wrapping to normalize the value before manipulation. */
                    if (CSS.RegEx.valueUnwrap.test(rootPropertyValue)) {
                        rootPropertyValue = rootPropertyValue.match(CSS.RegEx.valueUnwrap)[1];
                    }

                    /* If rootPropertyValue is a CSS null-value (from which there's inherently no hook value to extract),
                    default to the root's default value as defined in CSS.Hooks.templates. */
                    /* Note: CSS null-values include "none", "auto", and "transparent". They must be converted into their
                    zero-values (e.g. textShadow: "none" ==> textShadow: "0px 0px 0px black") for hook manipulation to proceed. */
                    if (CSS.Values.isCSSNullValue(rootPropertyValue)) {
                        rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
                    }

                    return rootPropertyValue;
                },
                /* Extracted the hook's value from its root property's value. This is used to get the starting value of an animating hook. */
                extractValue: function extractValue(fullHookName, rootPropertyValue) {
                    var hookData = CSS.Hooks.registered[fullHookName];

                    if (hookData) {
                        var hookRoot = hookData[0],
                            hookPosition = hookData[1];

                        rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

                        /* Split rootPropertyValue into its constituent hook values then grab the desired hook at its standard position. */
                        return rootPropertyValue.toString().match(CSS.RegEx.valueSplit)[hookPosition];
                    } else {
                        /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
                        return rootPropertyValue;
                    }
                },
                /* Inject the hook's value into its root property's value. This is used to piece back together the root property
                once Velocity has updated one of its individually hooked values through tweening. */
                injectValue: function injectValue(fullHookName, hookValue, rootPropertyValue) {
                    var hookData = CSS.Hooks.registered[fullHookName];

                    if (hookData) {
                        var hookRoot = hookData[0],
                            hookPosition = hookData[1],
                            rootPropertyValueParts,
                            rootPropertyValueUpdated;

                        rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

                        /* Split rootPropertyValue into its individual hook values, replace the targeted value with hookValue,
                        then reconstruct the rootPropertyValue string. */
                        rootPropertyValueParts = rootPropertyValue.toString().match(CSS.RegEx.valueSplit);
                        rootPropertyValueParts[hookPosition] = hookValue;
                        rootPropertyValueUpdated = rootPropertyValueParts.join(" ");

                        return rootPropertyValueUpdated;
                    } else {
                        /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
                        return rootPropertyValue;
                    }
                }
            },
            /*******************
            Normalizations
            *******************/

            /* Normalizations standardize CSS property manipulation by pollyfilling browser-specific implementations (e.g. opacity)
            and reformatting special properties (e.g. clip, rgba) to look like standard ones. */
            Normalizations: {
                /* Normalizations are passed a normalization target (either the property's name, its extracted value, or its injected value),
                the targeted element (which may need to be queried), and the targeted property value. */
                registered: {
                    clip: function clip(type, element, propertyValue) {
                        switch (type) {
                            case "name":
                                return "clip";
                            /* Clip needs to be unwrapped and stripped of its commas during extraction. */
                            case "extract":
                                var extracted;

                                /* If Velocity also extracted this value, skip extraction. */
                                if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                                    extracted = propertyValue;
                                } else {
                                    /* Remove the "rect()" wrapper. */
                                    extracted = propertyValue.toString().match(CSS.RegEx.valueUnwrap);

                                    /* Strip off commas. */
                                    extracted = extracted ? extracted[1].replace(/,(\s+)?/g, " ") : propertyValue;
                                }

                                return extracted;
                            /* Clip needs to be re-wrapped during injection. */
                            case "inject":
                                return "rect(" + propertyValue + ")";
                        }
                    },
                    blur: function blur(type, element, propertyValue) {
                        switch (type) {
                            case "name":
                                return Velocity.State.isFirefox ? "filter" : "-webkit-filter";
                            case "extract":
                                var extracted = parseFloat(propertyValue);

                                /* If extracted is NaN, meaning the value isn't already extracted. */
                                if (!(extracted || extracted === 0)) {
                                    var blurComponent = propertyValue.toString().match(/blur\(([0-9]+[A-z]+)\)/i);

                                    /* If the filter string had a blur component, return just the blur value and unit type. */
                                    if (blurComponent) {
                                        extracted = blurComponent[1];
                                        /* If the component doesn't exist, default blur to 0. */
                                    } else {
                                        extracted = 0;
                                    }
                                }

                                return extracted;
                            /* Blur needs to be re-wrapped during injection. */
                            case "inject":
                                /* For the blur effect to be fully de-applied, it needs to be set to "none" instead of 0. */
                                if (!parseFloat(propertyValue)) {
                                    return "none";
                                } else {
                                    return "blur(" + propertyValue + ")";
                                }
                        }
                    },
                    /* <=IE8 do not support the standard opacity property. They use filter:alpha(opacity=INT) instead. */
                    opacity: function opacity(type, element, propertyValue) {
                        if (IE <= 8) {
                            switch (type) {
                                case "name":
                                    return "filter";
                                case "extract":
                                    /* <=IE8 return a "filter" value of "alpha(opacity=\d{1,3})".
                                    Extract the value and convert it to a decimal value to match the standard CSS opacity property's formatting. */
                                    var extracted = propertyValue.toString().match(/alpha\(opacity=(.*)\)/i);

                                    if (extracted) {
                                        /* Convert to decimal value. */
                                        propertyValue = extracted[1] / 100;
                                    } else {
                                        /* When extracting opacity, default to 1 since a null value means opacity hasn't been set. */
                                        propertyValue = 1;
                                    }

                                    return propertyValue;
                                case "inject":
                                    /* Opacified elements are required to have their zoom property set to a non-zero value. */
                                    element.style.zoom = 1;

                                    /* Setting the filter property on elements with certain font property combinations can result in a
                                    highly unappealing ultra-bolding effect. There's no way to remedy this throughout a tween, but dropping the
                                    value altogether (when opacity hits 1) at leasts ensures that the glitch is gone post-tweening. */
                                    if (parseFloat(propertyValue) >= 1) {
                                        return "";
                                    } else {
                                        /* As per the filter property's spec, convert the decimal value to a whole number and wrap the value. */
                                        return "alpha(opacity=" + parseInt(parseFloat(propertyValue) * 100, 10) + ")";
                                    }
                            }
                            /* With all other browsers, normalization is not required; return the same values that were passed in. */
                        } else {
                            switch (type) {
                                case "name":
                                    return "opacity";
                                case "extract":
                                    return propertyValue;
                                case "inject":
                                    return propertyValue;
                            }
                        }
                    }
                },
                /*****************************
                Batched Registrations
                *****************************/

                /* Note: Batched normalizations extend the CSS.Normalizations.registered object. */
                register: function register() {

                    /*****************
                    Transforms
                    *****************/

                    /* Transforms are the subproperties contained by the CSS "transform" property. Transforms must undergo normalization
                    so that they can be referenced in a properties map by their individual names. */
                    /* Note: When transforms are "set", they are actually assigned to a per-element transformCache. When all transform
                    setting is complete complete, CSS.flushTransformCache() must be manually called to flush the values to the DOM.
                    Transform setting is batched in this way to improve performance: the transform style only needs to be updated
                    once when multiple transform subproperties are being animated simultaneously. */
                    /* Note: IE9 and Android Gingerbread have support for 2D -- but not 3D -- transforms. Since animating unsupported
                    transform properties results in the browser ignoring the *entire* transform string, we prevent these 3D values
                    from being normalized for these browsers so that tweening skips these properties altogether
                    (since it will ignore them as being unsupported by the browser.) */
                    if ((!IE || IE > 9) && !Velocity.State.isGingerbread) {
                        /* Note: Since the standalone CSS "perspective" property and the CSS transform "perspective" subproperty
                        share the same name, the latter is given a unique token within Velocity: "transformPerspective". */
                        CSS.Lists.transformsBase = CSS.Lists.transformsBase.concat(CSS.Lists.transforms3D);
                    }

                    for (var i = 0; i < CSS.Lists.transformsBase.length; i++) {
                        /* Wrap the dynamically generated normalization function in a new scope so that transformName's value is
                        paired with its respective function. (Otherwise, all functions would take the final for loop's transformName.) */
                        (function () {
                            var transformName = CSS.Lists.transformsBase[i];

                            CSS.Normalizations.registered[transformName] = function (type, element, propertyValue) {
                                switch (type) {
                                    /* The normalized property name is the parent "transform" property -- the property that is actually set in CSS. */
                                    case "name":
                                        return "transform";
                                    /* Transform values are cached onto a per-element transformCache object. */
                                    case "extract":
                                        /* If this transform has yet to be assigned a value, return its null value. */
                                        if (Data(element) === undefined || Data(element).transformCache[transformName] === undefined) {
                                            /* Scale CSS.Lists.transformsBase default to 1 whereas all other transform properties default to 0. */
                                            return (/^scale/i.test(transformName) ? 1 : 0
                                            );
                                            /* When transform values are set, they are wrapped in parentheses as per the CSS spec.
                                            Thus, when extracting their values (for tween calculations), we strip off the parentheses. */
                                        }
                                        return Data(element).transformCache[transformName].replace(/[()]/g, "");
                                    case "inject":
                                        var invalid = false;

                                        /* If an individual transform property contains an unsupported unit type, the browser ignores the *entire* transform property.
                                        Thus, protect users from themselves by skipping setting for transform values supplied with invalid unit types. */
                                        /* Switch on the base transform type; ignore the axis by removing the last letter from the transform's name. */
                                        switch (transformName.substr(0, transformName.length - 1)) {
                                            /* Whitelist unit types for each transform. */
                                            case "translate":
                                                invalid = !/(%|px|em|rem|vw|vh|\d)$/i.test(propertyValue);
                                                break;
                                            /* Since an axis-free "scale" property is supported as well, a little hack is used here to detect it by chopping off its last letter. */
                                            case "scal":
                                            case "scale":
                                                /* Chrome on Android has a bug in which scaled elements blur if their initial scale
                                                value is below 1 (which can happen with forcefeeding). Thus, we detect a yet-unset scale property
                                                and ensure that its first value is always 1. More info: http://stackoverflow.com/questions/10417890/css3-animations-with-transform-causes-blurred-elements-on-webkit/10417962#10417962 */
                                                if (Velocity.State.isAndroid && Data(element).transformCache[transformName] === undefined && propertyValue < 1) {
                                                    propertyValue = 1;
                                                }

                                                invalid = !/(\d)$/i.test(propertyValue);
                                                break;
                                            case "skew":
                                                invalid = !/(deg|\d)$/i.test(propertyValue);
                                                break;
                                            case "rotate":
                                                invalid = !/(deg|\d)$/i.test(propertyValue);
                                                break;
                                        }

                                        if (!invalid) {
                                            /* As per the CSS spec, wrap the value in parentheses. */
                                            Data(element).transformCache[transformName] = "(" + propertyValue + ")";
                                        }

                                        /* Although the value is set on the transformCache object, return the newly-updated value for the calling code to process as normal. */
                                        return Data(element).transformCache[transformName];
                                }
                            };
                        })();
                    }

                    /*************
                    Colors
                    *************/

                    /* Since Velocity only animates a single numeric value per property, color animation is achieved by hooking the individual RGBA components of CSS color properties.
                    Accordingly, color values must be normalized (e.g. "#ff0000", "red", and "rgb(255, 0, 0)" ==> "255 0 0 1") so that their components can be injected/extracted by CSS.Hooks logic. */
                    for (var j = 0; j < CSS.Lists.colors.length; j++) {
                        /* Wrap the dynamically generated normalization function in a new scope so that colorName's value is paired with its respective function.
                        (Otherwise, all functions would take the final for loop's colorName.) */
                        (function () {
                            var colorName = CSS.Lists.colors[j];

                            /* Note: In IE<=8, which support rgb but not rgba, color properties are reverted to rgb by stripping off the alpha component. */
                            CSS.Normalizations.registered[colorName] = function (type, element, propertyValue) {
                                switch (type) {
                                    case "name":
                                        return colorName;
                                    /* Convert all color values into the rgb format. (Old IE can return hex values and color names instead of rgb/rgba.) */
                                    case "extract":
                                        var extracted;

                                        /* If the color is already in its hookable form (e.g. "255 255 255 1") due to having been previously extracted, skip extraction. */
                                        if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                                            extracted = propertyValue;
                                        } else {
                                            var converted,
                                                colorNames = {
                                                black: "rgb(0, 0, 0)",
                                                blue: "rgb(0, 0, 255)",
                                                gray: "rgb(128, 128, 128)",
                                                green: "rgb(0, 128, 0)",
                                                red: "rgb(255, 0, 0)",
                                                white: "rgb(255, 255, 255)"
                                            };

                                            /* Convert color names to rgb. */
                                            if (/^[A-z]+$/i.test(propertyValue)) {
                                                if (colorNames[propertyValue] !== undefined) {
                                                    converted = colorNames[propertyValue];
                                                } else {
                                                    /* If an unmatched color name is provided, default to black. */
                                                    converted = colorNames.black;
                                                }
                                                /* Convert hex values to rgb. */
                                            } else if (CSS.RegEx.isHex.test(propertyValue)) {
                                                converted = "rgb(" + CSS.Values.hexToRgb(propertyValue).join(" ") + ")";
                                                /* If the provided color doesn't match any of the accepted color formats, default to black. */
                                            } else if (!/^rgba?\(/i.test(propertyValue)) {
                                                converted = colorNames.black;
                                            }

                                            /* Remove the surrounding "rgb/rgba()" string then replace commas with spaces and strip
                                            repeated spaces (in case the value included spaces to begin with). */
                                            extracted = (converted || propertyValue).toString().match(CSS.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ");
                                        }

                                        /* So long as this isn't <=IE8, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
                                        if ((!IE || IE > 8) && extracted.split(" ").length === 3) {
                                            extracted += " 1";
                                        }

                                        return extracted;
                                    case "inject":
                                        /* If this is IE<=8 and an alpha component exists, strip it off. */
                                        if (IE <= 8) {
                                            if (propertyValue.split(" ").length === 4) {
                                                propertyValue = propertyValue.split(/\s+/).slice(0, 3).join(" ");
                                            }
                                            /* Otherwise, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
                                        } else if (propertyValue.split(" ").length === 3) {
                                            propertyValue += " 1";
                                        }

                                        /* Re-insert the browser-appropriate wrapper("rgb/rgba()"), insert commas, and strip off decimal units
                                        on all values but the fourth (R, G, and B only accept whole numbers). */
                                        return (IE <= 8 ? "rgb" : "rgba") + "(" + propertyValue.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")";
                                }
                            };
                        })();
                    }
                }
            },
            /************************
            CSS Property Names
            ************************/

            Names: {
                /* Camelcase a property name into its JavaScript notation (e.g. "background-color" ==> "backgroundColor").
                Camelcasing is used to normalize property names between and across calls. */
                camelCase: function camelCase(property) {
                    return property.replace(/-(\w)/g, function (match, subMatch) {
                        return subMatch.toUpperCase();
                    });
                },
                /* For SVG elements, some properties (namely, dimensional ones) are GET/SET via the element's HTML attributes (instead of via CSS styles). */
                SVGAttribute: function SVGAttribute(property) {
                    var SVGAttributes = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";

                    /* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) */
                    if (IE || Velocity.State.isAndroid && !Velocity.State.isChrome) {
                        SVGAttributes += "|transform";
                    }

                    return new RegExp("^(" + SVGAttributes + ")$", "i").test(property);
                },
                /* Determine whether a property should be set with a vendor prefix. */
                /* If a prefixed version of the property exists, return it. Otherwise, return the original property name.
                If the property is not at all supported by the browser, return a false flag. */
                prefixCheck: function prefixCheck(property) {
                    /* If this property has already been checked, return the cached value. */
                    if (Velocity.State.prefixMatches[property]) {
                        return [Velocity.State.prefixMatches[property], true];
                    } else {
                        var vendors = ["", "Webkit", "Moz", "ms", "O"];

                        for (var i = 0, vendorsLength = vendors.length; i < vendorsLength; i++) {
                            var propertyPrefixed;

                            if (i === 0) {
                                propertyPrefixed = property;
                            } else {
                                /* Capitalize the first letter of the property to conform to JavaScript vendor prefix notation (e.g. webkitFilter). */
                                propertyPrefixed = vendors[i] + property.replace(/^\w/, function (match) {
                                    return match.toUpperCase();
                                });
                            }

                            /* Check if the browser supports this property as prefixed. */
                            if (Type.isString(Velocity.State.prefixElement.style[propertyPrefixed])) {
                                /* Cache the match. */
                                Velocity.State.prefixMatches[property] = propertyPrefixed;

                                return [propertyPrefixed, true];
                            }
                        }

                        /* If the browser doesn't support this property in any form, include a false flag so that the caller can decide how to proceed. */
                        return [property, false];
                    }
                }
            },
            /************************
            CSS Property Values
            ************************/

            Values: {
                /* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
                hexToRgb: function hexToRgb(hex) {
                    var shortformRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
                        longformRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                        rgbParts;

                    hex = hex.replace(shortformRegex, function (m, r, g, b) {
                        return r + r + g + g + b + b;
                    });

                    rgbParts = longformRegex.exec(hex);

                    return rgbParts ? [parseInt(rgbParts[1], 16), parseInt(rgbParts[2], 16), parseInt(rgbParts[3], 16)] : [0, 0, 0];
                },
                isCSSNullValue: function isCSSNullValue(value) {
                    /* The browser defaults CSS values that have not been set to either 0 or one of several possible null-value strings.
                    Thus, we check for both falsiness and these special strings. */
                    /* Null-value checking is performed to default the special strings to 0 (for the sake of tweening) or their hook
                    templates as defined as CSS.Hooks (for the sake of hook injection/extraction). */
                    /* Note: Chrome returns "rgba(0, 0, 0, 0)" for an undefined color whereas IE returns "transparent". */
                    return !value || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(value);
                },
                /* Retrieve a property's default unit type. Used for assigning a unit type when one is not supplied by the user. */
                getUnitType: function getUnitType(property) {
                    if (/^(rotate|skew)/i.test(property)) {
                        return "deg";
                    } else if (/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(property)) {
                        /* The above properties are unitless. */
                        return "";
                    } else {
                        /* Default to px for all other properties. */
                        return "px";
                    }
                },
                /* HTML elements default to an associated display type when they're not set to display:none. */
                /* Note: This function is used for correctly setting the non-"none" display value in certain Velocity redirects, such as fadeIn/Out. */
                getDisplayType: function getDisplayType(element) {
                    var tagName = element && element.tagName.toString().toLowerCase();

                    if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {
                        return "inline";
                    } else if (/^(li)$/i.test(tagName)) {
                        return "list-item";
                    } else if (/^(tr)$/i.test(tagName)) {
                        return "table-row";
                    } else if (/^(table)$/i.test(tagName)) {
                        return "table";
                    } else if (/^(tbody)$/i.test(tagName)) {
                        return "table-row-group";
                        /* Default to "block" when no match is found. */
                    } else {
                        return "block";
                    }
                },
                /* The class add/remove functions are used to temporarily apply a "velocity-animating" class to elements while they're animating. */
                addClass: function addClass(element, className) {
                    if (element.classList) {
                        element.classList.add(className);
                    } else {
                        element.className += (element.className.length ? " " : "") + className;
                    }
                },
                removeClass: function removeClass(element, className) {
                    if (element.classList) {
                        element.classList.remove(className);
                    } else {
                        element.className = element.className.toString().replace(new RegExp("(^|\\s)" + className.split(" ").join("|") + "(\\s|$)", "gi"), " ");
                    }
                }
            },
            /****************************
            Style Getting & Setting
            ****************************/

            /* The singular getPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
            getPropertyValue: function getPropertyValue(element, property, rootPropertyValue, forceStyleLookup) {
                /* Get an element's computed property value. */
                /* Note: Retrieving the value of a CSS property cannot simply be performed by checking an element's
                style attribute (which only reflects user-defined values). Instead, the browser must be queried for a property's
                *computed* value. You can read more about getComputedStyle here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
                function computePropertyValue(element, property) {
                    /* When box-sizing isn't set to border-box, height and width style values are incorrectly computed when an
                    element's scrollbars are visible (which expands the element's dimensions). Thus, we defer to the more accurate
                    offsetHeight/Width property, which includes the total dimensions for interior, border, padding, and scrollbar.
                    We subtract border and padding to get the sum of interior + scrollbar. */
                    var computedValue = 0;

                    /* IE<=8 doesn't support window.getComputedStyle, thus we defer to jQuery, which has an extensive array
                    of hacks to accurately retrieve IE8 property values. Re-implementing that logic here is not worth bloating the
                    codebase for a dying browser. The performance repercussions of using jQuery here are minimal since
                    Velocity is optimized to rarely (and sometimes never) query the DOM. Further, the $.css() codepath isn't that slow. */
                    if (IE <= 8) {
                        computedValue = $.css(element, property); /* GET */
                        /* All other browsers support getComputedStyle. The returned live object reference is cached onto its
                        associated element so that it does not need to be refetched upon every GET. */
                    } else {
                        /* Browsers do not return height and width values for elements that are set to display:"none". Thus, we temporarily
                        toggle display to the element type's default value. */
                        var toggleDisplay = false;

                        if (/^(width|height)$/.test(property) && CSS.getPropertyValue(element, "display") === 0) {
                            toggleDisplay = true;
                            CSS.setPropertyValue(element, "display", CSS.Values.getDisplayType(element));
                        }

                        var revertDisplay = function revertDisplay() {
                            if (toggleDisplay) {
                                CSS.setPropertyValue(element, "display", "none");
                            }
                        };

                        if (!forceStyleLookup) {
                            if (property === "height" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                                var contentBoxHeight = element.offsetHeight - (parseFloat(CSS.getPropertyValue(element, "borderTopWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderBottomWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingTop")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingBottom")) || 0);
                                revertDisplay();

                                return contentBoxHeight;
                            } else if (property === "width" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                                var contentBoxWidth = element.offsetWidth - (parseFloat(CSS.getPropertyValue(element, "borderLeftWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderRightWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingLeft")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingRight")) || 0);
                                revertDisplay();

                                return contentBoxWidth;
                            }
                        }

                        var computedStyle;

                        /* For elements that Velocity hasn't been called on directly (e.g. when Velocity queries the DOM on behalf
                        of a parent of an element its animating), perform a direct getComputedStyle lookup since the object isn't cached. */
                        if (Data(element) === undefined) {
                            computedStyle = window.getComputedStyle(element, null); /* GET */
                            /* If the computedStyle object has yet to be cached, do so now. */
                        } else if (!Data(element).computedStyle) {
                            computedStyle = Data(element).computedStyle = window.getComputedStyle(element, null); /* GET */
                            /* If computedStyle is cached, use it. */
                        } else {
                            computedStyle = Data(element).computedStyle;
                        }

                        /* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side's color.
                        Also, in all browsers, when border colors aren't all the same, a compound value is returned that Velocity isn't setup to parse.
                        So, as a polyfill for querying individual border side colors, we just return the top border's color and animate all borders from that value. */
                        if (property === "borderColor") {
                            property = "borderTopColor";
                        }

                        /* IE9 has a bug in which the "filter" property must be accessed from computedStyle using the getPropertyValue method
                        instead of a direct property lookup. The getPropertyValue method is slower than a direct lookup, which is why we avoid it by default. */
                        if (IE === 9 && property === "filter") {
                            computedValue = computedStyle.getPropertyValue(property); /* GET */
                        } else {
                            computedValue = computedStyle[property];
                        }

                        /* Fall back to the property's style value (if defined) when computedValue returns nothing,
                        which can happen when the element hasn't been painted. */
                        if (computedValue === "" || computedValue === null) {
                            computedValue = element.style[property];
                        }

                        revertDisplay();
                    }

                    /* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,
                    defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same
                    effect as being set to 0, so no conversion is necessary.) */
                    /* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"
                    property, which reverts to "auto", left's value is 0 relative to its parent element, but is often non-zero relative
                    to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */
                    if (computedValue === "auto" && /^(top|right|bottom|left)$/i.test(property)) {
                        var position = computePropertyValue(element, "position"); /* GET */

                        /* For absolute positioning, jQuery's $.position() only returns values for top and left;
                        right and bottom will have their "auto" value reverted to 0. */
                        /* Note: A jQuery object must be created here since jQuery doesn't have a low-level alias for $.position().
                        Not a big deal since we're currently in a GET batch anyway. */
                        if (position === "fixed" || position === "absolute" && /top|left/i.test(property)) {
                            /* Note: jQuery strips the pixel unit from its returned values; we re-add it here to conform with computePropertyValue's behavior. */
                            computedValue = $(element).position()[property] + "px"; /* GET */
                        }
                    }

                    return computedValue;
                }

                var propertyValue;

                /* If this is a hooked property (e.g. "clipLeft" instead of the root property of "clip"),
                extract the hook's value from a normalized rootPropertyValue using CSS.Hooks.extractValue(). */
                if (CSS.Hooks.registered[property]) {
                    var hook = property,
                        hookRoot = CSS.Hooks.getRoot(hook);

                    /* If a cached rootPropertyValue wasn't passed in (which Velocity always attempts to do in order to avoid requerying the DOM),
                    query the DOM for the root property's value. */
                    if (rootPropertyValue === undefined) {
                        /* Since the browser is now being directly queried, use the official post-prefixing property name for this lookup. */
                        rootPropertyValue = CSS.getPropertyValue(element, CSS.Names.prefixCheck(hookRoot)[0]); /* GET */
                    }

                    /* If this root has a normalization registered, peform the associated normalization extraction. */
                    if (CSS.Normalizations.registered[hookRoot]) {
                        rootPropertyValue = CSS.Normalizations.registered[hookRoot]("extract", element, rootPropertyValue);
                    }

                    /* Extract the hook's value. */
                    propertyValue = CSS.Hooks.extractValue(hook, rootPropertyValue);

                    /* If this is a normalized property (e.g. "opacity" becomes "filter" in <=IE8) or "translateX" becomes "transform"),
                    normalize the property's name and value, and handle the special case of transforms. */
                    /* Note: Normalizing a property is mutually exclusive from hooking a property since hook-extracted values are strictly
                    numerical and therefore do not require normalization extraction. */
                } else if (CSS.Normalizations.registered[property]) {
                    var normalizedPropertyName, normalizedPropertyValue;

                    normalizedPropertyName = CSS.Normalizations.registered[property]("name", element);

                    /* Transform values are calculated via normalization extraction (see below), which checks against the element's transformCache.
                    At no point do transform GETs ever actually query the DOM; initial stylesheet values are never processed.
                    This is because parsing 3D transform matrices is not always accurate and would bloat our codebase;
                    thus, normalization extraction defaults initial transform values to their zero-values (e.g. 1 for scaleX and 0 for translateX). */
                    if (normalizedPropertyName !== "transform") {
                        normalizedPropertyValue = computePropertyValue(element, CSS.Names.prefixCheck(normalizedPropertyName)[0]); /* GET */

                        /* If the value is a CSS null-value and this property has a hook template, use that zero-value template so that hooks can be extracted from it. */
                        if (CSS.Values.isCSSNullValue(normalizedPropertyValue) && CSS.Hooks.templates[property]) {
                            normalizedPropertyValue = CSS.Hooks.templates[property][1];
                        }
                    }

                    propertyValue = CSS.Normalizations.registered[property]("extract", element, normalizedPropertyValue);
                }

                /* If a (numeric) value wasn't produced via hook extraction or normalization, query the DOM. */
                if (!/^[\d-]/.test(propertyValue)) {
                    /* For SVG elements, dimensional properties (which SVGAttribute() detects) are tweened via
                    their HTML attribute values instead of their CSS style values. */
                    var data = Data(element);

                    if (data && data.isSVG && CSS.Names.SVGAttribute(property)) {
                        /* Since the height/width attribute values must be set manually, they don't reflect computed values.
                        Thus, we use use getBBox() to ensure we always get values for elements with undefined height/width attributes. */
                        if (/^(height|width)$/i.test(property)) {
                            /* Firefox throws an error if .getBBox() is called on an SVG that isn't attached to the DOM. */
                            try {
                                propertyValue = element.getBBox()[property];
                            } catch (error) {
                                propertyValue = 0;
                            }
                            /* Otherwise, access the attribute value directly. */
                        } else {
                            propertyValue = element.getAttribute(property);
                        }
                    } else {
                        propertyValue = computePropertyValue(element, CSS.Names.prefixCheck(property)[0]); /* GET */
                    }
                }

                /* Since property lookups are for animation purposes (which entails computing the numeric delta between start and end values),
                convert CSS null-values to an integer of value 0. */
                if (CSS.Values.isCSSNullValue(propertyValue)) {
                    propertyValue = 0;
                }

                if (Velocity.debug >= 2) {
                    console.log("Get " + property + ": " + propertyValue);
                }

                return propertyValue;
            },
            /* The singular setPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
            setPropertyValue: function setPropertyValue(element, property, propertyValue, rootPropertyValue, scrollData) {
                var propertyName = property;

                /* In order to be subjected to call options and element queueing, scroll animation is routed through Velocity as if it were a standard CSS property. */
                if (property === "scroll") {
                    /* If a container option is present, scroll the container instead of the browser window. */
                    if (scrollData.container) {
                        scrollData.container["scroll" + scrollData.direction] = propertyValue;
                        /* Otherwise, Velocity defaults to scrolling the browser window. */
                    } else {
                        if (scrollData.direction === "Left") {
                            window.scrollTo(propertyValue, scrollData.alternateValue);
                        } else {
                            window.scrollTo(scrollData.alternateValue, propertyValue);
                        }
                    }
                } else {
                    /* Transforms (translateX, rotateZ, etc.) are applied to a per-element transformCache object, which is manually flushed via flushTransformCache().
                    Thus, for now, we merely cache transforms being SET. */
                    if (CSS.Normalizations.registered[property] && CSS.Normalizations.registered[property]("name", element) === "transform") {
                        /* Perform a normalization injection. */
                        /* Note: The normalization logic handles the transformCache updating. */
                        CSS.Normalizations.registered[property]("inject", element, propertyValue);

                        propertyName = "transform";
                        propertyValue = Data(element).transformCache[property];
                    } else {
                        /* Inject hooks. */
                        if (CSS.Hooks.registered[property]) {
                            var hookName = property,
                                hookRoot = CSS.Hooks.getRoot(property);

                            /* If a cached rootPropertyValue was not provided, query the DOM for the hookRoot's current value. */
                            rootPropertyValue = rootPropertyValue || CSS.getPropertyValue(element, hookRoot); /* GET */

                            propertyValue = CSS.Hooks.injectValue(hookName, propertyValue, rootPropertyValue);
                            property = hookRoot;
                        }

                        /* Normalize names and values. */
                        if (CSS.Normalizations.registered[property]) {
                            propertyValue = CSS.Normalizations.registered[property]("inject", element, propertyValue);
                            property = CSS.Normalizations.registered[property]("name", element);
                        }

                        /* Assign the appropriate vendor prefix before performing an official style update. */
                        propertyName = CSS.Names.prefixCheck(property)[0];

                        /* A try/catch is used for IE<=8, which throws an error when "invalid" CSS values are set, e.g. a negative width.
                        Try/catch is avoided for other browsers since it incurs a performance overhead. */
                        if (IE <= 8) {
                            try {
                                element.style[propertyName] = propertyValue;
                            } catch (error) {
                                if (Velocity.debug) {
                                    console.log("Browser does not support [" + propertyValue + "] for [" + propertyName + "]");
                                }
                            }
                            /* SVG elements have their dimensional properties (width, height, x, y, cx, etc.) applied directly as attributes instead of as styles. */
                            /* Note: IE8 does not support SVG elements, so it's okay that we skip it for SVG animation. */
                        } else {
                            var data = Data(element);

                            if (data && data.isSVG && CSS.Names.SVGAttribute(property)) {
                                /* Note: For SVG attributes, vendor-prefixed property names are never used. */
                                /* Note: Not all CSS properties can be animated via attributes, but the browser won't throw an error for unsupported properties. */
                                element.setAttribute(property, propertyValue);
                            } else {
                                element.style[propertyName] = propertyValue;
                            }
                        }

                        if (Velocity.debug >= 2) {
                            console.log("Set " + property + " (" + propertyName + "): " + propertyValue);
                        }
                    }
                }

                /* Return the normalized property name and value in case the caller wants to know how these values were modified before being applied to the DOM. */
                return [propertyName, propertyValue];
            },
            /* To increase performance by batching transform updates into a single SET, transforms are not directly applied to an element until flushTransformCache() is called. */
            /* Note: Velocity applies transform properties in the same order that they are chronogically introduced to the element's CSS styles. */
            flushTransformCache: function flushTransformCache(element) {
                var transformString = "",
                    data = Data(element);

                /* Certain browsers require that SVG transforms be applied as an attribute. However, the SVG transform attribute takes a modified version of CSS's transform string
                (units are dropped and, except for skewX/Y, subproperties are merged into their master property -- e.g. scaleX and scaleY are merged into scale(X Y). */
                if ((IE || Velocity.State.isAndroid && !Velocity.State.isChrome) && data && data.isSVG) {
                    /* Since transform values are stored in their parentheses-wrapped form, we use a helper function to strip out their numeric values.
                    Further, SVG transform properties only take unitless (representing pixels) values, so it's okay that parseFloat() strips the unit suffixed to the float value. */
                    var getTransformFloat = function getTransformFloat(transformProperty) {
                        return parseFloat(CSS.getPropertyValue(element, transformProperty));
                    };

                    /* Create an object to organize all the transforms that we'll apply to the SVG element. To keep the logic simple,
                    we process *all* transform properties -- even those that may not be explicitly applied (since they default to their zero-values anyway). */
                    var SVGTransforms = {
                        translate: [getTransformFloat("translateX"), getTransformFloat("translateY")],
                        skewX: [getTransformFloat("skewX")], skewY: [getTransformFloat("skewY")],
                        /* If the scale property is set (non-1), use that value for the scaleX and scaleY values
                        (this behavior mimics the result of animating all these properties at once on HTML elements). */
                        scale: getTransformFloat("scale") !== 1 ? [getTransformFloat("scale"), getTransformFloat("scale")] : [getTransformFloat("scaleX"), getTransformFloat("scaleY")],
                        /* Note: SVG's rotate transform takes three values: rotation degrees followed by the X and Y values
                        defining the rotation's origin point. We ignore the origin values (default them to 0). */
                        rotate: [getTransformFloat("rotateZ"), 0, 0]
                    };

                    /* Iterate through the transform properties in the user-defined property map order.
                    (This mimics the behavior of non-SVG transform animation.) */
                    $.each(Data(element).transformCache, function (transformName) {
                        /* Except for with skewX/Y, revert the axis-specific transform subproperties to their axis-free master
                        properties so that they match up with SVG's accepted transform properties. */
                        if (/^translate/i.test(transformName)) {
                            transformName = "translate";
                        } else if (/^scale/i.test(transformName)) {
                            transformName = "scale";
                        } else if (/^rotate/i.test(transformName)) {
                            transformName = "rotate";
                        }

                        /* Check that we haven't yet deleted the property from the SVGTransforms container. */
                        if (SVGTransforms[transformName]) {
                            /* Append the transform property in the SVG-supported transform format. As per the spec, surround the space-delimited values in parentheses. */
                            transformString += transformName + "(" + SVGTransforms[transformName].join(" ") + ")" + " ";

                            /* After processing an SVG transform property, delete it from the SVGTransforms container so we don't
                            re-insert the same master property if we encounter another one of its axis-specific properties. */
                            delete SVGTransforms[transformName];
                        }
                    });
                } else {
                    var transformValue, perspective;

                    /* Transform properties are stored as members of the transformCache object. Concatenate all the members into a string. */
                    $.each(Data(element).transformCache, function (transformName) {
                        transformValue = Data(element).transformCache[transformName];

                        /* Transform's perspective subproperty must be set first in order to take effect. Store it temporarily. */
                        if (transformName === "transformPerspective") {
                            perspective = transformValue;
                            return true;
                        }

                        /* IE9 only supports one rotation type, rotateZ, which it refers to as "rotate". */
                        if (IE === 9 && transformName === "rotateZ") {
                            transformName = "rotate";
                        }

                        transformString += transformName + transformValue + " ";
                    });

                    /* If present, set the perspective subproperty first. */
                    if (perspective) {
                        transformString = "perspective" + perspective + " " + transformString;
                    }
                }

                CSS.setPropertyValue(element, "transform", transformString);
            }
        };

        /* Register hooks and normalizations. */
        CSS.Hooks.register();
        CSS.Normalizations.register();

        /* Allow hook setting in the same fashion as jQuery's $.css(). */
        Velocity.hook = function (elements, arg2, arg3) {
            var value;

            elements = sanitizeElements(elements);

            $.each(elements, function (i, element) {
                /* Initialize Velocity's per-element data cache if this element hasn't previously been animated. */
                if (Data(element) === undefined) {
                    Velocity.init(element);
                }

                /* Get property value. If an element set was passed in, only return the value for the first element. */
                if (arg3 === undefined) {
                    if (value === undefined) {
                        value = Velocity.CSS.getPropertyValue(element, arg2);
                    }
                    /* Set property value. */
                } else {
                    /* sPV returns an array of the normalized propertyName/propertyValue pair used to update the DOM. */
                    var adjustedSet = Velocity.CSS.setPropertyValue(element, arg2, arg3);

                    /* Transform properties don't automatically set. They have to be flushed to the DOM. */
                    if (adjustedSet[0] === "transform") {
                        Velocity.CSS.flushTransformCache(element);
                    }

                    value = adjustedSet;
                }
            });

            return value;
        };

        /*****************
        Animation
        *****************/

        var animate = function animate() {
            var opts;

            /******************
            Call Chain
            ******************/

            /* Logic for determining what to return to the call stack when exiting out of Velocity. */
            function getChain() {
                /* If we are using the utility function, attempt to return this call's promise. If no promise library was detected,
                default to null instead of returning the targeted elements so that utility function's return value is standardized. */
                if (isUtility) {
                    return promiseData.promise || null;
                    /* Otherwise, if we're using $.fn, return the jQuery-/Zepto-wrapped element set. */
                } else {
                    return elementsWrapped;
                }
            }

            /*************************
            Arguments Assignment
            *************************/

            /* To allow for expressive CoffeeScript code, Velocity supports an alternative syntax in which "elements" (or "e"), "properties" (or "p"), and "options" (or "o")
            objects are defined on a container object that's passed in as Velocity's sole argument. */
            /* Note: Some browsers automatically populate arguments with a "properties" object. We detect it by checking for its default "names" property. */
            var syntacticSugar = arguments[0] && (arguments[0].p || $.isPlainObject(arguments[0].properties) && !arguments[0].properties.names || Type.isString(arguments[0].properties)),

            /* Whether Velocity was called via the utility function (as opposed to on a jQuery/Zepto object). */
            isUtility,

            /* When Velocity is called via the utility function ($.Velocity()/Velocity()), elements are explicitly
             passed in as the first parameter. Thus, argument positioning varies. We normalize them here. */
            elementsWrapped,
                argumentIndex;

            var elements, propertiesMap, options;

            /* Detect jQuery/Zepto elements being animated via the $.fn method. */
            if (Type.isWrapped(this)) {
                isUtility = false;

                argumentIndex = 0;
                elements = this;
                elementsWrapped = this;
                /* Otherwise, raw elements are being animated via the utility function. */
            } else {
                isUtility = true;

                argumentIndex = 1;
                elements = syntacticSugar ? arguments[0].elements || arguments[0].e : arguments[0];
            }

            elements = sanitizeElements(elements);

            if (!elements) {
                return;
            }

            if (syntacticSugar) {
                propertiesMap = arguments[0].properties || arguments[0].p;
                options = arguments[0].options || arguments[0].o;
            } else {
                propertiesMap = arguments[argumentIndex];
                options = arguments[argumentIndex + 1];
            }

            /* The length of the element set (in the form of a nodeList or an array of elements) is defaulted to 1 in case a
            single raw DOM element is passed in (which doesn't contain a length property). */
            var elementsLength = elements.length,
                elementsIndex = 0;

            /***************************
            Argument Overloading
            ***************************/

            /* Support is included for jQuery's argument overloading: $.animate(propertyMap [, duration] [, easing] [, complete]).
            Overloading is detected by checking for the absence of an object being passed into options. */
            /* Note: The stop and finish actions do not accept animation options, and are therefore excluded from this check. */
            if (!/^(stop|finish|finishAll)$/i.test(propertiesMap) && !$.isPlainObject(options)) {
                /* The utility function shifts all arguments one position to the right, so we adjust for that offset. */
                var startingArgumentPosition = argumentIndex + 1;

                options = {};

                /* Iterate through all options arguments */
                for (var i = startingArgumentPosition; i < arguments.length; i++) {
                    /* Treat a number as a duration. Parse it out. */
                    /* Note: The following RegEx will return true if passed an array with a number as its first item.
                    Thus, arrays are skipped from this check. */
                    if (!Type.isArray(arguments[i]) && (/^(fast|normal|slow)$/i.test(arguments[i]) || /^\d/.test(arguments[i]))) {
                        options.duration = arguments[i];
                        /* Treat strings and arrays as easings. */
                    } else if (Type.isString(arguments[i]) || Type.isArray(arguments[i])) {
                        options.easing = arguments[i];
                        /* Treat a function as a complete callback. */
                    } else if (Type.isFunction(arguments[i])) {
                        options.complete = arguments[i];
                    }
                }
            }

            /***************
            Promises
            ***************/

            var promiseData = {
                promise: null,
                resolver: null,
                rejecter: null
            };

            /* If this call was made via the utility function (which is the default method of invocation when jQuery/Zepto are not being used), and if
            promise support was detected, create a promise object for this call and store references to its resolver and rejecter methods. The resolve
            method is used when a call completes naturally or is prematurely stopped by the user. In both cases, completeCall() handles the associated
            call cleanup and promise resolving logic. The reject method is used when an invalid set of arguments is passed into a Velocity call. */
            /* Note: Velocity employs a call-based queueing architecture, which means that stopping an animating element actually stops the full call that
            triggered it -- not that one element exclusively. Similarly, there is one promise per call, and all elements targeted by a Velocity call are
            grouped together for the purposes of resolving and rejecting a promise. */
            if (isUtility && Velocity.Promise) {
                promiseData.promise = new Velocity.Promise(function (resolve, reject) {
                    promiseData.resolver = resolve;
                    promiseData.rejecter = reject;
                });
            }

            /*********************
            Action Detection
            *********************/

            /* Velocity's behavior is categorized into "actions": Elements can either be specially scrolled into view,
            or they can be started, stopped, or reversed. If a literal or referenced properties map is passed in as Velocity's
            first argument, the associated action is "start". Alternatively, "scroll", "reverse", or "stop" can be passed in instead of a properties map. */
            var action;

            switch (propertiesMap) {
                case "scroll":
                    action = "scroll";
                    break;

                case "reverse":
                    action = "reverse";
                    break;

                case "finish":
                case "finishAll":
                case "stop":
                    /*******************
                    Action: Stop
                    *******************/

                    /* Clear the currently-active delay on each targeted element. */
                    $.each(elements, function (i, element) {
                        if (Data(element) && Data(element).delayTimer) {
                            /* Stop the timer from triggering its cached next() function. */
                            clearTimeout(Data(element).delayTimer.setTimeout);

                            /* Manually call the next() function so that the subsequent queue items can progress. */
                            if (Data(element).delayTimer.next) {
                                Data(element).delayTimer.next();
                            }

                            delete Data(element).delayTimer;
                        }

                        /* If we want to finish everything in the queue, we have to iterate through it
                        and call each function. This will make them active calls below, which will
                        cause them to be applied via the duration setting. */
                        if (propertiesMap === "finishAll" && (options === true || Type.isString(options))) {
                            /* Iterate through the items in the element's queue. */
                            $.each($.queue(element, Type.isString(options) ? options : ""), function (_, item) {
                                /* The queue array can contain an "inprogress" string, which we skip. */
                                if (Type.isFunction(item)) {
                                    item();
                                }
                            });

                            /* Clearing the $.queue() array is achieved by resetting it to []. */
                            $.queue(element, Type.isString(options) ? options : "", []);
                        }
                    });

                    var callsToStop = [];

                    /* When the stop action is triggered, the elements' currently active call is immediately stopped. The active call might have
                    been applied to multiple elements, in which case all of the call's elements will be stopped. When an element
                    is stopped, the next item in its animation queue is immediately triggered. */
                    /* An additional argument may be passed in to clear an element's remaining queued calls. Either true (which defaults to the "fx" queue)
                    or a custom queue string can be passed in. */
                    /* Note: The stop command runs prior to Velocity's Queueing phase since its behavior is intended to take effect *immediately*,
                    regardless of the element's current queue state. */

                    /* Iterate through every active call. */
                    $.each(Velocity.State.calls, function (i, activeCall) {
                        /* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
                        if (activeCall) {
                            /* Iterate through the active call's targeted elements. */
                            $.each(activeCall[1], function (k, activeElement) {
                                /* If true was passed in as a secondary argument, clear absolutely all calls on this element. Otherwise, only
                                clear calls associated with the relevant queue. */
                                /* Call stopping logic works as follows:
                                - options === true --> stop current default queue calls (and queue:false calls), including remaining queued ones.
                                - options === undefined --> stop current queue:"" call and all queue:false calls.
                                - options === false --> stop only queue:false calls.
                                - options === "custom" --> stop current queue:"custom" call, including remaining queued ones (there is no functionality to only clear the currently-running queue:"custom" call). */
                                var queueName = options === undefined ? "" : options;

                                if (queueName !== true && activeCall[2].queue !== queueName && !(options === undefined && activeCall[2].queue === false)) {
                                    return true;
                                }

                                /* Iterate through the calls targeted by the stop command. */
                                $.each(elements, function (l, element) {
                                    /* Check that this call was applied to the target element. */
                                    if (element === activeElement) {
                                        /* Optionally clear the remaining queued calls. If we're doing "finishAll" this won't find anything,
                                        due to the queue-clearing above. */
                                        if (options === true || Type.isString(options)) {
                                            /* Iterate through the items in the element's queue. */
                                            $.each($.queue(element, Type.isString(options) ? options : ""), function (_, item) {
                                                /* The queue array can contain an "inprogress" string, which we skip. */
                                                if (Type.isFunction(item)) {
                                                    /* Pass the item's callback a flag indicating that we want to abort from the queue call.
                                                    (Specifically, the queue will resolve the call's associated promise then abort.)  */
                                                    item(null, true);
                                                }
                                            });

                                            /* Clearing the $.queue() array is achieved by resetting it to []. */
                                            $.queue(element, Type.isString(options) ? options : "", []);
                                        }

                                        if (propertiesMap === "stop") {
                                            /* Since "reverse" uses cached start values (the previous call's endValues), these values must be
                                            changed to reflect the final value that the elements were actually tweened to. */
                                            /* Note: If only queue:false animations are currently running on an element, it won't have a tweensContainer
                                            object. Also, queue:false animations can't be reversed. */
                                            var data = Data(element);
                                            if (data && data.tweensContainer && queueName !== false) {
                                                $.each(data.tweensContainer, function (m, activeTween) {
                                                    activeTween.endValue = activeTween.currentValue;
                                                });
                                            }

                                            callsToStop.push(i);
                                        } else if (propertiesMap === "finish" || propertiesMap === "finishAll") {
                                            /* To get active tweens to finish immediately, we forcefully shorten their durations to 1ms so that
                                            they finish upon the next rAf tick then proceed with normal call completion logic. */
                                            activeCall[2].duration = 1;
                                        }
                                    }
                                });
                            });
                        }
                    });

                    /* Prematurely call completeCall() on each matched active call. Pass an additional flag for "stop" to indicate
                    that the complete callback and display:none setting should be skipped since we're completing prematurely. */
                    if (propertiesMap === "stop") {
                        $.each(callsToStop, function (i, j) {
                            completeCall(j, true);
                        });

                        if (promiseData.promise) {
                            /* Immediately resolve the promise associated with this stop call since stop runs synchronously. */
                            promiseData.resolver(elements);
                        }
                    }

                    /* Since we're stopping, and not proceeding with queueing, exit out of Velocity. */
                    return getChain();

                default:
                    /* Treat a non-empty plain object as a literal properties map. */
                    if ($.isPlainObject(propertiesMap) && !Type.isEmptyObject(propertiesMap)) {
                        action = "start";

                        /****************
                        Redirects
                        ****************/

                        /* Check if a string matches a registered redirect (see Redirects above). */
                    } else if (Type.isString(propertiesMap) && Velocity.Redirects[propertiesMap]) {
                        opts = $.extend({}, options);

                        var durationOriginal = opts.duration,
                            delayOriginal = opts.delay || 0;

                        /* If the backwards option was passed in, reverse the element set so that elements animate from the last to the first. */
                        if (opts.backwards === true) {
                            elements = $.extend(true, [], elements).reverse();
                        }

                        /* Individually trigger the redirect for each element in the set to prevent users from having to handle iteration logic in their redirect. */
                        $.each(elements, function (elementIndex, element) {
                            /* If the stagger option was passed in, successively delay each element by the stagger value (in ms). Retain the original delay value. */
                            if (parseFloat(opts.stagger)) {
                                opts.delay = delayOriginal + parseFloat(opts.stagger) * elementIndex;
                            } else if (Type.isFunction(opts.stagger)) {
                                opts.delay = delayOriginal + opts.stagger.call(element, elementIndex, elementsLength);
                            }

                            /* If the drag option was passed in, successively increase/decrease (depending on the presense of opts.backwards)
                            the duration of each element's animation, using floors to prevent producing very short durations. */
                            if (opts.drag) {
                                /* Default the duration of UI pack effects (callouts and transitions) to 1000ms instead of the usual default duration of 400ms. */
                                opts.duration = parseFloat(durationOriginal) || (/^(callout|transition)/.test(propertiesMap) ? 1000 : DURATION_DEFAULT);

                                /* For each element, take the greater duration of: A) animation completion percentage relative to the original duration,
                                B) 75% of the original duration, or C) a 200ms fallback (in case duration is already set to a low value).
                                The end result is a baseline of 75% of the redirect's duration that increases/decreases as the end of the element set is approached. */
                                opts.duration = Math.max(opts.duration * (opts.backwards ? 1 - elementIndex / elementsLength : (elementIndex + 1) / elementsLength), opts.duration * 0.75, 200);
                            }

                            /* Pass in the call's opts object so that the redirect can optionally extend it. It defaults to an empty object instead of null to
                            reduce the opts checking logic required inside the redirect. */
                            Velocity.Redirects[propertiesMap].call(element, element, opts || {}, elementIndex, elementsLength, elements, promiseData.promise ? promiseData : undefined);
                        });

                        /* Since the animation logic resides within the redirect's own code, abort the remainder of this call.
                        (The performance overhead up to this point is virtually non-existant.) */
                        /* Note: The jQuery call chain is kept intact by returning the complete element set. */
                        return getChain();
                    } else {
                        var abortError = "Velocity: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.";

                        if (promiseData.promise) {
                            promiseData.rejecter(new Error(abortError));
                        } else {
                            console.log(abortError);
                        }

                        return getChain();
                    }
            }

            /**************************
            Call-Wide Variables
            **************************/

            /* A container for CSS unit conversion ratios (e.g. %, rem, and em ==> px) that is used to cache ratios across all elements
            being animated in a single Velocity call. Calculating unit ratios necessitates DOM querying and updating, and is therefore
            avoided (via caching) wherever possible. This container is call-wide instead of page-wide to avoid the risk of using stale
            conversion metrics across Velocity animations that are not immediately consecutively chained. */
            var callUnitConversionData = {
                lastParent: null,
                lastPosition: null,
                lastFontSize: null,
                lastPercentToPxWidth: null,
                lastPercentToPxHeight: null,
                lastEmToPx: null,
                remToPx: null,
                vwToPx: null,
                vhToPx: null
            };

            /* A container for all the ensuing tween data and metadata associated with this call. This container gets pushed to the page-wide
            Velocity.State.calls array that is processed during animation ticking. */
            var call = [];

            /************************
            Element Processing
            ************************/

            /* Element processing consists of three parts -- data processing that cannot go stale and data processing that *can* go stale (i.e. third-party style modifications):
            1) Pre-Queueing: Element-wide variables, including the element's data storage, are instantiated. Call options are prepared. If triggered, the Stop action is executed.
            2) Queueing: The logic that runs once this call has reached its point of execution in the element's $.queue() stack. Most logic is placed here to avoid risking it becoming stale.
            3) Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
            `elementArrayIndex` allows passing index of the element in the original array to value functions.
            If `elementsIndex` were used instead the index would be determined by the elements' per-element queue.
            */
            function processElement(element, elementArrayIndex) {

                /*************************
                Part I: Pre-Queueing
                *************************/

                /***************************
                Element-Wide Variables
                ***************************/

                var /* The runtime opts object is the extension of the current call's options and Velocity's page-wide option defaults. */
                opts = $.extend({}, Velocity.defaults, options),

                /* A container for the processed data associated with each property in the propertyMap.
                 (Each property in the map produces its own "tween".) */
                tweensContainer = {},
                    elementUnitConversionData;

                /******************
                Element Init
                ******************/

                if (Data(element) === undefined) {
                    Velocity.init(element);
                }

                /******************
                Option: Delay
                ******************/

                /* Since queue:false doesn't respect the item's existing queue, we avoid injecting its delay here (it's set later on). */
                /* Note: Velocity rolls its own delay function since jQuery doesn't have a utility alias for $.fn.delay()
                (and thus requires jQuery element creation, which we avoid since its overhead includes DOM querying). */
                if (parseFloat(opts.delay) && opts.queue !== false) {
                    $.queue(element, opts.queue, function (next) {
                        /* This is a flag used to indicate to the upcoming completeCall() function that this queue entry was initiated by Velocity. See completeCall() for further details. */
                        Velocity.velocityQueueEntryFlag = true;

                        /* The ensuing queue item (which is assigned to the "next" argument that $.queue() automatically passes in) will be triggered after a setTimeout delay.
                        The setTimeout is stored so that it can be subjected to clearTimeout() if this animation is prematurely stopped via Velocity's "stop" command. */
                        Data(element).delayTimer = {
                            setTimeout: setTimeout(next, parseFloat(opts.delay)),
                            next: next
                        };
                    });
                }

                /*********************
                Option: Duration
                *********************/

                /* Support for jQuery's named durations. */
                switch (opts.duration.toString().toLowerCase()) {
                    case "fast":
                        opts.duration = 200;
                        break;

                    case "normal":
                        opts.duration = DURATION_DEFAULT;
                        break;

                    case "slow":
                        opts.duration = 600;
                        break;

                    default:
                        /* Remove the potential "ms" suffix and default to 1 if the user is attempting to set a duration of 0 (in order to produce an immediate style change). */
                        opts.duration = parseFloat(opts.duration) || 1;
                }

                /************************
                Global Option: Mock
                ************************/

                if (Velocity.mock !== false) {
                    /* In mock mode, all animations are forced to 1ms so that they occur immediately upon the next rAF tick.
                    Alternatively, a multiplier can be passed in to time remap all delays and durations. */
                    if (Velocity.mock === true) {
                        opts.duration = opts.delay = 1;
                    } else {
                        opts.duration *= parseFloat(Velocity.mock) || 1;
                        opts.delay *= parseFloat(Velocity.mock) || 1;
                    }
                }

                /*******************
                Option: Easing
                *******************/

                opts.easing = getEasing(opts.easing, opts.duration);

                /**********************
                Option: Callbacks
                **********************/

                /* Callbacks must functions. Otherwise, default to null. */
                if (opts.begin && !Type.isFunction(opts.begin)) {
                    opts.begin = null;
                }

                if (opts.progress && !Type.isFunction(opts.progress)) {
                    opts.progress = null;
                }

                if (opts.complete && !Type.isFunction(opts.complete)) {
                    opts.complete = null;
                }

                /*********************************
                Option: Display & Visibility
                *********************************/

                /* Refer to Velocity's documentation (VelocityJS.org/#displayAndVisibility) for a description of the display and visibility options' behavior. */
                /* Note: We strictly check for undefined instead of falsiness because display accepts an empty string value. */
                if (opts.display !== undefined && opts.display !== null) {
                    opts.display = opts.display.toString().toLowerCase();

                    /* Users can pass in a special "auto" value to instruct Velocity to set the element to its default display value. */
                    if (opts.display === "auto") {
                        opts.display = Velocity.CSS.Values.getDisplayType(element);
                    }
                }

                if (opts.visibility !== undefined && opts.visibility !== null) {
                    opts.visibility = opts.visibility.toString().toLowerCase();
                }

                /**********************
                Option: mobileHA
                **********************/

                /* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)
                on animating elements. HA is removed from the element at the completion of its animation. */
                /* Note: Android Gingerbread doesn't support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */
                /* Note: You can read more about the use of mobileHA in Velocity's documentation: VelocityJS.org/#mobileHA. */
                opts.mobileHA = opts.mobileHA && Velocity.State.isMobile && !Velocity.State.isGingerbread;

                /***********************
                Part II: Queueing
                ***********************/

                /* When a set of elements is targeted by a Velocity call, the set is broken up and each element has the current Velocity call individually queued onto it.
                In this way, each element's existing queue is respected; some elements may already be animating and accordingly should not have this current Velocity call triggered immediately. */
                /* In each queue, tween data is processed for each animating property then pushed onto the call-wide calls array. When the last element in the set has had its tweens processed,
                the call array is pushed to Velocity.State.calls for live processing by the requestAnimationFrame tick. */
                function buildQueue(next) {
                    var data, lastTweensContainer;

                    /*******************
                    Option: Begin
                    *******************/

                    /* The begin callback is fired once per call -- not once per elemenet -- and is passed the full raw DOM element set as both its context and its first argument. */
                    if (opts.begin && elementsIndex === 0) {
                        /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
                        try {
                            opts.begin.call(elements, elements);
                        } catch (error) {
                            setTimeout(function () {
                                throw error;
                            }, 1);
                        }
                    }

                    /*****************************************
                    Tween Data Construction (for Scroll)
                    *****************************************/

                    /* Note: In order to be subjected to chaining and animation options, scroll's tweening is routed through Velocity as if it were a standard CSS property animation. */
                    if (action === "scroll") {
                        /* The scroll action uniquely takes an optional "offset" option -- specified in pixels -- that offsets the targeted scroll position. */
                        var scrollDirection = /^x$/i.test(opts.axis) ? "Left" : "Top",
                            scrollOffset = parseFloat(opts.offset) || 0,
                            scrollPositionCurrent,
                            scrollPositionCurrentAlternate,
                            scrollPositionEnd;

                        /* Scroll also uniquely takes an optional "container" option, which indicates the parent element that should be scrolled --
                        as opposed to the browser window itself. This is useful for scrolling toward an element that's inside an overflowing parent element. */
                        if (opts.container) {
                            /* Ensure that either a jQuery object or a raw DOM element was passed in. */
                            if (Type.isWrapped(opts.container) || Type.isNode(opts.container)) {
                                /* Extract the raw DOM element from the jQuery wrapper. */
                                opts.container = opts.container[0] || opts.container;
                                /* Note: Unlike other properties in Velocity, the browser's scroll position is never cached since it so frequently changes
                                (due to the user's natural interaction with the page). */
                                scrollPositionCurrent = opts.container["scroll" + scrollDirection]; /* GET */

                                /* $.position() values are relative to the container's currently viewable area (without taking into account the container's true dimensions
                                -- say, for example, if the container was not overflowing). Thus, the scroll end value is the sum of the child element's position *and*
                                the scroll container's current scroll position. */
                                scrollPositionEnd = scrollPositionCurrent + $(element).position()[scrollDirection.toLowerCase()] + scrollOffset; /* GET */
                                /* If a value other than a jQuery object or a raw DOM element was passed in, default to null so that this option is ignored. */
                            } else {
                                opts.container = null;
                            }
                        } else {
                            /* If the window itself is being scrolled -- not a containing element -- perform a live scroll position lookup using
                            the appropriate cached property names (which differ based on browser type). */
                            scrollPositionCurrent = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + scrollDirection]]; /* GET */
                            /* When scrolling the browser window, cache the alternate axis's current value since window.scrollTo() doesn't let us change only one value at a time. */
                            scrollPositionCurrentAlternate = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + (scrollDirection === "Left" ? "Top" : "Left")]]; /* GET */

                            /* Unlike $.position(), $.offset() values are relative to the browser window's true dimensions -- not merely its currently viewable area --
                            and therefore end values do not need to be compounded onto current values. */
                            scrollPositionEnd = $(element).offset()[scrollDirection.toLowerCase()] + scrollOffset; /* GET */
                        }

                        /* Since there's only one format that scroll's associated tweensContainer can take, we create it manually. */
                        tweensContainer = {
                            scroll: {
                                rootPropertyValue: false,
                                startValue: scrollPositionCurrent,
                                currentValue: scrollPositionCurrent,
                                endValue: scrollPositionEnd,
                                unitType: "",
                                easing: opts.easing,
                                scrollData: {
                                    container: opts.container,
                                    direction: scrollDirection,
                                    alternateValue: scrollPositionCurrentAlternate
                                }
                            },
                            element: element
                        };

                        if (Velocity.debug) {
                            console.log("tweensContainer (scroll): ", tweensContainer.scroll, element);
                        }

                        /******************************************
                        Tween Data Construction (for Reverse)
                        ******************************************/

                        /* Reverse acts like a "start" action in that a property map is animated toward. The only difference is
                        that the property map used for reverse is the inverse of the map used in the previous call. Thus, we manipulate
                        the previous call to construct our new map: use the previous map's end values as our new map's start values. Copy over all other data. */
                        /* Note: Reverse can be directly called via the "reverse" parameter, or it can be indirectly triggered via the loop option. (Loops are composed of multiple reverses.) */
                        /* Note: Reverse calls do not need to be consecutively chained onto a currently-animating element in order to operate on cached values;
                        there is no harm to reverse being called on a potentially stale data cache since reverse's behavior is simply defined
                        as reverting to the element's values as they were prior to the previous *Velocity* call. */
                    } else if (action === "reverse") {
                        data = Data(element);

                        /* Abort if there is no prior animation data to reverse to. */
                        if (!data) {
                            return;
                        }

                        if (!data.tweensContainer) {
                            /* Dequeue the element so that this queue entry releases itself immediately, allowing subsequent queue entries to run. */
                            $.dequeue(element, opts.queue);

                            return;
                        } else {
                            /*********************
                            Options Parsing
                            *********************/

                            /* If the element was hidden via the display option in the previous call,
                            revert display to "auto" prior to reversal so that the element is visible again. */
                            if (data.opts.display === "none") {
                                data.opts.display = "auto";
                            }

                            if (data.opts.visibility === "hidden") {
                                data.opts.visibility = "visible";
                            }

                            /* If the loop option was set in the previous call, disable it so that "reverse" calls aren't recursively generated.
                            Further, remove the previous call's callback options; typically, users do not want these to be refired. */
                            data.opts.loop = false;
                            data.opts.begin = null;
                            data.opts.complete = null;

                            /* Since we're extending an opts object that has already been extended with the defaults options object,
                            we remove non-explicitly-defined properties that are auto-assigned values. */
                            if (!options.easing) {
                                delete opts.easing;
                            }

                            if (!options.duration) {
                                delete opts.duration;
                            }

                            /* The opts object used for reversal is an extension of the options object optionally passed into this
                            reverse call plus the options used in the previous Velocity call. */
                            opts = $.extend({}, data.opts, opts);

                            /*************************************
                            Tweens Container Reconstruction
                            *************************************/

                            /* Create a deepy copy (indicated via the true flag) of the previous call's tweensContainer. */
                            lastTweensContainer = $.extend(true, {}, data ? data.tweensContainer : null);

                            /* Manipulate the previous tweensContainer by replacing its end values and currentValues with its start values. */
                            for (var lastTween in lastTweensContainer) {
                                /* In addition to tween data, tweensContainers contain an element property that we ignore here. */
                                if (lastTween !== "element") {
                                    var lastStartValue = lastTweensContainer[lastTween].startValue;

                                    lastTweensContainer[lastTween].startValue = lastTweensContainer[lastTween].currentValue = lastTweensContainer[lastTween].endValue;
                                    lastTweensContainer[lastTween].endValue = lastStartValue;

                                    /* Easing is the only option that embeds into the individual tween data (since it can be defined on a per-property basis).
                                    Accordingly, every property's easing value must be updated when an options object is passed in with a reverse call.
                                    The side effect of this extensibility is that all per-property easing values are forcefully reset to the new value. */
                                    if (!Type.isEmptyObject(options)) {
                                        lastTweensContainer[lastTween].easing = opts.easing;
                                    }

                                    if (Velocity.debug) {
                                        console.log("reverse tweensContainer (" + lastTween + "): " + JSON.stringify(lastTweensContainer[lastTween]), element);
                                    }
                                }
                            }

                            tweensContainer = lastTweensContainer;
                        }

                        /*****************************************
                        Tween Data Construction (for Start)
                        *****************************************/
                    } else if (action === "start") {

                        /*************************
                        Value Transferring
                        *************************/

                        /* If this queue entry follows a previous Velocity-initiated queue entry *and* if this entry was created
                        while the element was in the process of being animated by Velocity, then this current call is safe to use
                        the end values from the prior call as its start values. Velocity attempts to perform this value transfer
                        process whenever possible in order to avoid requerying the DOM. */
                        /* If values aren't transferred from a prior call and start values were not forcefed by the user (more on this below),
                        then the DOM is queried for the element's current values as a last resort. */
                        /* Note: Conversely, animation reversal (and looping) *always* perform inter-call value transfers; they never requery the DOM. */

                        data = Data(element);

                        /* The per-element isAnimating flag is used to indicate whether it's safe (i.e. the data isn't stale)
                        to transfer over end values to use as start values. If it's set to true and there is a previous
                        Velocity call to pull values from, do so. */
                        if (data && data.tweensContainer && data.isAnimating === true) {
                            lastTweensContainer = data.tweensContainer;
                        }

                        /***************************
                        Tween Data Calculation
                        ***************************/

                        /* This function parses property data and defaults endValue, easing, and startValue as appropriate. */
                        /* Property map values can either take the form of 1) a single value representing the end value,
                        or 2) an array in the form of [ endValue, [, easing] [, startValue] ].
                        The optional third parameter is a forcefed startValue to be used instead of querying the DOM for
                        the element's current value. Read Velocity's docmentation to learn more about forcefeeding: VelocityJS.org/#forcefeeding */
                        var parsePropertyValue = function parsePropertyValue(valueData, skipResolvingEasing) {
                            var endValue, easing, startValue;

                            /* Handle the array format, which can be structured as one of three potential overloads:
                            A) [ endValue, easing, startValue ], B) [ endValue, easing ], or C) [ endValue, startValue ] */
                            if (Type.isArray(valueData)) {
                                /* endValue is always the first item in the array. Don't bother validating endValue's value now
                                since the ensuing property cycling logic does that. */
                                endValue = valueData[0];

                                /* Two-item array format: If the second item is a number, function, or hex string, treat it as a
                                start value since easings can only be non-hex strings or arrays. */
                                if (!Type.isArray(valueData[1]) && /^[\d-]/.test(valueData[1]) || Type.isFunction(valueData[1]) || CSS.RegEx.isHex.test(valueData[1])) {
                                    startValue = valueData[1];
                                    /* Two or three-item array: If the second item is a non-hex string or an array, treat it as an easing. */
                                } else if (Type.isString(valueData[1]) && !CSS.RegEx.isHex.test(valueData[1]) || Type.isArray(valueData[1])) {
                                    easing = skipResolvingEasing ? valueData[1] : getEasing(valueData[1], opts.duration);

                                    /* Don't bother validating startValue's value now since the ensuing property cycling logic inherently does that. */
                                    if (valueData[2] !== undefined) {
                                        startValue = valueData[2];
                                    }
                                }
                                /* Handle the single-value format. */
                            } else {
                                endValue = valueData;
                            }

                            /* Default to the call's easing if a per-property easing type was not defined. */
                            if (!skipResolvingEasing) {
                                easing = easing || opts.easing;
                            }

                            /* If functions were passed in as values, pass the function the current element as its context,
                            plus the element's index and the element set's size as arguments. Then, assign the returned value. */
                            if (Type.isFunction(endValue)) {
                                endValue = endValue.call(element, elementArrayIndex, elementsLength);
                            }

                            if (Type.isFunction(startValue)) {
                                startValue = startValue.call(element, elementArrayIndex, elementsLength);
                            }

                            /* Allow startValue to be left as undefined to indicate to the ensuing code that its value was not forcefed. */
                            return [endValue || 0, easing, startValue];
                        };

                        /* Cycle through each property in the map, looking for shorthand color properties (e.g. "color" as opposed to "colorRed"). Inject the corresponding
                        colorRed, colorGreen, and colorBlue RGB component tweens into the propertiesMap (which Velocity understands) and remove the shorthand property. */
                        $.each(propertiesMap, function (property, value) {
                            /* Find shorthand color properties that have been passed a hex string. */
                            if (RegExp("^" + CSS.Lists.colors.join("$|^") + "$").test(CSS.Names.camelCase(property))) {
                                /* Parse the value data for each shorthand. */
                                var valueData = parsePropertyValue(value, true),
                                    endValue = valueData[0],
                                    easing = valueData[1],
                                    startValue = valueData[2];

                                if (CSS.RegEx.isHex.test(endValue)) {
                                    /* Convert the hex strings into their RGB component arrays. */
                                    var colorComponents = ["Red", "Green", "Blue"],
                                        endValueRGB = CSS.Values.hexToRgb(endValue),
                                        startValueRGB = startValue ? CSS.Values.hexToRgb(startValue) : undefined;

                                    /* Inject the RGB component tweens into propertiesMap. */
                                    for (var i = 0; i < colorComponents.length; i++) {
                                        var dataArray = [endValueRGB[i]];

                                        if (easing) {
                                            dataArray.push(easing);
                                        }

                                        if (startValueRGB !== undefined) {
                                            dataArray.push(startValueRGB[i]);
                                        }

                                        propertiesMap[CSS.Names.camelCase(property) + colorComponents[i]] = dataArray;
                                    }

                                    /* Remove the intermediary shorthand property entry now that we've processed it. */
                                    delete propertiesMap[property];
                                }
                            }
                        });

                        /* Create a tween out of each property, and append its associated data to tweensContainer. */
                        for (var property in propertiesMap) {

                            /**************************
                            Start Value Sourcing
                            **************************/

                            /* Parse out endValue, easing, and startValue from the property's data. */
                            var valueData = parsePropertyValue(propertiesMap[property]),
                                endValue = valueData[0],
                                easing = valueData[1],
                                startValue = valueData[2];

                            /* Now that the original property name's format has been used for the parsePropertyValue() lookup above,
                            we force the property to its camelCase styling to normalize it for manipulation. */
                            property = CSS.Names.camelCase(property);

                            /* In case this property is a hook, there are circumstances where we will intend to work on the hook's root property and not the hooked subproperty. */
                            var rootProperty = CSS.Hooks.getRoot(property),
                                rootPropertyValue = false;

                            /* Other than for the dummy tween property, properties that are not supported by the browser (and do not have an associated normalization) will
                            inherently produce no style changes when set, so they are skipped in order to decrease animation tick overhead.
                            Property support is determined via prefixCheck(), which returns a false flag when no supported is detected. */
                            /* Note: Since SVG elements have some of their properties directly applied as HTML attributes,
                            there is no way to check for their explicit browser support, and so we skip skip this check for them. */
                            if ((!data || !data.isSVG) && rootProperty !== "tween" && CSS.Names.prefixCheck(rootProperty)[1] === false && CSS.Normalizations.registered[rootProperty] === undefined) {
                                if (Velocity.debug) {
                                    console.log("Skipping [" + rootProperty + "] due to a lack of browser support.");
                                }
                                continue;
                            }

                            /* If the display option is being set to a non-"none" (e.g. "block") and opacity (filter on IE<=8) is being
                            animated to an endValue of non-zero, the user's intention is to fade in from invisible, thus we forcefeed opacity
                            a startValue of 0 if its startValue hasn't already been sourced by value transferring or prior forcefeeding. */
                            if ((opts.display !== undefined && opts.display !== null && opts.display !== "none" || opts.visibility !== undefined && opts.visibility !== "hidden") && /opacity|filter/.test(property) && !startValue && endValue !== 0) {
                                startValue = 0;
                            }

                            /* If values have been transferred from the previous Velocity call, extract the endValue and rootPropertyValue
                            for all of the current call's properties that were *also* animated in the previous call. */
                            /* Note: Value transferring can optionally be disabled by the user via the _cacheValues option. */
                            if (opts._cacheValues && lastTweensContainer && lastTweensContainer[property]) {
                                if (startValue === undefined) {
                                    startValue = lastTweensContainer[property].endValue + lastTweensContainer[property].unitType;
                                }

                                /* The previous call's rootPropertyValue is extracted from the element's data cache since that's the
                                instance of rootPropertyValue that gets freshly updated by the tweening process, whereas the rootPropertyValue
                                attached to the incoming lastTweensContainer is equal to the root property's value prior to any tweening. */
                                rootPropertyValue = data.rootPropertyValueCache[rootProperty];
                                /* If values were not transferred from a previous Velocity call, query the DOM as needed. */
                            } else {
                                /* Handle hooked properties. */
                                if (CSS.Hooks.registered[property]) {
                                    if (startValue === undefined) {
                                        rootPropertyValue = CSS.getPropertyValue(element, rootProperty); /* GET */
                                        /* Note: The following getPropertyValue() call does not actually trigger a DOM query;
                                        getPropertyValue() will extract the hook from rootPropertyValue. */
                                        startValue = CSS.getPropertyValue(element, property, rootPropertyValue);
                                        /* If startValue is already defined via forcefeeding, do not query the DOM for the root property's value;
                                        just grab rootProperty's zero-value template from CSS.Hooks. This overwrites the element's actual
                                        root property value (if one is set), but this is acceptable since the primary reason users forcefeed is
                                        to avoid DOM queries, and thus we likewise avoid querying the DOM for the root property's value. */
                                    } else {
                                        /* Grab this hook's zero-value template, e.g. "0px 0px 0px black". */
                                        rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
                                    }
                                    /* Handle non-hooked properties that haven't already been defined via forcefeeding. */
                                } else if (startValue === undefined) {
                                    startValue = CSS.getPropertyValue(element, property); /* GET */
                                }
                            }

                            /**************************
                            Value Data Extraction
                            **************************/

                            var separatedValue,
                                endValueUnitType,
                                startValueUnitType,
                                operator = false;

                            /* Separates a property value into its numeric value and its unit type. */
                            var separateValue = function separateValue(property, value) {
                                var unitType, numericValue;

                                numericValue = (value || "0").toString().toLowerCase()
                                /* Match the unit type at the end of the value. */
                                .replace(/[%A-z]+$/, function (match) {
                                    /* Grab the unit type. */
                                    unitType = match;

                                    /* Strip the unit type off of value. */
                                    return "";
                                });

                                /* If no unit type was supplied, assign one that is appropriate for this property (e.g. "deg" for rotateZ or "px" for width). */
                                if (!unitType) {
                                    unitType = CSS.Values.getUnitType(property);
                                }

                                return [numericValue, unitType];
                            };

                            /* Separate startValue. */
                            separatedValue = separateValue(property, startValue);
                            startValue = separatedValue[0];
                            startValueUnitType = separatedValue[1];

                            /* Separate endValue, and extract a value operator (e.g. "+=", "-=") if one exists. */
                            separatedValue = separateValue(property, endValue);
                            endValue = separatedValue[0].replace(/^([+-\/*])=/, function (match, subMatch) {
                                operator = subMatch;

                                /* Strip the operator off of the value. */
                                return "";
                            });
                            endValueUnitType = separatedValue[1];

                            /* Parse float values from endValue and startValue. Default to 0 if NaN is returned. */
                            startValue = parseFloat(startValue) || 0;
                            endValue = parseFloat(endValue) || 0;

                            /***************************************
                            Property-Specific Value Conversion
                            ***************************************/

                            /* Custom support for properties that don't actually accept the % unit type, but where pollyfilling is trivial and relatively foolproof. */
                            if (endValueUnitType === "%") {
                                /* A %-value fontSize/lineHeight is relative to the parent's fontSize (as opposed to the parent's dimensions),
                                which is identical to the em unit's behavior, so we piggyback off of that. */
                                if (/^(fontSize|lineHeight)$/.test(property)) {
                                    /* Convert % into an em decimal value. */
                                    endValue = endValue / 100;
                                    endValueUnitType = "em";
                                    /* For scaleX and scaleY, convert the value into its decimal format and strip off the unit type. */
                                } else if (/^scale/.test(property)) {
                                    endValue = endValue / 100;
                                    endValueUnitType = "";
                                    /* For RGB components, take the defined percentage of 255 and strip off the unit type. */
                                } else if (/(Red|Green|Blue)$/i.test(property)) {
                                    endValue = endValue / 100 * 255;
                                    endValueUnitType = "";
                                }
                            }

                            /***************************
                            Unit Ratio Calculation
                            ***************************/

                            /* When queried, the browser returns (most) CSS property values in pixels. Therefore, if an endValue with a unit type of
                            %, em, or rem is animated toward, startValue must be converted from pixels into the same unit type as endValue in order
                            for value manipulation logic (increment/decrement) to proceed. Further, if the startValue was forcefed or transferred
                            from a previous call, startValue may also not be in pixels. Unit conversion logic therefore consists of two steps:
                            1) Calculating the ratio of %/em/rem/vh/vw relative to pixels
                            2) Converting startValue into the same unit of measurement as endValue based on these ratios. */
                            /* Unit conversion ratios are calculated by inserting a sibling node next to the target node, copying over its position property,
                            setting values with the target unit type then comparing the returned pixel value. */
                            /* Note: Even if only one of these unit types is being animated, all unit ratios are calculated at once since the overhead
                            of batching the SETs and GETs together upfront outweights the potential overhead
                            of layout thrashing caused by re-querying for uncalculated ratios for subsequently-processed properties. */
                            /* Todo: Shift this logic into the calls' first tick instance so that it's synced with RAF. */
                            var calculateUnitRatios = function calculateUnitRatios() {

                                /************************
                                Same Ratio Checks
                                ************************/

                                /* The properties below are used to determine whether the element differs sufficiently from this call's
                                previously iterated element to also differ in its unit conversion ratios. If the properties match up with those
                                of the prior element, the prior element's conversion ratios are used. Like most optimizations in Velocity,
                                this is done to minimize DOM querying. */
                                var sameRatioIndicators = {
                                    myParent: element.parentNode || document.body, /* GET */
                                    position: CSS.getPropertyValue(element, "position"), /* GET */
                                    fontSize: CSS.getPropertyValue(element, "fontSize") /* GET */
                                },

                                /* Determine if the same % ratio can be used. % is based on the element's position value and its parent's width and height dimensions. */
                                samePercentRatio = sameRatioIndicators.position === callUnitConversionData.lastPosition && sameRatioIndicators.myParent === callUnitConversionData.lastParent,

                                /* Determine if the same em ratio can be used. em is relative to the element's fontSize. */
                                sameEmRatio = sameRatioIndicators.fontSize === callUnitConversionData.lastFontSize;

                                /* Store these ratio indicators call-wide for the next element to compare against. */
                                callUnitConversionData.lastParent = sameRatioIndicators.myParent;
                                callUnitConversionData.lastPosition = sameRatioIndicators.position;
                                callUnitConversionData.lastFontSize = sameRatioIndicators.fontSize;

                                /***************************
                                Element-Specific Units
                                ***************************/

                                /* Note: IE8 rounds to the nearest pixel when returning CSS values, thus we perform conversions using a measurement
                                of 100 (instead of 1) to give our ratios a precision of at least 2 decimal values. */
                                var measurement = 100,
                                    unitRatios = {};

                                if (!sameEmRatio || !samePercentRatio) {
                                    var dummy = data && data.isSVG ? document.createElementNS("http://www.w3.org/2000/svg", "rect") : document.createElement("div");

                                    Velocity.init(dummy);
                                    sameRatioIndicators.myParent.appendChild(dummy);

                                    /* To accurately and consistently calculate conversion ratios, the element's cascaded overflow and box-sizing are stripped.
                                    Similarly, since width/height can be artificially constrained by their min-/max- equivalents, these are controlled for as well. */
                                    /* Note: Overflow must be also be controlled for per-axis since the overflow property overwrites its per-axis values. */
                                    $.each(["overflow", "overflowX", "overflowY"], function (i, property) {
                                        Velocity.CSS.setPropertyValue(dummy, property, "hidden");
                                    });
                                    Velocity.CSS.setPropertyValue(dummy, "position", sameRatioIndicators.position);
                                    Velocity.CSS.setPropertyValue(dummy, "fontSize", sameRatioIndicators.fontSize);
                                    Velocity.CSS.setPropertyValue(dummy, "boxSizing", "content-box");

                                    /* width and height act as our proxy properties for measuring the horizontal and vertical % ratios. */
                                    $.each(["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height"], function (i, property) {
                                        Velocity.CSS.setPropertyValue(dummy, property, measurement + "%");
                                    });
                                    /* paddingLeft arbitrarily acts as our proxy property for the em ratio. */
                                    Velocity.CSS.setPropertyValue(dummy, "paddingLeft", measurement + "em");

                                    /* Divide the returned value by the measurement to get the ratio between 1% and 1px. Default to 1 since working with 0 can produce Infinite. */
                                    unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth = (parseFloat(CSS.getPropertyValue(dummy, "width", null, true)) || 1) / measurement; /* GET */
                                    unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight = (parseFloat(CSS.getPropertyValue(dummy, "height", null, true)) || 1) / measurement; /* GET */
                                    unitRatios.emToPx = callUnitConversionData.lastEmToPx = (parseFloat(CSS.getPropertyValue(dummy, "paddingLeft")) || 1) / measurement; /* GET */

                                    sameRatioIndicators.myParent.removeChild(dummy);
                                } else {
                                    unitRatios.emToPx = callUnitConversionData.lastEmToPx;
                                    unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth;
                                    unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight;
                                }

                                /***************************
                                Element-Agnostic Units
                                ***************************/

                                /* Whereas % and em ratios are determined on a per-element basis, the rem unit only needs to be checked
                                once per call since it's exclusively dependant upon document.body's fontSize. If this is the first time
                                that calculateUnitRatios() is being run during this call, remToPx will still be set to its default value of null,
                                so we calculate it now. */
                                if (callUnitConversionData.remToPx === null) {
                                    /* Default to browsers' default fontSize of 16px in the case of 0. */
                                    callUnitConversionData.remToPx = parseFloat(CSS.getPropertyValue(document.body, "fontSize")) || 16; /* GET */
                                }

                                /* Similarly, viewport units are %-relative to the window's inner dimensions. */
                                if (callUnitConversionData.vwToPx === null) {
                                    callUnitConversionData.vwToPx = parseFloat(window.innerWidth) / 100; /* GET */
                                    callUnitConversionData.vhToPx = parseFloat(window.innerHeight) / 100; /* GET */
                                }

                                unitRatios.remToPx = callUnitConversionData.remToPx;
                                unitRatios.vwToPx = callUnitConversionData.vwToPx;
                                unitRatios.vhToPx = callUnitConversionData.vhToPx;

                                if (Velocity.debug >= 1) {
                                    console.log("Unit ratios: " + JSON.stringify(unitRatios), element);
                                }
                                return unitRatios;
                            };

                            /********************
                            Unit Conversion
                            ********************/

                            /* The * and / operators, which are not passed in with an associated unit, inherently use startValue's unit. Skip value and unit conversion. */
                            if (/[\/*]/.test(operator)) {
                                endValueUnitType = startValueUnitType;
                                /* If startValue and endValue differ in unit type, convert startValue into the same unit type as endValue so that if endValueUnitType
                                is a relative unit (%, em, rem), the values set during tweening will continue to be accurately relative even if the metrics they depend
                                on are dynamically changing during the course of the animation. Conversely, if we always normalized into px and used px for setting values, the px ratio
                                would become stale if the original unit being animated toward was relative and the underlying metrics change during the animation. */
                                /* Since 0 is 0 in any unit type, no conversion is necessary when startValue is 0 -- we just start at 0 with endValueUnitType. */
                            } else if (startValueUnitType !== endValueUnitType && startValue !== 0) {
                                /* Unit conversion is also skipped when endValue is 0, but *startValueUnitType* must be used for tween values to remain accurate. */
                                /* Note: Skipping unit conversion here means that if endValueUnitType was originally a relative unit, the animation won't relatively
                                match the underlying metrics if they change, but this is acceptable since we're animating toward invisibility instead of toward visibility,
                                which remains past the point of the animation's completion. */
                                if (endValue === 0) {
                                    endValueUnitType = startValueUnitType;
                                } else {
                                    /* By this point, we cannot avoid unit conversion (it's undesirable since it causes layout thrashing).
                                    If we haven't already, we trigger calculateUnitRatios(), which runs once per element per call. */
                                    elementUnitConversionData = elementUnitConversionData || calculateUnitRatios();

                                    /* The following RegEx matches CSS properties that have their % values measured relative to the x-axis. */
                                    /* Note: W3C spec mandates that all of margin and padding's properties (even top and bottom) are %-relative to the *width* of the parent element. */
                                    var axis = /margin|padding|left|right|width|text|word|letter/i.test(property) || /X$/.test(property) || property === "x" ? "x" : "y";

                                    /* In order to avoid generating n^2 bespoke conversion functions, unit conversion is a two-step process:
                                    1) Convert startValue into pixels. 2) Convert this new pixel value into endValue's unit type. */
                                    switch (startValueUnitType) {
                                        case "%":
                                            /* Note: translateX and translateY are the only properties that are %-relative to an element's own dimensions -- not its parent's dimensions.
                                            Velocity does not include a special conversion process to account for this behavior. Therefore, animating translateX/Y from a % value
                                            to a non-% value will produce an incorrect start value. Fortunately, this sort of cross-unit conversion is rarely done by users in practice. */
                                            startValue *= axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight;
                                            break;

                                        case "px":
                                            /* px acts as our midpoint in the unit conversion process; do nothing. */
                                            break;

                                        default:
                                            startValue *= elementUnitConversionData[startValueUnitType + "ToPx"];
                                    }

                                    /* Invert the px ratios to convert into to the target unit. */
                                    switch (endValueUnitType) {
                                        case "%":
                                            startValue *= 1 / (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
                                            break;

                                        case "px":
                                            /* startValue is already in px, do nothing; we're done. */
                                            break;

                                        default:
                                            startValue *= 1 / elementUnitConversionData[endValueUnitType + "ToPx"];
                                    }
                                }
                            }

                            /*********************
                            Relative Values
                            *********************/

                            /* Operator logic must be performed last since it requires unit-normalized start and end values. */
                            /* Note: Relative *percent values* do not behave how most people think; while one would expect "+=50%"
                            to increase the property 1.5x its current value, it in fact increases the percent units in absolute terms:
                            50 points is added on top of the current % value. */
                            switch (operator) {
                                case "+":
                                    endValue = startValue + endValue;
                                    break;

                                case "-":
                                    endValue = startValue - endValue;
                                    break;

                                case "*":
                                    endValue = startValue * endValue;
                                    break;

                                case "/":
                                    endValue = startValue / endValue;
                                    break;
                            }

                            /**************************
                            tweensContainer Push
                            **************************/

                            /* Construct the per-property tween object, and push it to the element's tweensContainer. */
                            tweensContainer[property] = {
                                rootPropertyValue: rootPropertyValue,
                                startValue: startValue,
                                currentValue: startValue,
                                endValue: endValue,
                                unitType: endValueUnitType,
                                easing: easing
                            };

                            if (Velocity.debug) {
                                console.log("tweensContainer (" + property + "): " + JSON.stringify(tweensContainer[property]), element);
                            }
                        }

                        /* Along with its property data, store a reference to the element itself onto tweensContainer. */
                        tweensContainer.element = element;
                    }

                    /*****************
                    Call Push
                    *****************/

                    /* Note: tweensContainer can be empty if all of the properties in this call's property map were skipped due to not
                    being supported by the browser. The element property is used for checking that the tweensContainer has been appended to. */
                    if (tweensContainer.element) {
                        /* Apply the "velocity-animating" indicator class. */
                        CSS.Values.addClass(element, "velocity-animating");

                        /* The call array houses the tweensContainers for each element being animated in the current call. */
                        call.push(tweensContainer);

                        data = Data(element);

                        if (data) {
                            /* Store the tweensContainer and options if we're working on the default effects queue, so that they can be used by the reverse command. */
                            if (opts.queue === "") {

                                data.tweensContainer = tweensContainer;
                                data.opts = opts;
                            }

                            /* Switch on the element's animating flag. */
                            data.isAnimating = true;
                        }

                        /* Once the final element in this call's element set has been processed, push the call array onto
                        Velocity.State.calls for the animation tick to immediately begin processing. */
                        if (elementsIndex === elementsLength - 1) {
                            /* Add the current call plus its associated metadata (the element set and the call's options) onto the global call container.
                            Anything on this call container is subjected to tick() processing. */
                            Velocity.State.calls.push([call, elements, opts, null, promiseData.resolver]);

                            /* If the animation tick isn't running, start it. (Velocity shuts it off when there are no active calls to process.) */
                            if (Velocity.State.isTicking === false) {
                                Velocity.State.isTicking = true;

                                /* Start the tick loop. */
                                tick();
                            }
                        } else {
                            elementsIndex++;
                        }
                    }
                }

                /* When the queue option is set to false, the call skips the element's queue and fires immediately. */
                if (opts.queue === false) {
                    /* Since this buildQueue call doesn't respect the element's existing queue (which is where a delay option would have been appended),
                    we manually inject the delay property here with an explicit setTimeout. */
                    if (opts.delay) {
                        setTimeout(buildQueue, opts.delay);
                    } else {
                        buildQueue();
                    }
                    /* Otherwise, the call undergoes element queueing as normal. */
                    /* Note: To interoperate with jQuery, Velocity uses jQuery's own $.queue() stack for queuing logic. */
                } else {
                    $.queue(element, opts.queue, function (next, clearQueue) {
                        /* If the clearQueue flag was passed in by the stop command, resolve this call's promise. (Promises can only be resolved once,
                        so it's fine if this is repeatedly triggered for each element in the associated call.) */
                        if (clearQueue === true) {
                            if (promiseData.promise) {
                                promiseData.resolver(elements);
                            }

                            /* Do not continue with animation queueing. */
                            return true;
                        }

                        /* This flag indicates to the upcoming completeCall() function that this queue entry was initiated by Velocity.
                        See completeCall() for further details. */
                        Velocity.velocityQueueEntryFlag = true;

                        buildQueue(next);
                    });
                }

                /*********************
                Auto-Dequeuing
                *********************/

                /* As per jQuery's $.queue() behavior, to fire the first non-custom-queue entry on an element, the element
                must be dequeued if its queue stack consists *solely* of the current call. (This can be determined by checking
                for the "inprogress" item that jQuery prepends to active queue stack arrays.) Regardless, whenever the element's
                queue is further appended with additional items -- including $.delay()'s or even $.animate() calls, the queue's
                first entry is automatically fired. This behavior contrasts that of custom queues, which never auto-fire. */
                /* Note: When an element set is being subjected to a non-parallel Velocity call, the animation will not begin until
                each one of the elements in the set has reached the end of its individually pre-existing queue chain. */
                /* Note: Unfortunately, most people don't fully grasp jQuery's powerful, yet quirky, $.queue() function.
                Lean more here: http://stackoverflow.com/questions/1058158/can-somebody-explain-jquery-queue-to-me */
                if ((opts.queue === "" || opts.queue === "fx") && $.queue(element)[0] !== "inprogress") {
                    $.dequeue(element);
                }
            }

            /**************************
            Element Set Iteration
            **************************/

            /* If the "nodeType" property exists on the elements variable, we're animating a single element.
            Place it in an array so that $.each() can iterate over it. */
            $.each(elements, function (i, element) {
                /* Ensure each element in a set has a nodeType (is a real element) to avoid throwing errors. */
                if (Type.isNode(element)) {
                    processElement(element, i);
                }
            });

            /******************
            Option: Loop
            ******************/

            /* The loop option accepts an integer indicating how many times the element should loop between the values in the
            current call's properties map and the element's property values prior to this call. */
            /* Note: The loop option's logic is performed here -- after element processing -- because the current call needs
            to undergo its queue insertion prior to the loop option generating its series of constituent "reverse" calls,
            which chain after the current call. Two reverse calls (two "alternations") constitute one loop. */
            opts = $.extend({}, Velocity.defaults, options);
            opts.loop = parseInt(opts.loop, 10);
            var reverseCallsCount = opts.loop * 2 - 1;

            if (opts.loop) {
                /* Double the loop count to convert it into its appropriate number of "reverse" calls.
                Subtract 1 from the resulting value since the current call is included in the total alternation count. */
                for (var x = 0; x < reverseCallsCount; x++) {
                    /* Since the logic for the reverse action occurs inside Queueing and therefore this call's options object
                    isn't parsed until then as well, the current call's delay option must be explicitly passed into the reverse
                    call so that the delay logic that occurs inside *Pre-Queueing* can process it. */
                    var reverseOptions = {
                        delay: opts.delay,
                        progress: opts.progress
                    };

                    /* If a complete callback was passed into this call, transfer it to the loop redirect's final "reverse" call
                    so that it's triggered when the entire redirect is complete (and not when the very first animation is complete). */
                    if (x === reverseCallsCount - 1) {
                        reverseOptions.display = opts.display;
                        reverseOptions.visibility = opts.visibility;
                        reverseOptions.complete = opts.complete;
                    }

                    animate(elements, "reverse", reverseOptions);
                }
            }

            /***************
            Chaining
            ***************/

            /* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */
            return getChain();
        };

        /* Turn Velocity into the animation function, extended with the pre-existing Velocity object. */
        Velocity = $.extend(animate, Velocity);
        /* For legacy support, also expose the literal animate method. */
        Velocity.animate = animate;

        /**************
        Timing
        **************/

        /* Ticker function. */
        var ticker = window.requestAnimationFrame || rAFShim;

        /* Inactive browser tabs pause rAF, which results in all active animations immediately sprinting to their completion states when the tab refocuses.
        To get around this, we dynamically switch rAF to setTimeout (which the browser *doesn't* pause) when the tab loses focus. We skip this for mobile
        devices to avoid wasting battery power on inactive tabs. */
        /* Note: Tab focus detection doesn't work on older versions of IE, but that's okay since they don't support rAF to begin with. */
        if (!Velocity.State.isMobile && document.hidden !== undefined) {
            document.addEventListener("visibilitychange", function () {
                /* Reassign the rAF function (which the global tick() function uses) based on the tab's focus state. */
                if (document.hidden) {
                    ticker = function ticker(callback) {
                        /* The tick function needs a truthy first argument in order to pass its internal timestamp check. */
                        return setTimeout(function () {
                            callback(true);
                        }, 16);
                    };

                    /* The rAF loop has been paused by the browser, so we manually restart the tick. */
                    tick();
                } else {
                    ticker = window.requestAnimationFrame || rAFShim;
                }
            });
        }

        /************
        Tick
        ************/

        /* Note: All calls to Velocity are pushed to the Velocity.State.calls array, which is fully iterated through upon each tick. */
        function tick(timestamp) {
            /* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.
            We leverage this metadata to fully ignore the first tick pass since RAF's initial pass is fired whenever
            the browser's next tick sync time occurs, which results in the first elements subjected to Velocity
            calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore
            the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated
            by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */
            if (timestamp) {
                /* We ignore RAF's high resolution timestamp since it can be significantly offset when the browser is
                under high stress; we opt for choppiness over allowing the browser to drop huge chunks of frames. */
                var timeCurrent = new Date().getTime();

                /********************
                Call Iteration
                ********************/

                var callsLength = Velocity.State.calls.length;

                /* To speed up iterating over this array, it is compacted (falsey items -- calls that have completed -- are removed)
                when its length has ballooned to a point that can impact tick performance. This only becomes necessary when animation
                has been continuous with many elements over a long period of time; whenever all active calls are completed, completeCall() clears Velocity.State.calls. */
                if (callsLength > 10000) {
                    Velocity.State.calls = compactSparseArray(Velocity.State.calls);
                    callsLength = Velocity.State.calls.length;
                }

                /* Iterate through each active call. */
                for (var i = 0; i < callsLength; i++) {
                    /* When a Velocity call is completed, its Velocity.State.calls entry is set to false. Continue on to the next call. */
                    if (!Velocity.State.calls[i]) {
                        continue;
                    }

                    /************************
                    Call-Wide Variables
                    ************************/

                    var callContainer = Velocity.State.calls[i],
                        call = callContainer[0],
                        opts = callContainer[2],
                        timeStart = callContainer[3],
                        firstTick = !!timeStart,
                        tweenDummyValue = null;

                    /* If timeStart is undefined, then this is the first time that this call has been processed by tick().
                    We assign timeStart now so that its value is as close to the real animation start time as possible.
                    (Conversely, had timeStart been defined when this call was added to Velocity.State.calls, the delay
                    between that time and now would cause the first few frames of the tween to be skipped since
                    percentComplete is calculated relative to timeStart.) */
                    /* Further, subtract 16ms (the approximate resolution of RAF) from the current time value so that the
                    first tick iteration isn't wasted by animating at 0% tween completion, which would produce the
                    same style value as the element's current value. */
                    if (!timeStart) {
                        timeStart = Velocity.State.calls[i][3] = timeCurrent - 16;
                    }

                    /* The tween's completion percentage is relative to the tween's start time, not the tween's start value
                    (which would result in unpredictable tween durations since JavaScript's timers are not particularly accurate).
                    Accordingly, we ensure that percentComplete does not exceed 1. */
                    var percentComplete = Math.min((timeCurrent - timeStart) / opts.duration, 1);

                    /**********************
                    Element Iteration
                    **********************/

                    /* For every call, iterate through each of the elements in its set. */
                    for (var j = 0, callLength = call.length; j < callLength; j++) {
                        var tweensContainer = call[j],
                            element = tweensContainer.element;

                        /* Check to see if this element has been deleted midway through the animation by checking for the
                        continued existence of its data cache. If it's gone, skip animating this element. */
                        if (!Data(element)) {
                            continue;
                        }

                        var transformPropertyExists = false;

                        /**********************************
                        Display & Visibility Toggling
                        **********************************/

                        /* If the display option is set to non-"none", set it upfront so that the element can become visible before tweening begins.
                        (Otherwise, display's "none" value is set in completeCall() once the animation has completed.) */
                        if (opts.display !== undefined && opts.display !== null && opts.display !== "none") {
                            if (opts.display === "flex") {
                                var flexValues = ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex"];

                                $.each(flexValues, function (i, flexValue) {
                                    CSS.setPropertyValue(element, "display", flexValue);
                                });
                            }

                            CSS.setPropertyValue(element, "display", opts.display);
                        }

                        /* Same goes with the visibility option, but its "none" equivalent is "hidden". */
                        if (opts.visibility !== undefined && opts.visibility !== "hidden") {
                            CSS.setPropertyValue(element, "visibility", opts.visibility);
                        }

                        /************************
                        Property Iteration
                        ************************/

                        /* For every element, iterate through each property. */
                        for (var property in tweensContainer) {
                            /* Note: In addition to property tween data, tweensContainer contains a reference to its associated element. */
                            if (property !== "element") {
                                var tween = tweensContainer[property],
                                    currentValue,

                                /* Easing can either be a pre-genereated function or a string that references a pre-registered easing
                                 on the Velocity.Easings object. In either case, return the appropriate easing *function*. */
                                easing = Type.isString(tween.easing) ? Velocity.Easings[tween.easing] : tween.easing;

                                /******************************
                                Current Value Calculation
                                ******************************/

                                /* If this is the last tick pass (if we've reached 100% completion for this tween),
                                ensure that currentValue is explicitly set to its target endValue so that it's not subjected to any rounding. */
                                if (percentComplete === 1) {
                                    currentValue = tween.endValue;
                                    /* Otherwise, calculate currentValue based on the current delta from startValue. */
                                } else {
                                    var tweenDelta = tween.endValue - tween.startValue;
                                    currentValue = tween.startValue + tweenDelta * easing(percentComplete, opts, tweenDelta);

                                    /* If no value change is occurring, don't proceed with DOM updating. */
                                    if (!firstTick && currentValue === tween.currentValue) {
                                        continue;
                                    }
                                }

                                tween.currentValue = currentValue;

                                /* If we're tweening a fake 'tween' property in order to log transition values, update the one-per-call variable so that
                                it can be passed into the progress callback. */
                                if (property === "tween") {
                                    tweenDummyValue = currentValue;
                                } else {
                                    /******************
                                    Hooks: Part I
                                    ******************/
                                    var hookRoot;

                                    /* For hooked properties, the newly-updated rootPropertyValueCache is cached onto the element so that it can be used
                                    for subsequent hooks in this call that are associated with the same root property. If we didn't cache the updated
                                    rootPropertyValue, each subsequent update to the root property in this tick pass would reset the previous hook's
                                    updates to rootPropertyValue prior to injection. A nice performance byproduct of rootPropertyValue caching is that
                                    subsequently chained animations using the same hookRoot but a different hook can use this cached rootPropertyValue. */
                                    if (CSS.Hooks.registered[property]) {
                                        hookRoot = CSS.Hooks.getRoot(property);

                                        var rootPropertyValueCache = Data(element).rootPropertyValueCache[hookRoot];

                                        if (rootPropertyValueCache) {
                                            tween.rootPropertyValue = rootPropertyValueCache;
                                        }
                                    }

                                    /*****************
                                    DOM Update
                                    *****************/

                                    /* setPropertyValue() returns an array of the property name and property value post any normalization that may have been performed. */
                                    /* Note: To solve an IE<=8 positioning bug, the unit type is dropped when setting a property value of 0. */
                                    var adjustedSetData = CSS.setPropertyValue(element, /* SET */
                                    property, tween.currentValue + (parseFloat(currentValue) === 0 ? "" : tween.unitType), tween.rootPropertyValue, tween.scrollData);

                                    /*******************
                                    Hooks: Part II
                                    *******************/

                                    /* Now that we have the hook's updated rootPropertyValue (the post-processed value provided by adjustedSetData), cache it onto the element. */
                                    if (CSS.Hooks.registered[property]) {
                                        /* Since adjustedSetData contains normalized data ready for DOM updating, the rootPropertyValue needs to be re-extracted from its normalized form. ?? */
                                        if (CSS.Normalizations.registered[hookRoot]) {
                                            Data(element).rootPropertyValueCache[hookRoot] = CSS.Normalizations.registered[hookRoot]("extract", null, adjustedSetData[1]);
                                        } else {
                                            Data(element).rootPropertyValueCache[hookRoot] = adjustedSetData[1];
                                        }
                                    }

                                    /***************
                                    Transforms
                                    ***************/

                                    /* Flag whether a transform property is being animated so that flushTransformCache() can be triggered once this tick pass is complete. */
                                    if (adjustedSetData[0] === "transform") {
                                        transformPropertyExists = true;
                                    }
                                }
                            }
                        }

                        /****************
                        mobileHA
                        ****************/

                        /* If mobileHA is enabled, set the translate3d transform to null to force hardware acceleration.
                        It's safe to override this property since Velocity doesn't actually support its animation (hooks are used in its place). */
                        if (opts.mobileHA) {
                            /* Don't set the null transform hack if we've already done so. */
                            if (Data(element).transformCache.translate3d === undefined) {
                                /* All entries on the transformCache object are later concatenated into a single transform string via flushTransformCache(). */
                                Data(element).transformCache.translate3d = "(0px, 0px, 0px)";

                                transformPropertyExists = true;
                            }
                        }

                        if (transformPropertyExists) {
                            CSS.flushTransformCache(element);
                        }
                    }

                    /* The non-"none" display value is only applied to an element once -- when its associated call is first ticked through.
                    Accordingly, it's set to false so that it isn't re-processed by this call in the next tick. */
                    if (opts.display !== undefined && opts.display !== "none") {
                        Velocity.State.calls[i][2].display = false;
                    }
                    if (opts.visibility !== undefined && opts.visibility !== "hidden") {
                        Velocity.State.calls[i][2].visibility = false;
                    }

                    /* Pass the elements and the timing data (percentComplete, msRemaining, timeStart, tweenDummyValue) into the progress callback. */
                    if (opts.progress) {
                        opts.progress.call(callContainer[1], callContainer[1], percentComplete, Math.max(0, timeStart + opts.duration - timeCurrent), timeStart, tweenDummyValue);
                    }

                    /* If this call has finished tweening, pass its index to completeCall() to handle call cleanup. */
                    if (percentComplete === 1) {
                        completeCall(i);
                    }
                }
            }

            /* Note: completeCall() sets the isTicking flag to false when the last call on Velocity.State.calls has completed. */
            if (Velocity.State.isTicking) {
                ticker(tick);
            }
        }

        /**********************
        Call Completion
        **********************/

        /* Note: Unlike tick(), which processes all active calls at once, call completion is handled on a per-call basis. */
        function completeCall(callIndex, isStopped) {
            /* Ensure the call exists. */
            if (!Velocity.State.calls[callIndex]) {
                return false;
            }

            /* Pull the metadata from the call. */
            var call = Velocity.State.calls[callIndex][0],
                elements = Velocity.State.calls[callIndex][1],
                opts = Velocity.State.calls[callIndex][2],
                resolver = Velocity.State.calls[callIndex][4];

            var remainingCallsExist = false;

            /*************************
            Element Finalization
            *************************/

            for (var i = 0, callLength = call.length; i < callLength; i++) {
                var element = call[i].element;

                /* If the user set display to "none" (intending to hide the element), set it now that the animation has completed. */
                /* Note: display:none isn't set when calls are manually stopped (via Velocity("stop"). */
                /* Note: Display gets ignored with "reverse" calls and infinite loops, since this behavior would be undesirable. */
                if (!isStopped && !opts.loop) {
                    if (opts.display === "none") {
                        CSS.setPropertyValue(element, "display", opts.display);
                    }

                    if (opts.visibility === "hidden") {
                        CSS.setPropertyValue(element, "visibility", opts.visibility);
                    }
                }

                /* If the element's queue is empty (if only the "inprogress" item is left at position 0) or if its queue is about to run
                a non-Velocity-initiated entry, turn off the isAnimating flag. A non-Velocity-initiatied queue entry's logic might alter
                an element's CSS values and thereby cause Velocity's cached value data to go stale. To detect if a queue entry was initiated by Velocity,
                we check for the existence of our special Velocity.queueEntryFlag declaration, which minifiers won't rename since the flag
                is assigned to jQuery's global $ object and thus exists out of Velocity's own scope. */
                var data = Data(element);

                if (opts.loop !== true && ($.queue(element)[1] === undefined || !/\.velocityQueueEntryFlag/i.test($.queue(element)[1]))) {
                    /* The element may have been deleted. Ensure that its data cache still exists before acting on it. */
                    if (data) {
                        data.isAnimating = false;
                        /* Clear the element's rootPropertyValueCache, which will become stale. */
                        data.rootPropertyValueCache = {};

                        var transformHAPropertyExists = false;
                        /* If any 3D transform subproperty is at its default value (regardless of unit type), remove it. */
                        $.each(CSS.Lists.transforms3D, function (i, transformName) {
                            var defaultValue = /^scale/.test(transformName) ? 1 : 0,
                                currentValue = data.transformCache[transformName];

                            if (data.transformCache[transformName] !== undefined && new RegExp("^\\(" + defaultValue + "[^.]").test(currentValue)) {
                                transformHAPropertyExists = true;

                                delete data.transformCache[transformName];
                            }
                        });

                        /* Mobile devices have hardware acceleration removed at the end of the animation in order to avoid hogging the GPU's memory. */
                        if (opts.mobileHA) {
                            transformHAPropertyExists = true;
                            delete data.transformCache.translate3d;
                        }

                        /* Flush the subproperty removals to the DOM. */
                        if (transformHAPropertyExists) {
                            CSS.flushTransformCache(element);
                        }

                        /* Remove the "velocity-animating" indicator class. */
                        CSS.Values.removeClass(element, "velocity-animating");
                    }
                }

                /*********************
                Option: Complete
                *********************/

                /* Complete is fired once per call (not once per element) and is passed the full raw DOM element set as both its context and its first argument. */
                /* Note: Callbacks aren't fired when calls are manually stopped (via Velocity("stop"). */
                if (!isStopped && opts.complete && !opts.loop && i === callLength - 1) {
                    /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
                    try {
                        opts.complete.call(elements, elements);
                    } catch (error) {
                        setTimeout(function () {
                            throw error;
                        }, 1);
                    }
                }

                /**********************
                Promise Resolving
                **********************/

                /* Note: Infinite loops don't return promises. */
                if (resolver && opts.loop !== true) {
                    resolver(elements);
                }

                /****************************
                Option: Loop (Infinite)
                ****************************/

                if (data && opts.loop === true && !isStopped) {
                    /* If a rotateX/Y/Z property is being animated by 360 deg with loop:true, swap tween start/end values to enable
                    continuous iterative rotation looping. (Otherise, the element would just rotate back and forth.) */
                    $.each(data.tweensContainer, function (propertyName, tweenContainer) {
                        if (/^rotate/.test(propertyName) && (parseFloat(tweenContainer.startValue) - parseFloat(tweenContainer.endValue)) % 360 === 0) {
                            var oldStartValue = tweenContainer.startValue;

                            tweenContainer.startValue = tweenContainer.endValue;
                            tweenContainer.endValue = oldStartValue;
                        }

                        if (/^backgroundPosition/.test(propertyName) && parseFloat(tweenContainer.endValue) === 100 && tweenContainer.unitType === "%") {
                            tweenContainer.endValue = 0;
                            tweenContainer.startValue = 100;
                        }
                    });

                    Velocity(element, "reverse", { loop: true, delay: opts.delay });
                }

                /***************
                Dequeueing
                ***************/

                /* Fire the next call in the queue so long as this call's queue wasn't set to false (to trigger a parallel animation),
                which would have already caused the next call to fire. Note: Even if the end of the animation queue has been reached,
                $.dequeue() must still be called in order to completely clear jQuery's animation queue. */
                if (opts.queue !== false) {
                    $.dequeue(element, opts.queue);
                }
            }

            /************************
            Calls Array Cleanup
            ************************/

            /* Since this call is complete, set it to false so that the rAF tick skips it. This array is later compacted via compactSparseArray().
            (For performance reasons, the call is set to false instead of being deleted from the array: http://www.html5rocks.com/en/tutorials/speed/v8/) */
            Velocity.State.calls[callIndex] = false;

            /* Iterate through the calls array to determine if this was the final in-progress animation.
            If so, set a flag to end ticking and clear the calls array. */
            for (var j = 0, callsLength = Velocity.State.calls.length; j < callsLength; j++) {
                if (Velocity.State.calls[j] !== false) {
                    remainingCallsExist = true;

                    break;
                }
            }

            if (remainingCallsExist === false) {
                /* tick() will detect this flag upon its next iteration and subsequently turn itself off. */
                Velocity.State.isTicking = false;

                /* Clear the calls array so that its length is reset. */
                delete Velocity.State.calls;
                Velocity.State.calls = [];
            }
        }

        /******************
        Frameworks
        ******************/

        /* Both jQuery and Zepto allow their $.fn object to be extended to allow wrapped elements to be subjected to plugin calls.
        If either framework is loaded, register a "velocity" extension pointing to Velocity's core animate() method.  Velocity
        also registers itself onto a global container (window.jQuery || window.Zepto || window) so that certain features are
        accessible beyond just a per-element scope. This master object contains an .animate() method, which is later assigned to $.fn
        (if jQuery or Zepto are present). Accordingly, Velocity can both act on wrapped DOM elements and stand alone for targeting raw DOM elements. */
        global.Velocity = Velocity;

        if (global !== window) {
            /* Assign the element function to Velocity's core animate() method. */
            global.fn.velocity = animate;
            /* Assign the object function's defaults to Velocity's global defaults object. */
            global.fn.velocity.defaults = Velocity.defaults;
        }

        /***********************
        Packaged Redirects
        ***********************/

        /* slideUp, slideDown */
        $.each(["Down", "Up"], function (i, direction) {
            Velocity.Redirects["slide" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
                var opts = $.extend({}, options),
                    begin = opts.begin,
                    complete = opts.complete,
                    computedValues = { height: "", marginTop: "", marginBottom: "", paddingTop: "", paddingBottom: "" },
                    inlineValues = {};

                if (opts.display === undefined) {
                    /* Show the element before slideDown begins and hide the element after slideUp completes. */
                    /* Note: Inline elements cannot have dimensions animated, so they're reverted to inline-block. */
                    opts.display = direction === "Down" ? Velocity.CSS.Values.getDisplayType(element) === "inline" ? "inline-block" : "block" : "none";
                }

                opts.begin = function () {
                    /* If the user passed in a begin callback, fire it now. */
                    if (begin) {
                        begin.call(elements, elements);
                    }

                    /* Cache the elements' original vertical dimensional property values so that we can animate back to them. */
                    for (var property in computedValues) {
                        inlineValues[property] = element.style[property];

                        /* For slideDown, use forcefeeding to animate all vertical properties from 0. For slideUp,
                        use forcefeeding to start from computed values and animate down to 0. */
                        var propertyValue = Velocity.CSS.getPropertyValue(element, property);
                        computedValues[property] = direction === "Down" ? [propertyValue, 0] : [0, propertyValue];
                    }

                    /* Force vertical overflow content to clip so that sliding works as expected. */
                    inlineValues.overflow = element.style.overflow;
                    element.style.overflow = "hidden";
                };

                opts.complete = function () {
                    /* Reset element to its pre-slide inline values once its slide animation is complete. */
                    for (var property in inlineValues) {
                        element.style[property] = inlineValues[property];
                    }

                    /* If the user passed in a complete callback, fire it now. */
                    if (complete) {
                        complete.call(elements, elements);
                    }
                    if (promiseData) {
                        promiseData.resolver(elements);
                    }
                };

                Velocity(element, computedValues, opts);
            };
        });

        /* fadeIn, fadeOut */
        $.each(["In", "Out"], function (i, direction) {
            Velocity.Redirects["fade" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
                var opts = $.extend({}, options),
                    originalComplete = opts.complete,
                    propertiesMap = { opacity: direction === "In" ? 1 : 0 };

                /* Since redirects are triggered individually for each element in the animated set, avoid repeatedly triggering
                callbacks by firing them only when the final element has been reached. */
                if (elementsIndex !== elementsSize - 1) {
                    opts.complete = opts.begin = null;
                } else {
                    opts.complete = function () {
                        if (originalComplete) {
                            originalComplete.call(elements, elements);
                        }

                        if (promiseData) {
                            promiseData.resolver(elements);
                        }
                    };
                }

                /* If a display was passed in, use it. Otherwise, default to "none" for fadeOut or the element-specific default for fadeIn. */
                /* Note: We allow users to pass in "null" to skip display setting altogether. */
                if (opts.display === undefined) {
                    opts.display = direction === "In" ? "auto" : "none";
                }

                Velocity(this, propertiesMap, opts);
            };
        });

        return Velocity;
    }(window.jQuery || window.Zepto || window, window, document);
});

/******************
 Known Issues
 ******************/

/* The CSS spec mandates that the translateX/Y/Z transforms are %-relative to the element itself -- not its parent.
 Velocity, however, doesn't make this distinction. Thus, converting to or from the % unit with these subproperties
 will produce an inaccurate conversion value. The same issue exists with the cx/cy attributes of SVG circles and ellipses. */
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// ReSharper disable StatementIsNotTerminated
/*!
 * Bootstrap v3.2.0 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}

/* ========================================================================
 * Bootstrap: transition.js v3.2.0
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap');

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    };

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }

    return false; // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function () {
      called = true;
    });

    var callback = function callback() {
      if (!called) $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };

  $(function () {
    $.support.transition = transitionEnd();

    if (!$.support.transition) return;

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function handle(e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
      }
    };
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.2.0
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]';
  var Alert = function Alert(el) {
    $(el).on('click', dismiss, this.close);
  };

  Alert.VERSION = '3.2.0';

  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    var $parent = $(selector);

    if (e) e.preventDefault();

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent();
    }

    $parent.trigger(e = $.Event('close.bs.alert'));

    if (e.isDefaultPrevented()) return;

    $parent.removeClass('in');

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove();
    }

    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(150) : removeElement();
  };

  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');

      if (!data) $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.alert;

  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;

  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };

  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.2.0
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function Button(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };

  Button.VERSION = '3.2.0';

  Button.DEFAULTS = {
    loadingText: 'loading...'
  };

  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();

    state = state + 'Text';

    if (data.resetText == null) $el.data('resetText', $el[val]());

    $el[val](data[state] == null ? this.options[state] : data[state]);

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d);
      }
    }, this), 0);
  };

  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');

    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false;else $parent.find('.active').removeClass('active');
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change');
    }

    if (changed) this.$element.toggleClass('active');
  };

  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.button', data = new Button(this, options));

      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
    });
  }

  var old = $.fn.button;

  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;

  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };

  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target);
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn');
    Plugin.call($btn, 'toggle');
    e.preventDefault();
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.2.0
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function Carousel(element, options) {
    this.$element = $(element).on('keydown.bs.carousel', $.proxy(this.keydown, this));
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = this.sliding = this.interval = this.$active = this.$items = null;

    this.options.pause == 'hover' && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
  };

  Carousel.VERSION = '3.2.0';

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true
  };

  Carousel.prototype.keydown = function (e) {
    switch (e.which) {
      case 37:
        this.prev();break;
      case 39:
        this.next();break;
      default:
        return;
    }

    e.preventDefault();
  };

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);

    this.interval && clearInterval(this.interval);

    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

    return this;
  };

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item');
    return this.$items.index(item || this.$active);
  };

  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));

    if (pos > this.$items.length - 1 || pos < 0) return;

    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
      that.to(pos);
    }); // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle();

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]));
  };

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }

    this.interval = clearInterval(this.interval);

    return this;
  };

  Carousel.prototype.next = function () {
    if (this.sliding) return;
    return this.slide('next');
  };

  Carousel.prototype.prev = function () {
    if (this.sliding) return;
    return this.slide('prev');
  };

  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || $active[type]();
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var fallback = type == 'next' ? 'first' : 'last';
    var that = this;

    if (!$next.length) {
      if (!this.options.wrap) return;
      $next = this.$element.find('.item')[fallback]();
    }

    if ($next.hasClass('active')) return this.sliding = false;

    var relatedTarget = $next[0];
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented()) return;

    this.sliding = true;

    isCycling && this.pause();

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
      $nextIndicator && $nextIndicator.addClass('active');
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth; // force reflow
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one('bsTransitionEnd', function () {
        $next.removeClass([type, direction].join(' ')).addClass('active');
        $active.removeClass(['active', direction].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger(slidEvent);
        }, 0);
      }).emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }

    isCycling && this.cycle();

    return this;
  };

  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;

      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
    });
  }

  var old = $.fn.carousel;

  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;

  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };

  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var href;
    var $this = $(this);
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    if (!$target.hasClass('carousel')) return;
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex) options.interval = false;

    Plugin.call($target, options);

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex);
    }

    e.preventDefault();
  });

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.2.0
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function Collapse(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.transitioning = null;

    if (this.options.parent) this.$parent = $(this.options.parent);
    if (this.options.toggle) this.toggle();
  };

  Collapse.VERSION = '3.2.0';

  Collapse.DEFAULTS = {
    toggle: true
  };

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return;

    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var actives = this.$parent && this.$parent.find('> .panel > .in');

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse');
      if (hasData && hasData.transitioning) return;
      Plugin.call(actives, 'hide');
      hasData || actives.data('bs.collapse', null);
    }

    var dimension = this.dimension();

    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0);

    this.transitioning = 1;

    var complete = function complete() {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
  };

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return;

    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var dimension = this.dimension();

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

    this.$element.addClass('collapsing').removeClass('collapse').removeClass('in');

    this.transitioning = 1;

    var complete = function complete() {
      this.transitioning = 0;
      this.$element.trigger('hidden.bs.collapse').removeClass('collapsing').addClass('collapse');
    };

    if (!$.support.transition) return complete.call(this);

    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(350);
  };

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };

  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data && options.toggle && option == 'show') option = !option;
      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.collapse;

  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;

  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };

  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var href;
    var $this = $(this);
    var target = $this.attr('data-target') || e.preventDefault() || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7
    var $target = $(target);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();
    var parent = $this.attr('data-parent');
    var $parent = parent && $(parent);

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle="collapse"][data-parent="' + parent + '"]').not($this).addClass('collapsed');
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed');
    }

    Plugin.call($target, option);
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.2.0
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function Dropdown(element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };

  Dropdown.VERSION = '3.2.0';

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    clearMenus();

    if (!isActive) {

      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length && !$parent.closest('.e-dropdown_oneTouch').length) {

        /*
            El condicional a�ade un div que da soporte a ciertas versiones iOS (http://getbootstrap.com/javascript/#dropdowns).
            Para evitar el efecto del doble click el propio Bootstrap deshabilita la opci�n para navbar-bar (men� de navegaci�n m�vil),
            se ha creado una clase propia que deshabilita el efecto y no a�ade las caracter�sticas propias de "navbar-nav"
            
            (no se han localizado errores entre los dispositivos disponibles a nuestro alcance)
        */

        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus);
      }

      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.trigger('focus');

      $parent.toggleClass('open').trigger('shown.bs.dropdown', relatedTarget);
    }

    return false;
  };

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return;

    var $this = $(this);

    e.preventDefault();
    e.stopPropagation();

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    if (!isActive || isActive && e.keyCode == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus');
      return $this.trigger('click');
    }

    var desc = ' li:not(.divider):visible a';
    var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc);

    if (!$items.length) return;

    var index = $items.index($items.filter(':focus'));

    if (e.keyCode == 38 && index > 0) index--; // up
    if (e.keyCode == 40 && index < $items.length - 1) index++; // down
    if (!~index) index = 0;

    $items.eq(index).trigger('focus');
  };

  function clearMenus(e) {
    if (e && e.which === 3) return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $parent = getParent($(this));
      var relatedTarget = { relatedTarget: this };
      if (!$parent.hasClass('open')) return;
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented()) return;
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);
    });
  }

  function getParent($this) {
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    var $parent = selector && $(selector);

    return $parent && $parent.length ? $parent : $this.parent();
  }

  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');

      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.dropdown;

  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;

  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };

  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle + ', [role="menu"], [role="listbox"]', Dropdown.prototype.keydown);
}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.2.0
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function Modal(element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$backdrop = this.isShown = null;
    this.scrollbarWidth = 0;

    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };

  Modal.VERSION = '3.2.0';

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };

  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

    this.$element.trigger(e);

    if (this.isShown || e.isDefaultPrevented()) return;

    this.isShown = true;

    this.checkScrollbar();
    this.$body.addClass('modal-open');

    this.setScrollbar();
    this.escape();

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body); // don't move modals dom position
      }

      that.$element.show().scrollTop(0);

      if (transition) {
        that.$element[0].offsetWidth; // force reflow
      }

      that.$element.addClass('in').attr('aria-hidden', false);

      that.enforceFocus();

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

      transition ? that.$element.find('.modal-dialog') // wait for modal to slide in
      .one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(300) : that.$element.trigger('focus').trigger(e);
    });
  };

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault();

    e = $.Event('hide.bs.modal');

    this.$element.trigger(e);

    if (!this.isShown || e.isDefaultPrevented()) return;

    this.isShown = false;

    this.$body.removeClass('modal-open');

    this.resetScrollbar();
    this.escape();

    $(document).off('focusin.bs.modal');

    this.$element.removeClass('in').attr('aria-hidden', true).off('click.dismiss.bs.modal');

    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
  };

  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal') // guard against infinite focus loop
    .on('focusin.bs.modal', $.proxy(function (e) {
      if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal');
    }
  };

  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$element.trigger('hidden.bs.modal');
    });
  };

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };

  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(this.$body);

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return;
        this.options.backdrop == 'static' ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
      }, this));

      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

      this.$backdrop.addClass('in');

      if (!callback) return;

      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(150) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');

      var callbackRemove = function callbackRemove() {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(150) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };

  Modal.prototype.checkScrollbar = function () {
    if (document.body.clientWidth >= window.innerWidth) return;
    this.scrollbarWidth = this.scrollbarWidth || this.measureScrollbar();
  };

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    if (this.scrollbarWidth) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', '');
  };

  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data) $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
    });
  }

  var old = $.fn.modal;

  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;

  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };

  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

    if ($this.is('a')) e.preventDefault();

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.2.0
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function Tooltip(element, options) {
    this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;

    this.init('tooltip', element, options);
  };

  Tooltip.VERSION = '3.2.0';

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport);

    var triggers = this.options.trigger.split(' ');

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';

        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }

    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
  };

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }

    return options;
  };

  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value;
    });

    return options;
  };

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    clearTimeout(self.timeout);

    self.hoverState = 'in';

    if (!self.options.delay || !self.options.delay.show) return self.show();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show();
    }, self.options.delay.show);
  };

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    clearTimeout(self.timeout);

    self.hoverState = 'out';

    if (!self.options.delay || !self.options.delay.hide) return self.hide();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide();
    }, self.options.delay.hide);
  };

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);

      var inDom = $.contains(document.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !inDom) return;
      var that = this;

      var $tip = this.tip();

      var tipId = this.getUID(this.type);

      this.setContent();
      $tip.attr('id', tipId);
      this.$element.attr('aria-describedby', tipId);

      if (this.options.animation) $tip.addClass('fade');

      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);

      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (autoPlace) {
        var orgPlacement = placement;
        var $parent = this.$element.parent();
        var parentDim = this.getPosition($parent);

        placement = placement == 'bottom' && pos.top + pos.height + actualHeight - parentDim.scroll > parentDim.height ? 'top' : placement == 'top' && pos.top - parentDim.scroll - actualHeight < 0 ? 'bottom' : placement == 'right' && pos.right + actualWidth > parentDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < parentDim.left ? 'right' : placement;

        $tip.removeClass(orgPlacement).addClass(placement);
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

      this.applyPlacement(calculatedOffset, placement);

      var complete = function complete() {
        that.$element.trigger('shown.bs.' + that.type);
        that.hoverState = null;
      };

      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(150) : complete();
    }
  };

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop)) marginTop = 0;
    if (isNaN(marginLeft)) marginLeft = 0;

    offset.top = offset.top + marginTop;
    offset.left = offset.left + marginLeft;

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function using(props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);

    $tip.addClass('in');

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

    if (delta.left) offset.left += delta.left;else offset.top += delta.top;

    var arrowDelta = delta.left ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
    var arrowPosition = delta.left ? 'left' : 'top';
    var arrowOffsetPosition = delta.left ? 'offsetWidth' : 'offsetHeight';

    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], arrowPosition);
  };

  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + '%' : '');
  };

  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };

  Tooltip.prototype.hide = function () {
    var that = this;
    var $tip = this.tip();
    var e = $.Event('hide.bs.' + this.type);

    this.$element.removeAttr('aria-describedby');

    function complete() {
      if (that.hoverState != 'in') $tip.detach();
      that.$element.trigger('hidden.bs.' + that.type);
    }

    this.$element.trigger(e);

    if (e.isDefaultPrevented()) return;

    $tip.removeClass('in');

    $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(150) : complete();

    this.hoverState = null;

    return this;
  };

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };

  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };

  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;
    var el = $element[0];
    var isBody = el.tagName == 'BODY';
    return $.extend({}, typeof el.getBoundingClientRect == 'function' ? el.getBoundingClientRect() : null, {
      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop(),
      width: isBody ? $(window).width() : $element.outerWidth(),
      height: isBody ? $(window).height() : $element.outerHeight()
    }, isBody ? { top: 0, left: 0 } : $element.offset());
  };

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
    /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
  };

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 };
    if (!this.$viewport) return delta;

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
    var viewportDimensions = this.getPosition(this.$viewport);

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
        // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.width) {
        // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }

    return delta;
  };

  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;

    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

    return title;
  };

  Tooltip.prototype.getUID = function (prefix) {
    do {
      prefix += ~~(Math.random() * 1000000);
    } while (document.getElementById(prefix));
    return prefix;
  };

  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template);
  };

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide();
      this.$element = null;
      this.options = null;
    }
  };

  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };

  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };

  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data('bs.' + this.type, self);
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
  };

  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout);
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type);
  };

  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && option == 'destroy') return;
      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tooltip;

  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;

  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.2.0
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function Popover(element, options) {
    this.init('popover', element, options);
  };

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');

  Popover.VERSION = '3.2.0';

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });

  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

  Popover.prototype.constructor = Popover;

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };

  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content').empty()[// we use append for html objects to maintain js events
    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

    $tip.removeClass('fade top bottom left right in');

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
  };

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };

  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;

    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template);
    return this.$tip;
  };

  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && option == 'destroy') return;
      if (!data) $this.data('bs.popover', data = new Popover(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.popover;

  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;

  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.2.0
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this);

    this.$body = $('body');
    this.$scrollElement = $(element).is('body') ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || '') + ' .nav li > a';
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;

    this.$scrollElement.on('scroll.bs.scrollspy', process);
    this.refresh();
    this.process();
  }

  ScrollSpy.VERSION = '3.2.0';

  ScrollSpy.DEFAULTS = {
    offset: 10
  };

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = 'offset';
    var offsetBase = 0;

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position';
      offsetBase = this.$scrollElement.scrollTop();
    }

    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();

    var self = this;

    this.$body.find(this.selector).map(function () {
      var $el = $(this);
      var href = $el.data('target') || $el.attr('href');
      var $href = /^#./.test(href) && $(href);

      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      self.offsets.push(this[0]);
      self.targets.push(this[1]);
    });
  };

  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;

    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }

    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i);
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
    }
  };

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;

    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');

    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

    var active = $(selector).parents('li').addClass('active');

    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }

    active.trigger('activate.bs.scrollspy');
  };

  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.scrollspy;

  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;

  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };

  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.2.0
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function Tab(element) {
    this.element = $(element);
  };

  Tab.VERSION = '3.2.0';

  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return;

    var previous = $ul.find('.active:last a')[0];
    var e = $.Event('show.bs.tab', {
      relatedTarget: previous
    });

    $this.trigger(e);

    if (e.isDefaultPrevented()) return;

    var $target = $(selector);

    this.activate($this.closest('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      });
    });
  };

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && $active.hasClass('fade');

    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active');

      element.addClass('active');

      if (transition) {
        element[0].offsetWidth; // reflow for transition
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active');
      }

      callback && callback();
    }

    transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(150) : next();

    $active.removeClass('in');
  };

  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');

      if (!data) $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tab;

  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;

  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };

  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault();
    Plugin.call($(this), 'show');
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.2.0
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function Affix(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);

    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

    this.$element = $(element);
    this.affixed = this.unpin = this.pinnedOffset = null;

    this.checkPosition();
  };

  Affix.VERSION = '3.2.0';

  Affix.RESET = 'affix affix-top affix-bottom';

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return;

    var scrollHeight = $(document).height();
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;

    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

    var affix = this.unpin != null && scrollTop + this.unpin <= position.top ? false : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom ? 'bottom' : offsetTop != null && scrollTop <= offsetTop ? 'top' : false;

    if (this.affixed === affix) return;
    if (this.unpin != null) this.$element.css('top', '');

    var affixType = 'affix' + (affix ? '-' + affix : '');
    var e = $.Event(affixType + '.bs.affix');

    this.$element.trigger(e);

    if (e.isDefaultPrevented()) return;

    this.affixed = affix;
    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

    this.$element.removeClass(Affix.RESET).addClass(affixType).trigger($.Event(affixType.replace('affix', 'affixed')));

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - this.$element.height() - offsetBottom
      });
    }
  };

  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.affix;

  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;

  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };

  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();

      data.offset = data.offset || {};

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom;
      if (data.offsetTop) data.offset.top = data.offsetTop;

      Plugin.call($spy, data);
    });
  });
}(jQuery);
// ReSharper restore StatementIsNotTerminated
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function (window, document, exportName, undefined) {
    'use strict';

    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
    var TEST_ELEMENT = document.createElement('div');

    var TYPE_FUNCTION = 'function';

    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;

    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */
    function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }

    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */
    function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }

    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */
    function each(obj, iterator, context) {
        var i;

        if (!obj) {
            return;
        }

        if (obj.forEach) {
            obj.forEach(iterator, context);
        } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else {
            for (i in obj) {
                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
        }
    }

    /**
     * wrap a method with a deprecation warning and stack trace
     * @param {Function} method
     * @param {String} name
     * @param {String} message
     * @returns {Function} A new function wrapping the supplied method.
     */
    function deprecate(method, name, message) {
        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
        return function () {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

            var log = window.console && (window.console.warn || window.console.log);
            if (log) {
                log.call(window.console, deprecationMessage, stack);
            }
            return method.apply(this, arguments);
        };
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} target
     * @param {...Object} objects_to_assign
     * @returns {Object} target
     */
    var assign;
    if (typeof Object.assign !== 'function') {
        assign = function assign(target) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var source = arguments[index];
                if (source !== undefined && source !== null) {
                    for (var nextKey in source) {
                        if (source.hasOwnProperty(nextKey)) {
                            output[nextKey] = source[nextKey];
                        }
                    }
                }
            }
            return output;
        };
    } else {
        assign = Object.assign;
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge=false]
     * @returns {Object} dest
     */
    var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while (i < keys.length) {
            if (!merge || merge && dest[keys[i]] === undefined) {
                dest[keys[i]] = src[keys[i]];
            }
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');

    /**
     * merge the values from src in the dest.
     * means that properties that exist in dest will not be overwritten by src
     * @param {Object} dest
     * @param {Object} src
     * @returns {Object} dest
     */
    var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');

    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */
    function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;

        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;

        if (properties) {
            assign(childP, properties);
        }
    }

    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */
    function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }

    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */
    function boolOrFn(val, args) {
        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
        }
        return val;
    }

    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */
    function ifUndefined(val1, val2) {
        return val1 === undefined ? val2 : val1;
    }

    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function addEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.addEventListener(type, handler, false);
        });
    }

    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function removeEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.removeEventListener(type, handler, false);
        });
    }

    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
    function hasParent(node, parent) {
        while (node) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }

    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */
    function inStr(str, find) {
        return str.indexOf(find) > -1;
    }

    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */
    function splitStr(str) {
        return str.trim().split(/\s+/g);
    }

    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }

    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */
    function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }

    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */
    function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;

        while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
                results.push(src[i]);
            }
            values[i] = val;
            i++;
        }

        if (sort) {
            if (!key) {
                results = results.sort();
            } else {
                results = results.sort(function sortUniqueArray(a, b) {
                    return a[key] > b[key];
                });
            }
        }

        return results;
    }

    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */
    function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);

        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;

            if (prop in obj) {
                return prop;
            }
            i++;
        }
        return undefined;
    }

    /**
     * get a unique id
     * @returns {number} uniqueId
     */
    var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }

    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */
    function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }

    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

    var SUPPORT_TOUCH = 'ontouchstart' in window;
    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';

    var COMPUTE_INTERVAL = 25;

    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;

    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;

    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

    var PROPS_XY = ['x', 'y'];
    var PROPS_CLIENT_XY = ['clientX', 'clientY'];

    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */
    function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;

        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function (ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
                self.handler(ev);
            }
        };

        this.init();
    }

    Input.prototype = {
        /**
         * should handle the inputEvent data and trigger the callback
         * @virtual
         */
        handler: function handler() {},

        /**
         * bind the events
         */
        init: function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },

        /**
         * unbind the events
         */
        destroy: function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };

    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */
    function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;

        if (inputClass) {
            Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
        } else {
            Type = TouchMouseInput;
        }
        return new Type(manager, inputHandler);
    }

    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */
    function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;

        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;

        if (isFirst) {
            manager.session = {};
        }

        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;

        // compute scale, rotation etc
        computeInputData(manager, input);

        // emit secret event
        manager.emit('hammer.input', input);

        manager.recognize(input);
        manager.session.prevInput = input;
    }

    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */
    function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;

        // store the first input to calculate the distance and direction
        if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
        }

        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
            session.firstMultiple = false;
        }

        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;

        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);

        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);

        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;

        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;

        computeIntervalInputData(session, input);

        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
        }
        input.target = target;
    }

    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};

        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };

            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }

        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }

    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */
    function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity,
            velocityX,
            velocityY,
            direction;

        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;

            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);

            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }

        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }

    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */
    function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }

        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }

    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */
    function getCenter(pointers) {
        var pointersLength = pointers.length;

        // no need to loop when only one touch
        if (pointersLength === 1) {
            return {
                x: round(pointers[0].clientX),
                y: round(pointers[0].clientY)
            };
        }

        var x = 0,
            y = 0,
            i = 0;
        while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }

        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }

    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */
    function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }

    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */
    function getDirection(x, y) {
        if (x === y) {
            return DIRECTION_NONE;
        }

        if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }

    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */
    function getDistance(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];

        return Math.sqrt(x * x + y * y);
    }

    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */
    function getAngle(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }

    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */
    function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }

    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */
    function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };

    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */
    function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;

        this.pressed = false; // mousedown state

        Input.apply(this, arguments);
    }

    inherit(MouseInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];

            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) {
                this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which !== 1) {
                eventType = INPUT_END;
            }

            // mouse must be down
            if (!this.pressed) {
                return;
            }

            if (eventType & INPUT_END) {
                this.pressed = false;
            }

            this.callback(this.manager, eventType, {
                pointers: [ev],
                changedPointers: [ev],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });

    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };

    // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };

    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

    // IE10 has prefixed support, and case-sensitive
    if (window.MSPointerEvent && !window.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }

    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */
    function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;

        Input.apply(this, arguments);

        this.store = this.manager.session.pointerEvents = [];
    }

    inherit(PointerEventInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;

            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

            var isTouch = pointerType == INPUT_TYPE_TOUCH;

            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                removePointer = true;
            }

            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) {
                return;
            }

            // update the event in the store
            store[storeIndex] = ev;

            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [ev],
                pointerType: pointerType,
                srcEvent: ev
            });

            if (removePointer) {
                // remove from the store
                store.splice(storeIndex, 1);
            }
        }
    });

    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Touch events input
     * @constructor
     * @extends Input
     */
    function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;

        Input.apply(this, arguments);
    }

    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

            // should we handle the touch events?
            if (type === INPUT_START) {
                this.started = true;
            }

            if (!this.started) {
                return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type);

            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                this.started = false;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);

        if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
        }

        return [all, changed];
    }

    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */
    function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};

        Input.apply(this, arguments);
    }

    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
                return;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;

        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
        }

        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target;

        // get target touches from touches
        targetTouches = allTouches.filter(function (touch) {
            return hasParent(touch.target, target);
        });

        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }

        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
                changedTargetTouches.push(changedTouches[i]);
            }

            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
                delete targetIds[changedTouches[i].identifier];
            }
            i++;
        }

        if (!changedTargetTouches.length) {
            return;
        }

        return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
    }

    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */

    var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;

    function TouchMouseInput() {
        Input.apply(this, arguments);

        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);

        this.primaryTouch = null;
        this.lastTouches = [];
    }

    inherit(TouchMouseInput, Input, {
        /**
         * handle mouse and touch events
         * @param {Hammer} manager
         * @param {String} inputEvent
         * @param {Object} inputData
         */
        handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
                isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
                return;
            }

            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
            if (isTouch) {
                recordTouches.call(this, inputEvent, inputData);
            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
                return;
            }

            this.callback(manager, inputEvent, inputData);
        },

        /**
         * remove the event listeners
         */
        destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });

    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            setLastTouch.call(this, eventData);
        }
    }

    function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];

        if (touch.identifier === this.primaryTouch) {
            var lastTouch = { x: touch.clientX, y: touch.clientY };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function removeLastTouch() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) {
                    lts.splice(i, 1);
                }
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }

    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX,
            y = eventData.srcEvent.clientY;
        for (var i = 0; i < this.lastTouches.length; i++) {
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x),
                dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
                return true;
            }
        }
        return false;
    }

    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

    // magical touchAction value
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    var TOUCH_ACTION_MAP = getTouchActionProps();

    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */
    function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }

    TouchAction.prototype = {
        /**
         * set the touchAction value on the element or enable the polyfill
         * @param {String} value
         */
        set: function set(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
                value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
        },

        /**
         * just re-set the touchAction value
         */
        update: function update() {
            this.set(this.manager.options.touchAction);
        },

        /**
         * compute the value for the touchAction property based on the recognizer's settings
         * @returns {String} value
         */
        compute: function compute() {
            var actions = [];
            each(this.manager.recognizers, function (recognizer) {
                if (boolOrFn(recognizer.options.enable, [recognizer])) {
                    actions = actions.concat(recognizer.getTouchAction());
                }
            });
            return cleanTouchActions(actions.join(' '));
        },

        /**
         * this method is called on each input cycle and provides the preventing of the browser behavior
         * @param {Object} input
         */
        preventDefaults: function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;

            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

            if (hasNone) {
                //do not prevent defaults if this is a tap gesture

                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;

                if (isTapPointer && isTapMovement && isTapTouchTime) {
                    return;
                }
            }

            if (hasPanX && hasPanY) {
                // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
                return;
            }

            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
                return this.preventSrc(srcEvent);
            }
        },

        /**
         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
         * @param {Object} srcEvent
         */
        preventSrc: function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };

    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */
    function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
        }

        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
        }

        // pan-x OR pan-y
        if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }

        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
        }

        return TOUCH_ACTION_AUTO;
    }

    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) {
            return false;
        }
        var touchMap = {};
        var cssSupports = window.CSS && window.CSS.supports;
        ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {

            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
    }

    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;

    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */
    function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});

        this.id = uniqueId();

        this.manager = null;

        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);

        this.state = STATE_POSSIBLE;

        this.simultaneous = {};
        this.requireFail = [];
    }

    Recognizer.prototype = {
        /**
         * @virtual
         * @type {Object}
         */
        defaults: {},

        /**
         * set options
         * @param {Object} options
         * @return {Recognizer}
         */
        set: function set(options) {
            assign(this.options, options);

            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },

        /**
         * recognize simultaneous with an other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        recognizeWith: function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },

        /**
         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },

        /**
         * recognizer can only run when an other is failing
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        requireFailure: function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },

        /**
         * drop the requireFailure link. it does not remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRequireFailure: function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) {
                this.requireFail.splice(index, 1);
            }
            return this;
        },

        /**
         * has require failures boolean
         * @returns {boolean}
         */
        hasRequireFailures: function hasRequireFailures() {
            return this.requireFail.length > 0;
        },

        /**
         * if the recognizer can recognize simultaneous with an other recognizer
         * @param {Recognizer} otherRecognizer
         * @returns {Boolean}
         */
        canRecognizeWith: function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },

        /**
         * You should use `tryEmit` instead of `emit` directly to check
         * that all the needed recognizers has failed before emitting.
         * @param {Object} input
         */
        emit: function emit(input) {
            var self = this;
            var state = this.state;

            function emit(event) {
                self.manager.emit(event, input);
            }

            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }

            emit(self.options.event); // simple 'eventName' events

            if (input.additionalEvent) {
                // additional event(panleft, panright, pinchin, pinchout...)
                emit(input.additionalEvent);
            }

            // panend and pancancel
            if (state >= STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }
        },

        /**
         * Check that all the require failure recognizers has failed,
         * if true, it emits a gesture event,
         * otherwise, setup the state to FAILED.
         * @param {Object} input
         */
        tryEmit: function tryEmit(input) {
            if (this.canEmit()) {
                return this.emit(input);
            }
            // it's failing anyway
            this.state = STATE_FAILED;
        },

        /**
         * can we emit?
         * @returns {boolean}
         */
        canEmit: function canEmit() {
            var i = 0;
            while (i < this.requireFail.length) {
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                    return false;
                }
                i++;
            }
            return true;
        },

        /**
         * update the recognizer
         * @param {Object} inputData
         */
        recognize: function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);

            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }

            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone);

            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                this.tryEmit(inputDataClone);
            }
        },

        /**
         * return the state of the recognizer
         * the actual recognizing happens in this method
         * @virtual
         * @param {Object} inputData
         * @returns {Const} STATE
         */
        process: function process(inputData) {}, // jshint ignore:line

        /**
         * return the preferred touch-action
         * @virtual
         * @returns {Array}
         */
        getTouchAction: function getTouchAction() {},

        /**
         * called when the gesture isn't allowed to recognize
         * like when another is being recognized or it is disabled
         * @virtual
         */
        reset: function reset() {}
    };

    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */
    function stateStr(state) {
        if (state & STATE_CANCELLED) {
            return 'cancel';
        } else if (state & STATE_ENDED) {
            return 'end';
        } else if (state & STATE_CHANGED) {
            return 'move';
        } else if (state & STATE_BEGAN) {
            return 'start';
        }
        return '';
    }

    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */
    function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
            return 'down';
        } else if (direction == DIRECTION_UP) {
            return 'up';
        } else if (direction == DIRECTION_LEFT) {
            return 'left';
        } else if (direction == DIRECTION_RIGHT) {
            return 'right';
        }
        return '';
    }

    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */
    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
            return manager.get(otherRecognizer);
        }
        return otherRecognizer;
    }

    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */
    function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }

    inherit(AttrRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof AttrRecognizer
         */
        defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
        },

        /**
         * Used to check if it the recognizer receives valid input, like input.distance > 10.
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {Boolean} recognized
         */
        attrTest: function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },

        /**
         * Process the input and return the state for the recognizer
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {*} State
         */
        process: function process(input) {
            var state = this.state;
            var eventType = input.eventType;

            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);

            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
                if (eventType & INPUT_END) {
                    return state | STATE_ENDED;
                } else if (!(state & STATE_BEGAN)) {
                    return STATE_BEGAN;
                }
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });

    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);

        this.pX = null;
        this.pY = null;
    }

    inherit(PanRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PanRecognizer
         */
        defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },

        getTouchAction: function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) {
                actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
                actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
        },

        directionTest: function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;

            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },

        attrTest: function attrTest(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        },

        emit: function emit(input) {

            this.pX = input.deltaX;
            this.pY = input.deltaY;

            var direction = directionStr(input.direction);

            if (direction) {
                input.additionalEvent = this.options.event + direction;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */
    function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(PinchRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function attrTest(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },

        emit: function emit(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */
    function PressRecognizer() {
        Recognizer.apply(this, arguments);

        this._timer = null;
        this._input = null;
    }

    inherit(PressRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PressRecognizer
         */
        defaults: {
            event: 'press',
            pointers: 1,
            time: 251, // minimal time of the pointer to be pressed
            threshold: 9 // a minimal movement is ok, but keep it low
        },

        getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_AUTO];
        },

        process: function process(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;

            this._input = input;

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
                this.reset();
            } else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function () {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) {
                return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
        },

        reset: function reset() {
            clearTimeout(this._timer);
        },

        emit: function emit(input) {
            if (this.state !== STATE_RECOGNIZED) {
                return;
            }

            if (input && input.eventType & INPUT_END) {
                this.manager.emit(this.options.event + 'up', input);
            } else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */
    function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(RotateRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof RotateRecognizer
         */
        defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function attrTest(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });

    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof SwipeRecognizer
         */
        defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },

        getTouchAction: function getTouchAction() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },

        attrTest: function attrTest(input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
                velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
                velocity = input.overallVelocityY;
            }

            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },

        emit: function emit(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) {
                this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
        }
    });

    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */
    function TapRecognizer() {
        Recognizer.apply(this, arguments);

        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;

        this._timer = null;
        this._input = null;
        this.count = 0;
    }

    inherit(TapRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300, // max time between the multi-tap taps
            time: 250, // max time of the pointer to be down (like finger on the screen)
            threshold: 9, // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },

        getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_MANIPULATION];
        },

        process: function process(input) {
            var options = this.options;

            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;

            this.reset();

            if (input.eventType & INPUT_START && this.count === 0) {
                return this.failTimeout();
            }

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) {
                    return this.failTimeout();
                }

                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

                this.pTime = input.timeStamp;
                this.pCenter = input.center;

                if (!validMultiTap || !validInterval) {
                    this.count = 1;
                } else {
                    this.count += 1;
                }

                this._input = input;

                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) {
                        return STATE_RECOGNIZED;
                    } else {
                        this._timer = setTimeoutContext(function () {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },

        failTimeout: function failTimeout() {
            this._timer = setTimeoutContext(function () {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },

        reset: function reset() {
            clearTimeout(this._timer);
        },

        emit: function emit() {
            if (this.state == STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Simple way to create a manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }

    /**
     * @const {string}
     */
    Hammer.VERSION = '2.0.7';

    /**
     * default settings
     * @namespace
     */
    Hammer.defaults = {
        /**
         * set if DOM events are being triggered.
         * But this is slower and unused by simple implementations, so disabled by default.
         * @type {Boolean}
         * @default false
         */
        domEvents: false,

        /**
         * The value for the touchAction property/fallback.
         * When set to `compute` it will magically set the correct value based on the added recognizers.
         * @type {String}
         * @default compute
         */
        touchAction: TOUCH_ACTION_COMPUTE,

        /**
         * @type {Boolean}
         * @default true
         */
        enable: true,

        /**
         * EXPERIMENTAL FEATURE -- can be removed/changed
         * Change the parent input target element.
         * If Null, then it is being set the to main element.
         * @type {Null|EventTarget}
         * @default null
         */
        inputTarget: null,

        /**
         * force an input class
         * @type {Null|Function}
         * @default null
         */
        inputClass: null,

        /**
         * Default recognizer setup when calling `Hammer()`
         * When creating a new Manager these will be skipped.
         * @type {Array}
         */
        preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],

        /**
         * Some CSS properties can be used to improve the working of Hammer.
         * Add them to this method and they will be set when creating a new Manager.
         * @namespace
         */
        cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };

    var STOP = 1;
    var FORCED_STOP = 2;

    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});

        this.options.inputTarget = this.options.inputTarget || element;

        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};

        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);

        toggleCssProps(this, true);

        each(this.options.recognizers, function (item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }

    Manager.prototype = {
        /**
         * set options
         * @param {Object} options
         * @returns {Manager}
         */
        set: function set(options) {
            assign(this.options, options);

            // Options that need a little more setup
            if (options.touchAction) {
                this.touchAction.update();
            }
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },

        /**
         * stop recognizing for this session.
         * This session will be discarded, when a new [input]start event is fired.
         * When forced, the recognizer cycle is stopped immediately.
         * @param {Boolean} [force]
         */
        stop: function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },

        /**
         * run the recognizers!
         * called by the inputHandler function on every movement of the pointers (touches)
         * it walks through all the recognizers and tries to detect the gesture that is being made
         * @param {Object} inputData
         */
        recognize: function recognize(inputData) {
            var session = this.session;
            if (session.stopped) {
                return;
            }

            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);

            var recognizer;
            var recognizers = this.recognizers;

            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;

            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                curRecognizer = session.curRecognizer = null;
            }

            var i = 0;
            while (i < recognizers.length) {
                recognizer = recognizers[i];

                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && ( // 1
                !curRecognizer || recognizer == curRecognizer || // 2
                recognizer.canRecognizeWith(curRecognizer))) {
                    // 3
                    recognizer.recognize(inputData);
                } else {
                    recognizer.reset();
                }

                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    curRecognizer = session.curRecognizer = recognizer;
                }
                i++;
            }
        },

        /**
         * get a recognizer by its event name.
         * @param {Recognizer|String} recognizer
         * @returns {Recognizer|Null}
         */
        get: function get(recognizer) {
            if (recognizer instanceof Recognizer) {
                return recognizer;
            }

            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
                if (recognizers[i].options.event == recognizer) {
                    return recognizers[i];
                }
            }
            return null;
        },

        /**
         * add a recognizer to the manager
         * existing recognizers with the same event name will be removed
         * @param {Recognizer} recognizer
         * @returns {Recognizer|Manager}
         */
        add: function add(recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
                return this;
            }

            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) {
                this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;

            this.touchAction.update();
            return recognizer;
        },

        /**
         * remove a recognizer by name or instance
         * @param {Recognizer|String} recognizer
         * @returns {Manager}
         */
        remove: function remove(recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
                return this;
            }

            recognizer = this.get(recognizer);

            // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, recognizer);

                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }

            return this;
        },

        /**
         * bind event
         * @param {String} events
         * @param {Function} handler
         * @returns {EventEmitter} this
         */
        on: function on(events, handler) {
            if (events === undefined) {
                return;
            }
            if (handler === undefined) {
                return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },

        /**
         * unbind event, leave emit blank to remove all handlers
         * @param {String} events
         * @param {Function} [handler]
         * @returns {EventEmitter} this
         */
        off: function off(events, handler) {
            if (events === undefined) {
                return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
                if (!handler) {
                    delete handlers[event];
                } else {
                    handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
                }
            });
            return this;
        },

        /**
         * emit event to the listeners
         * @param {String} event
         * @param {Object} data
         */
        emit: function emit(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
                triggerDomEvent(event, data);
            }

            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
                return;
            }

            data.type = event;
            data.preventDefault = function () {
                data.srcEvent.preventDefault();
            };

            var i = 0;
            while (i < handlers.length) {
                handlers[i](data);
                i++;
            }
        },

        /**
         * destroy the manager and unbinds all events
         * it doesn't unbind dom events, that is the user own responsibility
         */
        destroy: function destroy() {
            this.element && toggleCssProps(this, false);

            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };

    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */
    function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) {
            return;
        }
        var prop;
        each(manager.options.cssProps, function (value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else {
                element.style[prop] = manager.oldCssProps[prop] || '';
            }
        });
        if (!add) {
            manager.oldCssProps = {};
        }
    }

    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */
    function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }

    assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,

        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,

        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,

        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,

        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,

        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,

        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });

    // this prevents errors when Hammer is loaded in the presence of an AMD
    //  style loader but by script tag, not by the loader.
    var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line
    freeGlobal.Hammer = Hammer;

    if (typeof define === 'function' && define.amd) {
        define(function () {
            return Hammer;
        });
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = Hammer;
    } else {
        window[exportName] = Hammer;
    }
})(window, document, 'Hammer');
/*
  Contiene todas las extensiones de los objetos primitivos de Javascript.
*/

(function () {

  String.prototype.format = function () {
    var s = this;
    for (var i = 0; i < arguments.length; i++) {
      var reg = new RegExp("\\{" + i + "\\}", "gm");
      s = s.replace(reg, arguments[i]);
    }
    return s;
  };

  String.prototype.fastformat = function (obj) {
    return this.replace(/{{([^}]*)}}/g, function () {
      return arguments[1] === '$this' ? this : this[arguments[1]];
    }.bind(obj));
  };

  String.prototype.trim = String.prototype.trim || function () {
    return this.replace(/^\s+|\s+$/g, '');
  };

  String.prototype.format.regex = new RegExp("{-?[0-9]+}", "g");

  Number.prototype.getCents = function () {
    return ((this.toString().split('.')[1] || '0') + '0').substring(0, 2);
  };

  Number.prototype.percentaje = function (per) {
    return Math.round(this * per / 100);
  };

  String.prototype.toPhone = function () {
    var newValue = '';
    for (var i = 0; i < this.length; i++) {
      if (i % 3 === 0 && i !== 0) {
        newValue += '.';
      }
      newValue += this[i];
    }
    return newValue;
  };

  Array.prototype.remove = Array.prototype.remove || function (from, to) {
    var rest = this.slice((to || from) + 1 || this.length);
    this.length = from < 0 ? this.length + from : from;
    return this.push.apply(this, rest);
  };

  function decimalAdjust(type, value, exp) {
    // Si el exp es indefinido o cero...
    if (typeof exp === 'undefined' || +exp === 0) {
      return Math[type](value);
    }
    value = +value;
    exp = +exp;
    // Si el valor no es un número o el exp no es un entero...
    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
      return NaN;
    }
    // Cambio
    value = value.toString().split('e');
    value = Math[type](+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp)));
    // Volver a cambiar
    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));
  }

  Math.round10 = Math.round10 || function (value, exp) {
    return decimalAdjust('round', value, exp);
  };

  Math.floor10 = Math.floor10 || function (value, exp) {
    return decimalAdjust('floor', value, exp);
  };

  Math.ceil10 = Math.ceil10 || function (value, exp) {
    return decimalAdjust('ceil', value, exp);
  };

  Math.trunc = Math.trunc || function (x) {
    return x - x % 1;
  };

  Math.sumPrices = Math.sumPrices || function (a, b) {
    var centsAStr = (+a).getCents(),
        centsBStr = (+b).getCents(),
        centsA = a >= 0 ? +centsAStr : -centsAStr,
        centsB = b >= 0 ? +centsBStr : -centsBStr,
        intA = Math.trunc(a),
        intB = Math.trunc(b),
        int = intA + intB,
        cents = centsA + centsB;

    if (isNaN(a) || isNaN(b)) return NaN;

    if (intA >= 0 && intB >= 0 || intA < 0 && intB < 0) {
      if (cents >= 100) {
        cents -= 100;
        int++;
      } else if (cents <= -100) {
        cents += 100;
        int--;
      }
    } else {
      if (cents < 0) {
        cents = -cents - 100;
        if (int !== 0) int--;
      }
    }

    cents = ('0' + Math.abs(cents)).match(/\d\d$/)[0];
    if (a + b < 0 && int === 0) {
      return +('-0.' + cents);
    }
    return +(int + '.' + cents);
  };
})();
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @namespace game
 */
var game = game || {};

/**
 * Sección de utilidades y funciones comunes
 *
 * @namespace
 */
game.utils = {
  customRequest: function customRequest(frame_period, callback) {

    var start = null;

    function step(timestamp) {
      if (!start) start = timestamp;
      var progress = timestamp - start;
      if (progress < frame_period) window.requestAnimationFrame(step);else if (callback && typeof callback === 'function') callback();
    }

    window.requestAnimationFrame(step);
  },
  getBasePath: function getBasePath() {
    var pathArray = window.location.href.split('/');
    return '//' + pathArray[2];
  },
  formatUrlSearch: function formatUrlSearch(search) {
    try {
      var query = search.replace(/([\+\-\s\(\)\{\}\[\]\&\.\_\!\?\"\'`´%#])+/g, '-');
      query = query.replace(/\-$/g, ''); //Último caracter un guión se elimina
      query = query.replace(/^\-/g, ''); //Primer caracter un guión se elimina
      return query.toLowerCase();
    } catch (e) {
      return search;
    }
  },
  getQueryParams: function getQueryParams(search) {
    var search = search || window.location.search;
    search = search.startsWith('?') ? search.substring(1) : search;
    return search ? JSON.parse('{' + search.match(/[^&]+/g).map(function (m) {
      var r = m.match(/[^=]+/g);if (r.length === 1) r.push('');return r.map(function (m) {
        return '"' + m + '"';
      }).join(':');
    }).join(',') + '}', function (key, value) {
      return key === "" ? value : decodeURIComponent(value);
    }) : {};
  },
  hasQueryVariable: function hasQueryVariable(varName) {
    return window.location.search.substring(1).split("&").find(function (item) {
      return item.split("=")[0] === varName;
    });
  },
  parseOptions: function parseOptions(options, args) {
    try {
      return !options ? {} : options.startsWith('{') ? JSON.parse(options) : options.split(';').reduce(function (options, option) {
        var _option$split = option.split(/:(.+)/),
            _option$split2 = _slicedToArray(_option$split, 2),
            key = _option$split2[0],
            value = _option$split2[1];

        if (key && value) {
          value = value.trim();
          options[key.trim()] = value === 'true' || value === 'false' || value.includes('[') ? JSON.parse(value) : value.trim();
        }
        return options;
      }, {});
    } catch (e) {
      return {};
    }
  },
  rateLimit: function rateLimit(id, timeout, callback, scope) {
    var self = this;
    if (self.rateLimitTimers[id]) {
      window.clearTimeout(self.rateLimitTimers[id]);
      self.rateLimitTimers[id] = null;
    }
    if (typeof callback === "function") {
      self.rateLimitTimers[id] = window.setTimeout(function () {
        callback.apply(scope);
        self.rateLimitTimers[id] = null;
      }, timeout);
    }
  },
  rateLimitTimers: [],
  triggerEvent: function triggerEvent(eventName, detail, node) {
    var event = new CustomEvent(eventName, { detail: detail || false });
    if (node) node.dispatchEvent(event);else document.dispatchEvent(event);
  },
  unFormatUrlSearch: function unFormatUrlSearch(search) {
    var query = search.split('-').join(' ');
    return query.toLowerCase();
  },
  validateEmail: function validateEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  },
  validateDate: function validateDate(dateStr) {
    var pattern = /^(((0?[1-9]|[12]\d|3[01])\/(0?[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0?[1-9]|[12]\d|30)\/(0?[469]|11)\/((19|[2-9]\d)\d{2}))|((0?[1-9]|1\d|2[0-8])\/0?2\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/;
    return pattern.test(dateStr);
  },
  validatePhone: function validatePhone(phone) {
    var test = /^([6-9]\d{8})$/;
    return test.test(phone);
  },
  validateMobilePhone: function validateMobilePhone(phone) {
    var test = /^[6-7]\d{8}$/;
    return test.test(phone);
  },
  validateDni: function validateDni(dni) {
    // Comprobamos si tiene longitud 9
    if (dni.length !== 9) return false;

    // Extraemos los 8 primeros caracteres
    var table = "TRWAGMYFPDXBNJZSQVHLCKE",
        letterCalculated = table[dni.substring(0, 8) % 23];

    // Si la letra es correcta damos por válido el DNI
    return letterCalculated === dni[8].toUpperCase();
  },
  validateNie: function validateNie(nie) {
    nie = nie.toUpperCase();

    // Basic format test
    if (!nie.match('((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)')) {
      return false;
    }

    // Test NIE
    //T
    if (/^[T]{1}/.test(nie)) {
      return nie[8] === /^[T]{1}[A-Z0-9]{8}$/.test(nie);
    }

    //XYZ
    if (/^[XYZ]{1}/.test(nie)) {
      return nie[8] === "TRWAGMYFPDXBNJZSQVHLCKE"[nie.replace('X', '0').replace('Y', '1').replace('Z', '2').substring(0, 8) % 23];
    }

    return false;
  },
  validateNif: function validateNif(nif) {
    nif = nif.toUpperCase();

    // Basic format test

    if (!nif.match('((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)')) {
      return false;
    }

    // Test NIF
    if (/^[0-9]{8}[A-Z]{1}$/.test(nif)) {
      return "TRWAGMYFPDXBNJZSQVHLCKE"[nif.substring(8, 0) % 23] === nif[8];
    }
    // Test specials NIF (starts with K, L or M)
    if (/^[KLM]{1}/.test(nif)) {
      return nif[8] === '@';
    }

    return false;
  }
};
/**
 * @namespace game
 */
var game = game || {};

/**
 * Configuracion de propiedades
 *
 * @namespace
 */
game.properties = {
  /**
  * Valores por defecto
  *
  * @readonly
  * @type {Object}
  */
  VALUES: {
    "viewResultsGrid": 1, //tipo de vista Grid o Listado ////////////////////
    "AcceptCookiesPolicy": "AcceptCookiesPolicy" //Cookie de aceptación de política de cookies
  },
  /**
  * Obtiene el valor de la propiedad por nombre
  *
  * @param {string} key Nombre de la propiedad
  * @returns {string|number|boolean} valor de la propiedad
  */
  getProperty: function getProperty(key) {
    return this.VALUES[key];
  }
};
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Elementos que permiten añadir o quitar clases a otro nodo objetivo.
    Además, lanza los eventos `@togglers-added` y `@togglers-removed` que puede capturarse para otro tipo de finalidades.

 * Explicación:
    - Por defecto, se capturan todos los elementos con el atributo `data-toggler`, almacenados en components.
    - En caso de querer crearse otro tipo de objetos, además de los de por defecto, el parámetro dataKey debe ser diferente.
    - Si aparecen nuevos elementos en el DOM, debe llamarse a pyc.togglers.components.update();
    - Los parámetros por defecto se pueden modificar desde el propio atributo. Ejemplo: `data-toggler="class: active"`.

 * Opciones:
    - target: querySelectorAll de los elementos a los que se van a añadir la clase. También puede especificarse por `href` o por `data-target`.
    - class: la clase que se va a añadir o eliminar.

 * Ejemplos:
    <a href="#menuWrap, #header-core-toggler, body, html" data-toggler="class: show-header">Texto</a>

    <a href="javascript:void(0)" data-toggler="target: #menuWrap, #header-core-toggler, body, html; class: show-header">Texto</a>
 */
var game = game || {};
game.togglers = function () {
  'use strict';

  var Togglers = /** @class */function () {

    function Togglers(options) {
      this.PARAMS = {
        dataKey: 'toggler',
        defaults: {
          target: false,
          class: 'is-active'
        }
      };
      if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
        if (typeof options.dataKey === 'string' && options.dataKey !== defaults.dataKey) this.PARAMS = Object.assign({}, this.PARAMS, options);else throw 'dataKey is required.';
      }
      this.update();
      return this;
    };

    Togglers.prototype.bindEvents = function () {
      var _this = this;

      this.items.forEach(function (x) {
        if (!JSON.parse(x.node.dataset.togglersBinded || false)) {
          x.node.setAttribute('data-togglers-binded', true); // IE
          x.node.addEventListener('click', function (event) {
            event.preventDefault();
            _this.toggle(x);
          });
        }
      });
      return this;
    };

    Togglers.prototype.getItems = function () {
      var _this2 = this;

      this.items = Array.prototype.map.call(document.querySelectorAll('[data-' + this.PARAMS.dataKey + ']'), function (x) {
        var options = Object.assign({}, _this2.PARAMS.defaults, game.utils.parseOptions(x.getAttribute('data-' + _this2.PARAMS.dataKey)));
        return {
          node: x,
          options: options,
          target: Array.prototype.map.call(document.querySelectorAll(options.target || x.getAttribute('href') || x.dataset.target), function (y) {
            return y;
          })
        };
      });
      return this;
    };

    Togglers.prototype.toggle = function (item) {
      item.target.map(function (x) {
        if (x.classList.contains(item.options.class)) {
          x.classList.remove(item.options.class);
          game.utils.triggerEvent('@togglers-removed', /* detail = */{ item: item }, item.node);
        } else {
          x.classList.add(item.options.class);
          game.utils.triggerEvent('@togglers-added', /* detail = */{ item: item }, item.node);
        }
      });
      return item;
    };

    Togglers.prototype.update = function () {
      this.getItems().bindEvents();
      return this;
    };

    return Togglers;
  }(),
      components = new Togglers();

  $(document).ready(components.update.bind(components));

  return {
    components: components,
    Togglers: Togglers
  };
}();
/* globals */
/// <reference path="game.utils.js" />

/**
 * @namespace game
 */
var game = game || {};

game.navigation = function () {
    var
    // Función de redirección
    redirectionTo = function redirectionTo(url) {
        window.location.href = url;
    },


    // Función de redirección a la home
    redirectionToHome = function redirectionToHome() {
        window.location.href = game.utils.getBasePath();
    },


    // Función para recargar la página
    reloadPage = function reloadPage() {
        window.location.reload(true);
    },


    // Función de redirección a la sección de socios
    redirectionToMemberSection = function redirectionToMemberSection() {
        window.location.href = game.utils.getBasePath() + "/socios";
    };

    return {
        redirectionTo: redirectionTo,
        redirectionToHome: redirectionToHome,
        reloadPage: reloadPage,
        redirectionToMemberSection: redirectionToMemberSection
    };
}();
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* globals $ */
/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="../external/velocity/velocity.min.js" />
/// <reference path="game.utils.js" />

/**
 * @namespace game
 */
var game = game || {};

game.ui = function () {
    var __$body = null,
        Control = function Control(selector, options) {
        var $control = null,
            init = function init(force) {
            if (!($control && $control.length) || force) {
                selector = this.selector || selector;
                $control = $(selector);
            }
            return $control;
        },
            animationOptions = {
            duration: 400,
            complete: null
        },
            knownoptions = {
            hideClass: null,
            showClass: null,
            slideUpOptions: animationOptions,
            slideDownOptions: animationOptions,
            slideToggleOptions: animationOptions,
            fadeOutOptions: animationOptions,
            fadeInOptions: animationOptions,
            invalidValue: "",
            invalidClass: "blurInput"
        };

        options = options || {};

        for (var ko in knownoptions) {
            if (knownoptions.hasOwnProperty(ko)) {
                if (!options.hasOwnProperty(ko)) {
                    options[ko] = knownoptions[ko];
                }
            }
        }

        this._init = init;

        this.selector = selector;

        this.active = function (state) {
            init();
            $control.toggleClass('active', state);
        };

        this.data = function () {
            /// <signature>
            ///   <summary>Store arbitrary data associated with the matched elements.</summary>
            ///   <param name="key" type="String">A string naming the piece of data to set.</param>
            ///   <returns type="Object" />
            /// </signature>
            /// <signature>
            ///   <summary>Store arbitrary data associated with the matched elements.</summary>
            ///   <param name="key" type="String">A string naming the piece of data to set.</param>
            ///   <param name="value" type="Object">The new data value; it can be any Javascript type including Array or Object.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Store arbitrary data associated with the matched elements.</summary>
            ///   <param name="obj" type="Object">An object of key-value pairs of data to update.</param>
            ///   <returns type="Control" />
            /// </signature>
            init();
            if (arguments.length === 2 && typeof arguments[0] === 'string') {
                $control.data.apply($control, arguments);
                return this;
            } else {
                return $control.data.apply($control, arguments);
            }
        };

        this.notify = function (text, options) {
            init();
            // $control.notify(text, options);
            alerts.add(text, options);
        };

        this.toggle = function (showOrHide) {
            init();
            showOrHide = showOrHide === undefined ? !this.isVisible() : showOrHide;
            if (showOrHide) this.show();else this.hide();

            return this;
        };

        this.animate = options.animate || function () {
            /// <signature>
            ///   <summary>Perform a custom animation of a CSS properties</summary>
            ///   <param name="properties" type="PlainObject">An object of CSS properties and values that the animation will move toward.</param>
            ///   <param name="options" type="PlainObject">A map of additional options to pass to the method.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Perform a custom animation of a CSS properties</summary>
            ///   <param name="properties" type="PlainObject">An object of CSS properties and values that the animation will move toward.</param>
            ///   <param name="duration">A string or number determining how long the animation will run.</param>
            ///   <param name="easing" type="String">A string indicating which easing function to use for the transition.</param>
            ///   <param name="complete" type="Function">A function to call once the animation is complete.</param>
            ///   <returns type="Control" />
            /// </signature>
            init();
            if (isActiveTab) {
                $control.velocity.apply($control, arguments);
            } else {
                if (typeof arguments[0] === 'string') {
                    switch (arguments[0]) {
                        case 'scroll':
                            this.scroll.call(this, arguments[1]);
                    }
                } else {
                    $control.css.call($control, arguments[0]);
                }
                if (arguments[1] && arguments[1].complete && typeof arguments[1].complete === 'function') arguments[1].complete.call($control);else if (arguments[3] && typeof arguments[3] === 'function') arguments[3].complete.call($control);
            }
            return this;
        };

        this.addClass = options.addClass || function (className) {
            init();
            $control.addClass(className);
            return this;
        };

        this.toggleClass = options.toggleClass || function () {
            /// <signature>
            ///   <summary>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</summary>
            ///   <param name="className" type="String">One or more class names (separated by spaces) to be toggled for each element in the matched set.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</summary>
            ///   <param name="className" type="String">One or more class names (separated by spaces) to be toggled for each element in the matched set.</param>
            ///   <param name="switch" type="Boolean">A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</summary>
            ///   <param name="switch" type="Boolean">A boolean value to determine whether the class should be added or removed.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</summary>
            ///   <param name="function(index, class, switch)" type="Function">A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.</param>
            ///   <param name="switch" type="Boolean">A boolean value to determine whether the class should be added or removed.</param>
            ///   <returns type="Control" />
            /// </signature>
            init();
            $control.toggleClass.apply($control, arguments);
            return this;
        };

        this._checked = options.checked || function (value) {
            init();
            if (value === undefined) {
                return $control.prop('checked');
            } else {
                $control.prop('checked', value);
            }
        };
        this.checked = options.checked || this._checked;

        this._children = function () {
            /// <signature>
            ///   <summary>Get the children of each element in the set of matched elements, optionally filtered by a selector.</summary>
            ///   <param name="selector" type="String">A string containing a selector expression to match elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            init();
            if (arguments.length === 0) {
                return new Control($control.children.apply($control));
            } else if (arguments.length === 1 && typeof arguments[0] === 'string') {
                return new Control($control.children.apply($control, arguments));
            } else if (arguments.length === 1 && _typeof(arguments[0]) === 'object') {
                return new Control($control.children.apply($control), arguments[0]);
            } else if (arguments.length === 2) {
                return new Control($control.children.apply($control, arguments[0]), arguments[1]);
            }
        };
        this.children = options.children || this._children;

        this._parent = function () {
            /// <signature>
            ///   <summary>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</summary>
            ///   <param name="selector" type="String">A string containing a selector expression to match elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            init();
            if (arguments.length === 0) {
                return new Control($control.parent.apply($control));
            } else if (arguments.length === 1 && typeof arguments[0] === 'string') {
                return new Control($control.parent.apply($control, arguments));
            } else if (arguments.length === 1 && _typeof(arguments[0]) === 'object') {
                return new Control($control.parent.apply($control), arguments[0]);
            } else if (arguments.length === 2) {
                return new Control($control.parent.apply($control, arguments[0]), arguments[1]);
            }
        };
        this.parent = options.parent || this._parent;

        this._find = function () {
            /// <signature>
            ///   <summary>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</summary>
            ///   <param name="selector" type="String">A string containing a selector expression to match elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</summary>
            ///   <param name="jQuery object" type="Object">A jQuery object to match elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</summary>
            ///   <param name="element" type="Element">An element to match elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            init();
            if (arguments.length === 0) {
                return new Control([]);
            } else if (arguments.length === 1 && typeof arguments[0] === 'string') {
                return new Control($control.find(arguments[0]));
            } else if (arguments.length === 1 && _typeof(arguments[0]) === 'object') {
                if (arguments[0].jquery) {
                    return new Control($control.find(arguments[0]));
                } else {
                    return new Control($control.find([]), arguments[0]);
                }
            } else if (arguments.length === 2) {
                if (arguments[1].sameOptions) {
                    return new Control($control.find(arguments[0]), options);
                } else {
                    return new Control($control.find(arguments[0]), arguments[1]);
                }
            }
        };
        this.find = options.find || this._find;

        this._filter = function () {
            /// <signature>
            ///   <summary>Reduce the set of matched elements to those that match the selector or pass the function's test.</summary>
            ///   <param name="selector" type="String">A string containing a selector expression to match the current set of elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Reduce the set of matched elements to those that match the selector or pass the function's test.</summary>
            ///   <param name="function(index)" type="Function">A function used as a test for each element in the set. this is the current DOM element.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Reduce the set of matched elements to those that match the selector or pass the function's test.</summary>
            ///   <param name="element" type="Element">An element to match the current set of elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>
            /// <signature>
            ///   <summary>Reduce the set of matched elements to those that match the selector or pass the function's test.</summary>
            ///   <param name="jQuery object" type="Object">An existing jQuery object to match the current set of elements against.</param>
            ///   <param name="options" type="Object">Options to add to Control object.</param>
            ///   <returns type="Control" />
            /// </signature>

            init();
            if (arguments.length === 0) {
                return new Control($control.filter.apply($control));
            } else if (arguments.length === 1 && (typeof arguments[0] === 'string' || typeof arguments[0] === 'function')) {
                return new Control($control.filter.apply($control, arguments));
            } else if (arguments.length === 1 && _typeof(arguments[0]) === 'object') {
                if (arguments[0].jquery || arguments[0].nodeName) {
                    return new Control($control.filter.apply($control, arguments[0]));
                } else {
                    return new Control($control.filter.apply($control), arguments[0]);
                }
            } else if (arguments.length === 2) {
                if (arguments[1].sameOptions) {
                    return new Control($control.filter(arguments[0]), options);
                } else {
                    return new Control($control.filter(arguments[0]), arguments[1]);
                }
            }
        };
        this.filter = options.filter || this._filter;

        this.enabled = options.enabled || function (value) {
            init();
            if (value === undefined) {
                return !$control.prop('disabled');
            } else {
                $control.prop('disabled', !value);
            }
        };

        this._fadeIn = options.fadeIn || function () {
            init();
            if (isActiveTab) {
                $control.velocity('fadeIn', options.fadeInOptions);
            } else {
                $control.show();
            }
            return this;
        };
        this.fadeIn = options.fadeIn || this._fadeIn;

        this._fadeOut = function (opts) {
            init();
            if (isActiveTab) {
                $control.velocity('fadeOut', opts || options.fadeOutOptions);
            } else {
                $control.hide();
            }
            return this;
        };
        this.fadeOut = options.fadeOut || this._fadeOut;

        this._fadeToggle = function (show, opts) {
            init();
            show = show || !this.isVisible();
            if (show) {
                this.fadeIn(opts);
            } else {
                this.fadeOut(opts);
            }
            return this;
        };
        this.fadeToggle = options.fadeToggle || this._fadeToggle;

        this.scroll = options.scroll || function (opts) {
            init();
            if (isActiveTab) {
                $control.velocity('scroll', opts);
            } else if (opts.offset !== undefined) {
                if (opts.axis !== undefined && typeof opts.axis === 'string' && opts.axis.toLowerCase() === 'x') {
                    $control.scrollLeft(opts.offset);
                } else {
                    $control.scrollTop(opts.offset);
                }
            }
            return this;
        };

        this.hasClass = options.hasClass || function (className) {
            init();
            return $control.hasClass(className);
        };

        this.hide = options.hide || function () {
            init();
            if (options.hideClass) {
                $control.toggleClass(options.hideClass, true);
            } else if (options.showClass) {
                $control.toggleClass(options.showClass, false);
            } else {
                $control.hide();
            }
            return this;
        };

        this.html = options.html || function (html) {
            init();
            if (html === undefined) {
                return $control.html(html);
            }
            $control.html(html);
        };

        this.invalid = options.invalid || function (invalid) {
            init();
            var self = this,
                revalidate = function revalidate() {
                self.invalid(false);
            };
            if (invalid) {
                $control.addClass(options.invalidClass);
                $control.on('change', revalidate);
            } else {
                $control.removeClass(options.invalidClass);
                $control.off('change', revalidate);
            }
        };

        this._isValid = function () {
            if (options.validateIf && !options.validateIf()) return true;
            var value = this.val();
            return !this.enabled() || ($.isArray(options.invalidValue) ? options.invalidValue.map(function (item) {
                return item !== value;
            }).reduce(function (total, current) {
                return total && current;
            }) : options.invalidValue !== value);
        };

        this.isValid = options.isValid || this._isValid;

        this.isVisible = options.isVisible || function () {
            init();
            return $control.is(":visible");
        };

        this.offset = options.offset || function (coordinates) {
            init();
            return $control.offset(coordinates);
        };

        this.removeClass = options.removeClass || function (className) {
            init();
            return $control.removeClass(className);
        };

        this.show = options.show || function () {
            init();
            if (options.hideClass) {
                $control.toggleClass(options.hideClass, false);
            } else if (options.showClass) {
                $control.toggleClass(options.showClass, true);
            } else {
                $control.show();
            }
            return this;
        };

        this.slideDown = options.slideDown || function (opts) {
            init();
            if (isActiveTab) {
                $control.velocity('slideDown', opts || options.slideDownOptions);
            } else {
                $control.show();
            }
            return this;
        };

        this._slideUp = function (opts) {
            init();
            if (isActiveTab) {
                $control.velocity('slideUp', opts || options.slideUpOptions);
            } else {
                $control.hide();
            }
            return this;
        };
        this.slideUp = options.slideUp || this._slideUp;

        this.slideToggle = options.slideToggle || function (show, opts) {
            init();
            show = show === undefined ? !this.isVisible() : show;
            if (show) {
                this.slideDown(opts || options.slideToggleOptions);
            } else {
                this.slideUp(opts || options.slideToggleOptions);
            }

            return this;
        };

        this.text = options.text || function (text) {
            init();
            if (text !== undefined) {
                $control.text(text);
                return text;
            }
            return $control.text();
        };

        this._removeAttr = function (attr) {
            init().removeAttr(attr);
            return this;
        };
        this.removeAttr = options.removeAttr || this._removeAttr;

        this.val = options.val || function (val) {
            init();
            if (val !== undefined) {
                $control.val(val);
                return val;
            }
            return $control.val();
        };

        this._exists = function () {
            return init().length > 0;
        };
        this.exists = options.exists || this._exists;

        for (var f in options) {
            if (!this.hasOwnProperty(f) && !knownoptions.hasOwnProperty(f)) {
                this[f] = options[f];
            }
        }
    },
        ComboControl = function ComboControl(selector, options) {
        options = options || {};

        options.selected = options.selected || function (value) {
            if (value !== undefined) {
                control.val(value);
                if (control.val() !== value) {
                    selectedOptionControl.selected(value);
                }
            }

            selectedOptionControl._init(true);

            return selectedOptionControl;
        };

        options.val = options.val || function (val) {
            var $control = control._init(),
                ret;

            if (val !== undefined) {
                $control.val(val);
                return val;
            }
            ret = $control.val();

            if (ret !== null && ret !== undefined && ret !== "") return ret;

            selectedOptionControl._init(true);
            return selectedOptionControl.val() || selectedOptionControl.text();
        };

        options.invalidValue = ['-1', null, ''];

        var selectedOptionControl = new Control(selector + " :selected", {
            selected: function selected(text) {
                var $control = control._init(),
                    $option;
                if (text) {
                    $option = $('option:contains(' + text + ')', $control);

                    if ($option.text() === text) {
                        $option.prop('selected', true);
                    } else {
                        text = text.toString().toLowerCase();
                        ($.makeArray($('option', $control)).find(function (item) {
                            return item.innerText.toLowerCase() === text;
                        }) || $('option', $control).first()).selected = true;
                    }
                } else {
                    $('option:selected', $control).removeAttr('selected');
                }
            }
        }),
            control = new Control(selector, options);

        return control;
    },
        RadioGroupControl = function RadioGroupControl(selector, options) {
        options = options || {};

        options.checked = options.checked || function (value) {
            var chk;
            if (value !== undefined) {
                chk = control.filter('[value="' + value + '"]');
                chk._checked(true);
            } else {
                chk = control.filter(':checked');
            }
            return chk;
        };

        options.val = options.val || function (val) {
            return options.checked(val).val();
        };

        options.invalidValue = undefined;

        var control = new Control(selector, options);

        return control;
    },
        isActiveTab = document.hasFocus(),
        validateControl = function validateControl(control) {
        /// <signature>
        ///   <summary>Validate a control using the isValid function, if the control is not valid the invalid function is called.</summary>
        ///   <param name="control" type="Control">A control to validate.</param>
        ///   <returns type="Bool" />
        /// </signature>
        var isValid = !control.enabled() || control.isValid();
        control.invalid(!isValid);
        return isValid;
    },
        validateControls = function validateControls(controls) {
        /// <signature>
        ///   <summary>Validate an array of controls using the isValid function, if the control is not valid the invalid function is called.</summary>
        ///   <param name="controls" type="Control[]">An array of controls to validate.</param>
        ///   <returns type="Bool" />
        /// </signature>
        var areValids = true;
        for (var i = 0; i < controls.length; i++) {
            areValids = validateControl(controls[i]) && areValids;
        }
        return areValids;
    },
        viewToModel = function viewToModel(map) {
        var model = {};
        for (var m in map) {
            model[m] = typeof map[m]._init !== 'undefined' ? map[m].val() : map[m].get();
        }
        return model;
    },
        modelToView = function modelToView(model, map) {
        for (var m in map) {
            typeof map[m]._init !== 'undefined' ? map[m].val(model[m]) : map[m].set ? map[m].set(model[m]) : null;
        }
    },
        alert = function () {
        var //alerts = [],
        pattern = '<div class="alert alert-{{type}} alert-dismissible fade in u-mb1 u-relative u-xs-m0" role="alert">' + '<button class="btn btn-{{type}} btn-sm u-absolute u-top-0 u-right-0 u-p0 close" type="button" data-dismiss="alert" aria-label="Cerrar">' + '<span class="iconGame mdi-close u-p0 cm-txt align"></span>' + '</button>' + '<p class="p">{{message}}</p>' + '</div>' + '</div>';

        return function (message, type) {
            var options = { message: message, type: type || 'success' },
                div = $(pattern.fastformat(options)),
                closeButton = $('button', div),
                d = new Date().getTime() + 10000;

            closeButton.click(function () {
                div.remove();
            });

            div.data('closeTime', d);

            return div;
        };
    }(),
        alerts = function () {
        var Alerts = function Alerts() {},
            containerPattern = '<div class="u-fixed u-xs-top-0 u-xs-p0 u-top-1 u-right-1 u-z11000 col-xs-12 col-sm-6 col-md-4 col-lg-3"></div>',
            container,
            closeAlerts = function closeAlerts(alerts, closeNow) {
            while (alerts.length) {
                if (alerts[0].data('closeTime') < new Date() || closeNow) {
                    //alerts[0].alert('close');
                    alerts[0].remove();
                    alerts.splice(0, 1);
                    if (!alerts.length) container.remove();
                } else {
                    requestAnimationFrame(function () {
                        closeAlerts(alerts);
                    });
                    break;
                }
            }
        };

        Alerts.prototype = new Array();
        Alerts.prototype._close = function () {
            closeAlerts(this);
        };
        Alerts.prototype.close = function () {
            closeAlerts(this, true);
        };
        Alerts.prototype.add = function (message, type) {
            /*if (!alerts.length) {
                container = $(containerPattern).appendTo(__$body);
            }
            var div = alert(message, type);
            container.append(div);
            this.push(div);
              requestAnimationFrame(this._close.bind(this));*/
            if (typeof type !== 'string') type = 'warning';
            $.notify(message, { warning: 'warn', danger: 'error' }[type] || type);
        };
        return new Alerts();
    }(),
        filter = function filter(target) {
        var data = target.dataset || target,
            filterClassName = 'filtered-by-' + data.filterBy,
            value = target.type === "checkbox" ? target.checked : target.value || data.value,
            visible = $('[data-filter-by-' + data.filterBy + ']:not(.' + filterClassName + ')'),
            visibleFilter = visible.length ? visible.attr('data-filter-by-' + data.filterBy) : null;

        if (data.toggleValue && data.original && visibleFilter !== data.original && data.original === data.toggleValue) value = toggleFilterValue(data);

        $('[data-filter-by-' + data.filterBy + ']').show().toggleClass(filterClassName, true);

        if (value !== undefined || value !== null) {
            $('[data-filter-by-' + data.filterBy + '="' + value + '"]').removeClass(filterClassName);
        } else {
            $('[data-filter-by-' + data.filterBy + ']').removeClass(filterClassName);
        }
        $('[class*="filtered-by-"]').hide();

        $(target).trigger("filtered", [data]);
        if (data.toggleValue) {
            data.original = data.original || value;
            toggleFilterValue(data);
        }
    },
        toggleFilterValue = function toggleFilterValue(data) {
        var t = data.toggleValue;
        data.toggleValue = data.value;
        data.value = t;
        return t;
    };

    $(function () {
        var $window = $(window),
            $document = $(document),
            changeableElements = 'input[type="checkbox"],input[type="color"],input[type="date"],input[type="datetime"],input[type="email"],input[type="file"],input[type="month"],input[type="number"],input[type="password"],input[type="radio"],input[type="range"],input[type="search"],input[type="tel"],input[type="text"],input[type="time"],input[type="url"],input[type="week"],keygen,select,textarea';

        $window.on('blur', function () {
            isActiveTab = false;
        });
        $window.on('focus', function () {
            isActiveTab = true;
        });

        $document.on('change', changeableElements.split(',').join('.do-filter,') + '.do-filter', function (e) {
            filter(e.target);
        });
        $document.on('click', ':not(' + changeableElements + ').do-filter', function (e) {
            filter(e.target);
        });
        $.fn.doFilter = function () {
            this.each(function () {
                filter(this);
            });
        };
        __$body = $('body');
    });

    return {
        Control: Control,
        ComboControl: ComboControl,
        RadioGroupControl: RadioGroupControl,
        validateControl: validateControl,
        validateControls: validateControls,
        viewToModel: viewToModel,
        modelToView: modelToView,
        alerts: alerts,
        filter: filter
    };
}();
/* global $, DocumentTouch */
/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="game.utils.js" />

/**
 * @namespace game
 */
var game = game || {};

//  Gestión de los eventos responsive de tipo móvil, touch y compatibilidad con navegadores
game.responsive = function () {
    var
    //#region Variables
    __body = new game.ui.Control('body', { width: function width() {
            return this._init().width();
        } }),
        __html = new game.ui.Control("html"),
        // Temporal > Primero hay que cambiar la captura del html como elemento del Layout
    __$document = $(document),
        __$window = $(window),
        __previousViewMode = false,
        //True Pantalla pequeña, False Pantalla sobremesa        
    //#endregion

    //#region Fix de navegadores

    //#endregion

    //#region Funciones

    // Si la página está o no en modo responsive
    // Se usa un marker HTML que cambia con el mediaquery correspondiente para determinar el modo de visualización.
    // true: versión movil, false: version escritorio
    isResponsiveMode = function isResponsiveMode() {
        if (__body.width() < 768) return true;else return false;
    },


    //  Detecta el User agent.
    // @returns {bool} True para user agent de tipo móvil detectado, False para user agent desconocido
    userAgentDetection = function userAgentDetection() {
        return navigator.userAgent.match(/Android|webOS|iPhone|iPod|iPad|Blackberry|Puffin|Kindle|hp-tablet|webOS|IEMobile|LG-|MOT-|MOTORIZR-|portalmmm|Symbian|Nokia|Opera Mini|Opera Mobi|SAMSUNG-|SEC-|SonyEricsson/i) !== null;
    },


    // Detecta los exploradores más comunes (http://stackoverflow.com/questions/13478303/correct-way-to-use-modernizr-to-detect-ie)
    // Ejemplos: 
    // game.responsive.browserDetect.browser == 'Explorer';
    // game.responsive.browserDetect.version <= 9;

    initBrowserDetect = function initBrowserDetect() {
        var touchSupport = function touchSupport() {
            // Detecta si soporta los eventos touch
            // Fuente (simplificada): Modernizr (Oct/16 - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/touchevents.js)
            var bool = false;

            if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {
                __html.addClass("touch");
                bool = true;
            }

            return bool;
        },
            searchString = function searchString(data) {
            for (var i = 0; i < data.length; i++) {
                var dataString = data[i].string;
                versionSearchString = data[i].subString;

                if (dataString.indexOf(data[i].subString) !== -1) {
                    return data[i].identity;
                }
            }
        },
            searchVersion = function searchVersion(dataString) {
            var index = dataString.indexOf(versionSearchString);
            if (index === -1) {
                return;
            }

            var rv = dataString.indexOf("rv:");
            if (versionSearchString === "Trident" && rv !== -1) {
                return parseFloat(dataString.substring(rv + 3));
            } else {
                return parseFloat(dataString.substring(index + versionSearchString.length + 1));
            }
        },
            dataBrowser = [{ string: navigator.userAgent, subString: "Edge", identity: "MS Edge" }, { string: navigator.userAgent, subString: "MSIE", identity: "Explorer" }, { string: navigator.userAgent, subString: "Trident", identity: "Explorer" }, { string: navigator.userAgent, subString: "Firefox", identity: "Firefox" }, { string: navigator.userAgent, subString: "Opera", identity: "Opera" }, { string: navigator.userAgent, subString: "OPR", identity: "Opera" }, { string: navigator.userAgent, subString: "Chrome", identity: "Chrome" }, { string: navigator.userAgent, subString: "Safari", identity: "Safari" }],
            versionSearchString = null,
            browser = searchString(dataBrowser) || "Other",
            version = searchVersion(navigator.userAgent) || searchVersion(navigator.appVersion) || "Unknown";

        browserDetect.touchSupport = touchSupport();
        browserDetect.browser = browser;
        browserDetect.version = version;
    },
        browserDetect = {
        touchSupport: false,
        browser: null,
        version: null
    },

    // Inicialización de la clase Responsive
    _init = function _init() {
        game.responsive.isResponsiveModeBoolean = isResponsiveMode();
        __previousViewMode = game.responsive.isResponsiveModeBoolean;
        game.responsive.isMobileBrowser = userAgentDetection() || game.responsive.isResponsiveModeBoolean;

        // Inicialización de las funciones y asignación de parámetros
        initBrowserDetect();

        game.responsive.isTouchBrowser = browserDetect.touchSupport;
        var browser = game.utils.formatUrlSearch((game.responsive.browserDetect.browser || 'unknow').toLowerCase());
        document.body.classList.add(browser, browser + '-' + game.responsive.browserDetect.version);
    };

    //#endregion

    // Al hacer resize se actualizan las propiedades y se lanzan los eventos correspondientes cuando se ha cambiado la vista
    __$window.on("resize", function () {
        game.utils.rateLimit("responsiveChange", 400, function () {
            game.responsive.isResponsiveModeBoolean = isResponsiveMode();

            // Comprueba si ha cambiado el ancho de la pantalla y lanza el evento de cambio
            if (__previousViewMode === game.responsive.isResponsiveModeBoolean) return;
            __previousViewMode = game.responsive.isResponsiveModeBoolean;
            game.responsive.isMobileBrowser = userAgentDetection() || isResponsiveMode();

            __$document.trigger({ type: "changeResponsiveViewMode", mode: game.responsive.isResponsiveModeBoolean });

            // Lanza el evento del tipo de cambio
            var type = game.responsive.isResponsiveModeBoolean ? "changeToMobile" : "changeToDesk";
            __$document.trigger({ type: type });
        });
    });

    __$document.ready(_init);

    return {
        userAgentDetection: userAgentDetection,
        isResponsiveMode: isResponsiveMode,
        browserDetect: browserDetect,
        isMobileBrowser: false,
        isTouchBrowser: false,
        ///<field type="Boolean">True movil (pantalla tamaño efectivo  móvil), False Sobremesa</field>
        isResponsiveModeBoolean: false
    };
}();
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* globals $ */
/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="game.ui.js" />
/// <reference path="game.enums.js" />
/// <reference path="game.login.js" />

/**
 * @namespace game
 */
var game = game || {};

game.api = function () {
    "use strict";

    var //__requestVerificationToken = null,

    /**
    * @typedef DoneOptions
    * @property {Function} ok Se ejecuta cuando la respuesta tiene la propiedad ErrorResponses === game.enums.genericErrorResponses.none
    * @property {Function} error Se ejecuta cuando la respuesta tiene la propiedad ErrorResponses === game.enums.genericErrorResponses.error
    * @property {Function} notAuthenticated  Se ejecuta cuando la respuesta tiene la propiedad ErrorResponses === game.enums.genericErrorResponses.notAuthenticated
    */

    /**
    * @typedef FailOptions
    * @property {Function} error Se ejecuta cuando la respuesta tiene la propiedad ErrorResponses === game.enums.genericErrorResponses.error
    * @property {Function} notAuthenticated  Se ejecuta cuando la respuesta tiene la propiedad ErrorResponses === game.enums.genericErrorResponses.notAuthenticated
    */

    /**
    * @typedef DeferredOptions
    * @property {DoneOptions|Function} done función u objeto DoneOptions Se ejecuta cuando la petición se ha realizado correctamente
    * @property {FailOptions|Function} fail función u objeto FailOptions Se ejecuta cuando la petición se ha realizado con error
    * @property {Function} always Se ejecuta siempre
    */

    processResponseDone = function processResponseDone(response, textStatus, jqXHR, options, failoptions, enums) {
        /// <param type="{DoneOptions|Function}" name="options"></param>
        var errorTypes = {},
            func = null;

        if (response.StatusCode !== undefined) {
            if (response.StatusCode === 200) {
                if (typeof options === 'function') {
                    func = options;
                }
            } else {
                jqXHR.status = response.StatusCode;
                processResponseFail(jqXHR, response.StatusCode, response.ErrorThrown, failoptions);
            }
        } else {

            if (typeof options === 'function') {
                func = options;
            } else {
                for (var e in enums) {
                    var p = e === 'none' ? 'ok' : e;
                    if (options.hasOwnProperty(p)) {
                        errorTypes[enums[e]] = options[p];
                    } else if (options.hasOwnProperty(e)) {
                        errorTypes[enums[e]] = options[e];
                    }
                }

                func = errorTypes[response.ErrorResponses] || options.error || options.ok || options.none;
            }
        }
        if (func) {
            func(response);
        }
    },
        processResponseFail = function processResponseFail(jqXHR, textStatus, errorThrown, options) {
        /// <param type="jqXHR" name="jqXHR"></param>
        /// <param type="{FailOptions|Function}" name="options"></param>

        var errorTypes = {
            401: options.notAuthenticated,
            500: options.error
        },
            errorFunc = function errorFunc() {
            throw (textStatus + ": " || '') + errorThrown;
        },
            func = null;

        if (typeof options === 'function') {
            func = options;
        } else {
            func = errorTypes[jqXHR.status] || options.error || errorFunc;
        }
        if (func) {
            func(jqXHR, textStatus, errorThrown);
        }
    },
        antiForgeryToken = new game.ui.Control('input[name="AjaxAntiforgeryToken"]'),
        getHeaders = function getHeaders() {
        //if (!__requestVerificationToken) __requestVerificationToken = antiForgeryToken._init(true).val();
        //return { RequestVerificationToken: __requestVerificationToken };
        return { RequestVerificationToken: antiForgeryToken.val() };
    },
        setRequestVerificationToken = function setRequestVerificationToken() /*token*/{
        //__requestVerificationToken = token;
    };

    return {
        getHeaders: getHeaders,

        setRequestVerificationToken: setRequestVerificationToken,

        basePath: game.utils.getBasePath(),

        ajax: function ajax(options, deferredoptions, qUnitCallback) {
            deferredoptions = deferredoptions || {};
            /// <summary>Perform an asynchronous HTTP (Ajax) request</summary>
            /// <param type="PlainObject" name="options">A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup()</param>
            /// <param type="DeferredOptions" name="deferredoptions">Objeto con las opciones de lo que se ha de hacer una vez realizada la petición</param>
            /// <param type="Function" name="qUnitCallback">Función callback que será llamada al finalizar la petición, si la petición se ha procesado correctamente se pasará como parametro 'true', en caso contrario 'false'</param>
            /// <returns type="jqXHR"></returns>

            deferredoptions.errorenum = deferredoptions.errorenum || game.enums.genericErrorResponses;

            if (options.data && _typeof(options.data) === 'object') {
                Object.keys(options.data).forEach(function (p) {
                    if (options.data[p] === null) delete options.data[p];
                });
            }

            if (!deferredoptions.fail) deferredoptions.fail = {};
            if (deferredoptions.fail.error === undefined) {
                deferredoptions.fail.error = function (jqXHR, textStatus, errorThrown) {
                    game.ui.alerts.add(errorThrown || 'Error inesperado', 'warning');
                };
            }

            return $.ajax(options).done(function (response, textStatus, jqXHR) {
                if (response !== undefined && deferredoptions.done !== undefined) processResponseDone(response, textStatus, jqXHR, deferredoptions.done, deferredoptions.fail, deferredoptions.errorenum);
            }).done(function (response, textStatus, jqXHR) {
                if (qUnitCallback) {
                    qUnitCallback(jqXHR, textStatus, response);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                processResponseFail(jqXHR, textStatus, errorThrown, deferredoptions.fail);
            }).fail(function (jqXHR, textStatus, errorThrown) {
                if (qUnitCallback) qUnitCallback(jqXHR, textStatus, errorThrown);
            }).always(deferredoptions.always);
        },

        formData: function formData(name, o) {
            var r = {};
            Object.keys(o).forEach(function (key) {
                if (o[key] !== null) {
                    if (_typeof(o[key]) === 'object' && Object.keys(o[key]).length) return game.api.formData(key, o[key]);else return r[name + '.' + key] = o[key];
                }
            });
            return r;
        }
    };
}();
/**
 * @namespace game
 */
var game = game || {};

/** @namespace game.enums */
game.enums = {
    /**
    * Enum para los tipos callback del login
    * @readonly
    * @enum {String}
    */
    callBackActionType: {
        /** @description Sección */
        section: "Section",
        /** @description Producto */
        product: "Product",
        /** @description Reserva */
        reserve: "Reserve",
        /** @description Mostrar Clic y recoger */
        clickAndCollect: "ClickAndCollect",
        /** @description Realizar reserva de Clic y recoger */
        clickAndCollectReserveProduct: "clickAndCollectReserveProduct",
        /** @description Añadir comentario */
        addComment: "AddComment",
        /** @description Añadir Pack */
        pack: "Pack",
        /** @description Petición de formularios WEB */
        task: "Task",
        /** @description Envía la petición de suscripción a un producto */
        sendNotifyRequest: "SendNotifyRequest",
        /** @description Muestra el modal de reservas */
        showPreordersModal: "ShowPreordersModal"
    },

    /**
    * Enum Tipos de estado de tiendas para click y recoger
    * @readonly
    * @enum {String}
    */
    storePickAndClickStatus: {
        all: "0",
        /** @description Clic y recoger */
        ready: "1", // Disponible para pick and click
        /** @description Disponible para envío */
        ship: "2", // Disponible para enviar a tienda
        /** @description No disponible*/
        notReady: "3" // No disponible para enviar a tienda
    },

    /**
    * Enum Tipos de sorteo
    * @readonly
    * @enum {String}
    */
    drawTypes: {
        /** @description El usuario ya participa*/
        userParticipated: "1",
        /** @description El usuario no participa aún*/
        userNonParticipated: "0",
        /** @description Ya han finalizado*/
        completed: "2"
    },

    /**
    * Enum Tipos de respuestas de Clic y recoger
    * @readonly
    * @enum {Number}
    */
    clickAndCollectResponses: {
        /** @description Usuario no logado (se usa en web)*/
        notAuthenticated: -100, //Web use
        /** @description Error*/
        error: 0,
        /** @description Respuesta correcta*/
        success: 1,
        /** @description Sku invalido*/
        skuInvalid: 2,
        /** @description No hay stock*/
        noStock: 3,
        /** @description No es cliente aún*/
        notCustomer: 4
    },

    /**
    * Enum Tipos de respuestas para añadir comentarios a la ficha de producto
    * @readonly
    * @enum {Number}
    */
    addComentErrorResponses: {
        /** @description Usuario no logado*/
        notAuthenticated: -100,
        /** @description Error desconocido*/
        unknow: -1,
        /** @description Ya se ha votado*/
        alreadyVoted: -2,
        /** @description Error*/
        error: 0,
        /** @description Respuesta correcta*/
        success: 1
    },

    /**
    * Enum Tipos de respuestas para añadir comentarios a la ficha de producto
    * @readonly
    * @enum {Number}
    */
    voteComentResponses: {
        /** @description Usuario no logado*/
        notAuthenticated: -100,
        /** @description Error desconocido*/
        unknow: -1,
        /** @description Ya se ha votado*/
        alreadyVoted: -2,
        /** @description Error*/
        error: 0,
        /** @description Respuesta correcta*/
        success: 1
    },

    /**
    * Enum Tipos de respuestas genéricas para todas las peticiones
    * @readonly
    * @enum {Number}
    */
    genericErrorResponses: {
        /** @description Respuesta correcta*/
        none: 0,
        /** @description Usuario no logado*/
        notAuthenticated: 1,
        /** @description Error*/
        error: 2
    },
    /**
    * Enum Respuestas cuando añadimos productos al carro
    * @readonly
    * @enum {Number}
    */

    /**
    * Enum Tipos de respuestas del CheckDuplicateUserByCardId
    * @readonly
    * @enum {Number}
    */
    checkDuplicateUserByCardIdResponses: {
        /** @description Error*/
        error: -1,
        /** @description Usuario con formato incorrecto y no repetido*/
        notValid: 0,
        /** @description Documento con formato correcto y no repetido*/
        valid: 1,
        /** @description Documento repetido*/
        repeated: 2
    },

    /**
    * Enum Respuestas de error en un clic y recoger
    * @readonly
    * @enum {String}
    */
    clicknCollectStatusErrorResponsesValues: {
        /** @description Respuesta correcta*/
        0: "Ok",
        /** @description Error de codigo de Store*/
        1: "ERROR_STORECODE",
        /** @description Error al generar campaña*/
        2: "ERROR_GENERATING_CAMPAING",
        /** @description Error al generar reserva*/
        3: "ERROR_GENERATING_RESERVATION",
        /** @description Error al activar reserva*/
        4: "ERROR_ACTIVATING_RESERVATION",
        /** @description Error al generar orden de almacen*/
        5: "ERROR_GENERATING_STORE_ORDER",
        /** @description Error de stock*/
        6: "ERROR_STOCK_0",
        /** @description Error campaña imcompatible*/
        7: "ERROR_INCOMPATIBLE_CAMPAING",
        /** @description Error perfil inactivo*/
        8: "ERROR_PROFILE_INACTIVE",
        /** @description Error prefijo de télefono*/
        9: "ERROR_PHONE_PREFIX",
        /** @description Error cantidad excede 1 unidad*/
        10: "ERROR_QUANTITY_EXCEEDS_1UNIT",
        /** @description Error de perfil de SKU*/
        11: "ERROR_PROFILE_SKU",
        /** @description Error No existe perfil por defecto para el SKU*/
        12: "ERROR_NOT_EXISTS_DEFAULT_PROFILE_SKU",
        /** @description Servicio central parado*/
        99: "SERVICE_STOPPED_CENTRAL",
        /** @description Error no controlado*/
        100: "ERROR_UNMANAGE",
        /** @description ErrorIP bloqueada*/
        101: "ERROR_IP_BLOCKED",
        /** @description Error dominio de email invalido*/
        102: "ERROR_INVALID_EMAILDOMAIN"
    },

    /**
    * Enum Respuestas de en la creación de usuarios, envío del email de suscripción
    * @readonly
    * @enum {Number}
    */
    sendRegistrationEmail: {
        /** @description Respuesta correcta*/
        registrationComplete: 0,
        /** @description Email enviado correctamente*/
        emailSentSuccesfully: 1,
        /** @description Email no válido*/
        emailNotValid: -1,
        /** @description Contraseña no válida*/
        passwordNotValid: -2,
        /** @description Email en lista negra*/
        emailBlackList: -3,
        /** @description Email en uso*/
        emailInUse: -4,
        /** @description Código expirado*/
        codeExpired: -5,
        /** @description Código erroneo*/
        codeInvalid: -6,
        /** @description Código vacío*/
        codeEmpty: -7,
        /** @description Código no numérico*/
        codeNotNumeric: -8,
        /** @description Error de sistema*/
        systemError: -100
    },

    /**
    * Enum Respuestas de en la creación de usuarios
    * @readonly
    * @enum {Number}
    */
    createWebUserErrorResponses: {
        /** @description Respuesta correcta*/
        none: 0,
        /** @description El email ya existe*/
        emailAlreadyExist: 1,
        /** @description Error de sistema*/
        systemError: 2,
        /** @description El email no es válido*/
        emailNotValid: 3,
        /** @description La contraseña no es válida*/
        passwordNotValid: 4,
        /** @description Otro error*/
        otherError: 5,
        /** @description Código expirado*/
        codeExpired: -5,
        /** @description Código no válido*/
        codeNotMatch: -6,
        /** @description Código erroneo*/
        codeInvalid: -7,
        /** @description Código no numerico*/
        codeNotNumeric: -8
    },

    /**
    * Enum Respuestas para las acciones de SAT
    * @readonly
    * @enum {String}
    */
    actionSatResponses: {
        /** @description Desconocido*/
        unknown: "-1",
        /** @description No completado*/
        notCompleted: "0",
        /** @description Respuesta correcta*/
        success: "1",
        /** @description No válido*/
        invalid: "-2"
    },

    /**
    * Enum Tipo de  pack
    * @readonly
    * @enum {Number}
    */
    typeOfPacks: {
        /** @description Sin Tipo*/
        none: 0,
        /** @description Tipo: 1  3x2 */
        type1: 1,
        /** @description Tipo: 2 precio final de pack*/
        type2: 2,
        /** @description Tipo: 3 % a descontar del pack*/
        type3: 3,
        /** @description Tipo: 4 euros de descuento*/
        type4: 4
    },

    /**
    * Enum tipos de acción para el SAT
    * @readonly
    * @enum {String}
    */
    actionSat: {
        /** @description Aceptar*/
        accept: "ACCEPTED",
        /** @description Vender*/
        sell: "TRADEIN",
        /** @description Rechazar*/
        reject: "REJECTED"
    },

    /**
    * Enum para los tipos de origen de incidencias
    * @readonly
    * @enum {String}
    */
    taskType: {
        web: "1",
        store: "2"
    },
    /**
    * Enum para las respuestas de Atención al cliente
    * @readonly
    * @enum {String}
    */
    taskResponse: {
        none: 0,
        incomplete: -1,
        duplicate: -2,
        errorTicket: -6666
    },

    /**
    * Enum para los tipos de componentes para las incidencias (tabla de maestros WEB_V2_MasterType)
    * @readonly
    * @enum {String}
    */
    masterType: {
        textBox: "1",
        textArea: "2",
        cardMember: "3",
        ticket: "4",
        comboBox: "5"
    },

    /**
    * Enum para las respuestas del avísame de la ficha de producto, en concordancia con la interfaz 'WebNotifyResponses' de 'ProductManager'
    * @readonly
    * @enum {String}
    */
    webNotifyResponses: {
        notAuthenticated: "-3",
        alreadySignedUp: "-2",
        error: "-1",
        success: "1"
    }
};

/* Codigos de resultado */
/* -1 - Desconocido */
/*  0 - No completado */
/*  1 - OK - Procesado */
/* -2 - El estado de la orden no es valido para confirmación */
game.constants = {
    stringEmpty: "",

    search: {
        /**
        * Enum Tipos de busquedas
        * @readonly
        * @enum {String}
        */
        allResults: -1, //SKU para mostrar todos los resultados
        noResults: -2, //SKU para mostrar que no hay resultados
        url: "URL", //Indica que es un site
        direct: "DIRECT", // SKU para mostrar uno en particular
        mixed: "MIXED" //Mezcla sites y SKUS
    }
};
/// <reference path="game.properties.js" />

/**
 * @namespace game
 */
var game = game || {};

/**
 * Manejo de URLs para las peticiones
 * @namespace
 * @requires game.properties.js
 */
game.request = function () {
  var VALUES = {
    cancelReserveClickAndCollect: "/product/CancelReserveClickAndCollect/{{locatorNumber}}/{{storeCode}}",
    cancelReserveUser: "/product/CancelReserveUser",
    completePayment: "/payments/CompletePayment",
    getApiStores: "/api/ApiStores/GetStores",
    getApiStoresByPostalPrefix: "/api/GetStores/{{postalPrefix}}",
    getClickAndCollectStock: "/product/GetClickAndCollectStock",
    getLoadFilters: "/buscar/LoadFilters/{{searchString}}",
    getSearchResults: "/resultados/{{searchString}}",
    getSearchResultsPage: "/buscar/{{searchString}}/{{page}}/{{title}}/{{view}}/{{loadScripts}}/{{orderType}}/{{onCache}}",
    getTaskListByType: "/atencion-al-cliente/SearchTaskByType",
    printReserveClickAndCollectStock: "/product/PrintReserveClickAndCollectStock",
    reserveClickAndCollectStock: "/product/ReserveClickAndCollectStock",
    saveUserTask: "/atencion-al-cliente/SaveTask",
    search: "/api/apisearch/Search",
    //searchAutocomplete: "/buscar/autocompletado",
    summaryCart: "/comprar/confirmacion"
  },

  /**
  * Valores para desarrollo
  * @readonly
  * @type {Object}
  */
  OVERRIDES = {
    // Desarrollo
  },

  /**
  * Obtiene la propiedad por nombre
  * @param {string} key Nombre de la propiedad
  * @returns {String} url para la petición
  */
  getRequest = function getRequest(key) {
    return OVERRIDES[key] || VALUES[key];
  },


  /**
  * Cancela una reserva de click anc collect
  * @param {Number} locatorNumber localizador
  * @param {Number} storeCode código de tienda
  * @returns {String} url para la petición
  */
  cancelClickAndCollectReserve = function cancelClickAndCollectReserve(locatorNumber, storeCode) {
    return getRequest("cancelReserveClickAndCollect").fastformat({ locatorNumber: locatorNumber, storeCode: storeCode });
  },


  /**
  * Cancela una reserva de un usuario
  * @param {Number} locatorNumber localizador
  * @param {Number} storeCode código de tienda
  * @returns {String} url para la petición
  */
  cancelReserveUser = function cancelReserveUser() {
    return getRequest("cancelReserveUser");
  },
      completePayment = function completePayment() {
    return getRequest("completePayment");
  },


  /**
  * Obtiene todas las tiendas
  * @returns {String} url para la petición
  */
  getStores = function getStores() {
    return getRequest("getApiStores");
  },


  /**
  * Obtiene todas las tiendas filtradas por postalPrefix
  * @param {string} postalPrefix Prefijo postal para filtrar tiendas
  * @returns {String} url para la petición
  */
  getStoresByPostalPrefix = function getStoresByPostalPrefix(postalPrefix) {
    return getRequest("getApiStoresByPostalPrefix").fastformat({ postalPrefix: postalPrefix });
  },


  /**
  * Obtiene el stock de un producto
  * @returns {String} url para la petición
  */
  getClickAndCollectStock = function getClickAndCollectStock() {
    return getRequest("getClickAndCollectStock");
  },


  /**
  * Obtiene todas las ventajas
  * @returns {String} url para la petición
  */
  getGiveaways = function getGiveaways() {
    return getRequest("getGiveaways");
  },


  /**
  *Lanza la busqueda con un valor, para obtener los filtros
  * @param {searchString} searchString Cadena de búsqueda
  * @returns {String} url para la petición
  */
  getLoadFilters = function getLoadFilters(searchString) {
    return getRequest("getLoadFilters").fastformat({ searchString: searchString });
  },


  /**
  *Lanza la busqueda con un valor
  * @param {searchString} searchString Cadena de búsqueda
  * @returns {String} url para la petición
  */
  getSearchResults = function getSearchResults(searchString) {
    return getRequest("getSearchResults").fastformat({ searchString: searchString });
  },


  /**
  *Lanza la busqueda con un valor
  * @param {String} searchString Cadena de búsqueda
  * @param {Number} page Número de página
  * @param {String} title el titulo de la busqueda
  * @param {Number} view tipo de vista
  * @param {Boolean} loadScripts si se cargan los scripts, sólo va a true en la primera página
  * @param {Number} orderType tipo de ordén
  * @param {Boolean} onCache si el resultado esta en cache
  * @returns {String} url para la petición
  */
  getSearchResultsPerPage = function getSearchResultsPerPage(searchString, page, title, view, loadScripts, orderType, onCache) {
    return getRequest("getSearchResultsPage").fastformat({ searchString: searchString, page: page, title: title, view: view, loadScripts: loadScripts, orderType: orderType, onCache: onCache });
  },


  /**
  * envia ok al   servicio web de finconsum
  * @returns {String} url para la petición
  */
  getTaskListByType = function getTaskListByType() {
    return getRequest("getTaskListByType");
  },
      printReserveClickAndCollectStock = function printReserveClickAndCollectStock() {
    return getRequest("printReserveClickAndCollectStock");
  },


  /**
  * Reserva un producto mediante click y recoger
  * @returns {String} url para la petición
  */
  reserveClickAndCollectStock = function reserveClickAndCollectStock() {
    return getRequest("reserveClickAndCollectStock");
  },
      saveUserTask = function saveUserTask() {
    return getRequest("saveUserTask");
  },


  /**
  *Lanza la busqueda con un valor
  * @returns {String} url para la petición
  */
  performSearch = function performSearch() {
    return getRequest("search");
  },


  ///**
  //* Obtiene los resultados de la búsqueda de autocompletados
  //* @returns {String} url para la petición
  //*/
  //getSearchAutoComplete = function () {
  //  return getRequest("searchAutocomplete");
  //},

  summaryCart = function summaryCart() {
    return getRequest("summaryCart");
  };

  return {
    cancelClickAndCollectReserve: cancelClickAndCollectReserve,
    cancelReserveUser: cancelReserveUser,
    completePayment: completePayment,
    getStores: getStores,
    getStoresByPostalPrefix: getStoresByPostalPrefix,
    getClickAndCollectStock: getClickAndCollectStock,
    getGiveaways: getGiveaways,
    getLoadFilters: getLoadFilters,
    getSearchResults: getSearchResults,
    getSearchResultsPerPage: getSearchResultsPerPage,
    getTaskListByType: getTaskListByType,
    printReserveClickAndCollectStock: printReserveClickAndCollectStock,
    reserveClickAndCollectStock: reserveClickAndCollectStock,
    saveUserTask: saveUserTask,
    performSearch: performSearch,
    //getSearchAutoComplete: getSearchAutoComplete,
    summaryCart: summaryCart
  };
}();
/* globals $, Fingerprint */
/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="../external/fingerprint/fingerprint.js" />
/// <reference path="game.properties.js" />
/// <reference path="game.storage.js" />
/// <reference path="game.ui.js" />
/// <reference path="game.api.js" />
/// <reference path="game.login.js" />
/// <reference path="game.calendar.js" />
/// <reference path="game.consumerfinance.js" />
/// <reference path="game.shoppings.js" />
/**
 * @namespace game
 */
var game = game || {};

game.layout = function () {
    'use strict';

    var __$document = $(document),
        Control = game.ui.Control,
        cookies = function () {
        var modalCookies = new Control("#modalCookies"),
            modalCookiesContent = new Control('#modalCookiesContent'),
            overlayCookies = new Control("#overlayCookies", { hideClass: "hide" }),


        // Muestra la ventana modal de política de cookies
        showCookiesPolicy = function showCookiesPolicy() {
            game.api.layout.cookiesPolicy({
                done: function done(response) {
                    if (response !== null) {
                        modalCookiesContent.html(response);
                    } else {
                        modalCookiesContent.notify("Se produjo un error inesperado, \n inténtelo de nuevo más tarde");
                    }
                },
                fail: function fail() {
                    modalCookiesContent.notify("Se produjo un error inesperado, \n inténtelo de nuevo más tarde");
                }
            });
        };

        //Cache de elementos DOM Jquery
        __$document.on('click', '#btnInfoCookies', function () {
            backgroundModal.fadeIn();
            modalCookies.fadeIn();
            showCookiesPolicy();
        });

        __$document.on('click', '#btnCloseModalCookie', function () {
            modalCookies.fadeOut("fast");
            backgroundModal.fadeOut();
        });

        //Cierra overlay de cookies y asume su aceptación
        __$document.on('click', '#btnOverlayCookiesClose', function (event) {
            event.preventDefault();
            overlayCookies.fadeOut();
            game.storage.setLocalItem(game.properties.getProperty("AcceptCookiesPolicy"), true);
        });

        return {
            closeModal: function closeModal() {
                return modalCookies.fadeOut();
            },
            showOverlay: function showOverlay() {
                overlayCookies.show();
            }
        };
    }(),


    // DOM Links
    backgroundModal = new Control(".background-modal", {
        fadeIn: function fadeIn() {
            __body.addClass('modal-open');

            backgroundModal._init().css({ display: 'block' });
            backgroundModal.animate({ opacity: 0.75 }, 300);
        },
        fadeOut: function fadeOut(options) {
            __body.removeClass('modal-open');
            this._fadeOut(options);
        }
    }),
        downloadDigital = function () {
        var modalDownloadDigital = new Control("#modalDownloadDigital"),
            btnModalDownloadDigital = new Control("#btnModalDownloadDigital"),
            btnDownloadDigital = new Control("#btnDownloadDigital"),
            chkDownloadDigital = new Control("#chkDownloadDogital"),
            selectDownloadDigital = new Control("#selectDownloadDigital"),
            loadingGameDigital = $("#loadingGameDigital", { hideClass: 'hide' }),


        // Muestra la ventana modal de GAME Digital
        showGameDigital = function showGameDigital() {
            loadingGameDigital.show();

            game.api.layout.gameDigital({
                done: function done(response) {
                    if (response) {
                        modalDownloadDigital.html(response);
                        modalDownloadDigital.fadeIn();
                        backgroundModal.fadeIn();
                    } else {
                        btnModalDownloadDigital.notify("Se produjo un error inesperado,\n inténtelo de nuevo más tarde");
                    }
                },
                fail: function fail() {
                    btnModalDownloadDigital.notify("Se produjo un error inesperado, \n inténtelo de nuevo más tarde");
                },
                always: function always() {
                    loadingGameDigital.hide();
                }
            });
        };

        __$document.on('click', "#btnSupportDigital", function () {
            //var page = game.utils.getBasePath() + "/game-digital/soporte";
            var page = "/atencion-al-cliente#contact-tabs-game-digital";
            if (document.location.pathname !== '/atencion-al-cliente') {
                document.location = page;
            } else {
                //game.login.showLogin(page, game.enums.callBackActionType.section);
                document.location = page;
                document.location.reload(true);
            }
        });

        __$document.on('click', "#btnCloseModalDownloadDigital", function () {
            modalDownloadDigital.fadeOut();
            backgroundModal.fadeOut();
        });

        __$document.on('click', "#btnDownloadDigital", function () {
            document.location = selectDownloadDigital.val();
        });

        __$document.on('click', "#chkDownloadDogital", function () {
            if (!chkDownloadDigital.checked()) {
                btnDownloadDigital.enabled(false);
            } else {
                btnDownloadDigital.enabled(true);
            }
        });

        //Muestra el modal Descarga digital
        __$document.on('click', "#btnModalDownloadDigital", showGameDigital);

        return {
            closeModal: function closeModal() {
                return modalDownloadDigital.fadeOut();
            }
        };
    }(),
        __body = new Control('html, body', {
        scrollTop: function scrollTop(value) {
            __body._init().scrollTop(value);
        }
    }),
        __mHeader = new Control('#m-header', {
        outerHeight: function outerHeight() {
            return __mHeader._init().outerHeight();
        }
    }),


    // Obtiene el parámetro x del la url de la página
    getURLParameter = function getURLParameter(param) {
        var pageURL = window.location.search.substring(1);
        var uRLVariables = pageURL.split('&');
        for (var i = 0; i < uRLVariables.length; i++) {
            var sParameterName = uRLVariables[i].split('=');
            if (sParameterName[0] === param) {
                return sParameterName[1];
            }
        }
    },


    // Inicialización de la clase layout

    closeModals = function closeModals() {
        var modals = [cookies, downloadDigital, game.calendar, game.cart, game.consumerFinance || { closeModal: function closeModal() {
                var landingModalContentChoose = new Control("#landing-modal-content-choose");landingModalContentChoose.fadeOut();
            } }, game.login, game.sat, game.stores, game.shoppings];

        modals.forEach(function (modal) {
            if (modal) modal.closeModal();
        });

        game.search.enableKeyboardEvents(true);

        backgroundModal.fadeOut("fast");
    },
        sundayDelivery = new Control('#sundayDelivery', { hideClass: 'hide' }),
        checkShipmentsUntilSunday = function checkShipmentsUntilSunday() {
        var d = new Date(),
            day = d.getDay(),
            hour = d.getHours(),
            isUntilSunday = day === 6 || day === 0 && hour < 13;

        sundayDelivery.toggle(isUntilSunday).parent().toggleClass('has-delivery', isUntilSunday);
        setTimeout(checkShipmentsUntilSunday, 30000);
    };

    $(function () {
        new Fingerprint();

        if (navigator.userAgent.match(/Trident\/7\./)) {
            $('body').on("mousewheel", function () {
                event.preventDefault();
                var wheelDelta = event.wheelDelta;
                var currentScrollPosition = window.pageYOffset;
                window.scrollTo(0, currentScrollPosition - wheelDelta);
            });
        }

        var cookiesAccepted = game.storage.getLocalItem(game.properties.getProperty("AcceptCookiesPolicy"));
        if (!cookiesAccepted) cookies.showOverlay();

        if (game.utils.hasQueryVariable("card")) {
            game.ui.alerts.add("Tienes  que vincular tu número de socio \n para poder financiar este producto.", "warning");
        }

        if (game.utils.hasQueryVariable("finan")) {
            game.ui.alerts.add("Tienes que tener tarjeta de socio \n para poder financiar este producto.", "warning");
        }

        // Comprobamos que exista afiliado o no
        var affiliatedId = getURLParameter("affiliatedId");

        // Si es así, lo guardamos en la cookie
        game.storage.setLocalItem(game.properties.getProperty("affiliatedId"), affiliatedId);

        checkShipmentsUntilSunday();
    });

    // Se ocultan todos los modales, si se añade uno nuevo hay que contemplarlo
    // se activan y desactivan los controles de teclado
    __$document.on('click', '.background-modal', closeModals);

    __$document.on('click', '[data-anchor-target]', function (event) {
        event.preventDefault();

        var target = document.querySelector(event.currentTarget.dataset.anchorTarget || event.currentTarget.href);

        if (!target) return;else {
            var newScroll = Math.max(0, document.body.scrollTop + (target.getBoundingClientRect().top - (__mHeader.outerHeight() || 0))),
                duration = game.responsive.isMobileBrowser ? 0 : 300;

            __body.scroll({ duration: duration, offset: newScroll });
        }
    });

    return {
        backgroundModal: {
            fadeIn: function fadeIn() {
                backgroundModal.fadeIn();
            },
            fadeOut: function fadeOut(options) {
                backgroundModal.fadeOut(options);
            }
        },
        closeModals: closeModals
    };
}();

game.api.layout = function () {
    var gameDigital = function gameDigital(deferredoptions, qunitcallback) {
        var ajaxoptions = {
            url: '/section/gamedigital',
            type: "GET"
        };

        return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
    },
        cookiesPolicy = function cookiesPolicy(deferredoptions, qunitcallback) {
        var ajaxoptions = {
            url: '/section/cookiespolicy',
            type: "GET"
        };

        return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
    };

    return {
        gameDigital: gameDigital,
        cookiesPolicy: cookiesPolicy
    };
}();
/* global escape, unescape */

/**
 * @namespace game
 */
var game = game || {};

game.cookie = function () {
    var _getCookie = function _getCookie(offset) {
        var endstr = document.cookie.indexOf(";", offset);
        if (endstr === -1) {
            endstr = document.cookie.length;
        }
        return unescape(document.cookie.substring(offset, endstr));
    },

    /**
    * Crea y maneja las cookies de la página
    *
    * Se requieren los dos primeros parámetros . Los otros, si se suministra , debe
     * Pasarse en el orden indicado anteriormente. Para omitir un campo opcional no utilizada ,
     * Utilizar nulo como un marcador de posición . Por ejemplo, para llamar setCookie utilizando el nombre ,
     * El valor y la ruta , que serían código:
    *
    *     setCookie ("myCookieName", "myCookieValue", null, "/");
    *
    * Note that trailing omitted parameters do not require a placeholder.
    *
    * To set a secure cookie for path "/myPath", that expires after the
    * current session, you might code:
    *
    *     setCookie (myCookieVar, cookieValueVar, null, "/myPath", null, true);
    *
    * @param {string} name String object containing the cookie name.
    * @param {string} value String object containing the cookie value. May
    *     contain any valid string characters.
    * @param {int} maxAge Int containing the number of seconds for the expiration date of the
    *     cookie. If omitted or null, expires the cookie at the end of the
    *     current session.
    * @param {string} path String object indicating the path for which the
    *     cookie is valid. If omitted or null, uses the path of the calling
    *     document.
    * @param {string} domain String object indicating the domain for which the
    *     cookie is valid. If omitted or null, uses the domain of the calling
    *     document.
    * @param {boolean} secure Boolean value indicating whether cookie
    *     transmission requires a secure channel (HTTPS).
    */
    setCookie = function setCookie(name, value, maxAge, path, domain, secure) {
        if (value === undefined || value === null) {
            deleteCookie(name, path, domain);
            return;
        }
        // Instead of providing expires, we calculate it from max_age and set both
        var expires = null;
        if (maxAge) {
            expires = new Date();
            expires.setTime(expires.getTime() + maxAge * 1000);
        }
        document.cookie = name + "=" + escape(value) + (maxAge ? "; max-age=" + maxAge : "") + (expires ? "; expires=" + expires.toGMTString() : "") + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + (secure ? "; secure" : "");
    },


    /**
    * Return the value of the cookie specified by name.
    *
    * @param {string} name The cookie name.
    * @return {string} The cookie value, or null if the cookie does not exist.
    */
    getCookie = function getCookie(name) {
        var arg = name + "=",
            alen = arg.length,
            clen = document.cookie.length,
            i = 0;

        while (i < clen) {
            var j = i + alen;
            if (document.cookie.substring(i, j) === arg) {
                return _getCookie(j);
            }
            i = document.cookie.indexOf(" ", i) + 1;
            if (i === 0) {
                break;
            }
        }
        return null;
    },

    /**
    * Delete a cookie (sets expiration date to start of epoch).
    *
    * @param {string} name String object containing the cookie name.
    * @param {string} path String object containing the path of the cookie to
    *     delete. This MUST be the same as the path used to create the cookie,
    *     or null/omitted if no path was specified when creating the cookie.
    * @param {string} domain String object containing the domain of the cookie
    *     to delete. This MUST be the same as the domain used to create the
    *     cookie, or null/omitted if no domain was specified when creating the
    *     cookie.
    */
    deleteCookie = function deleteCookie(name, path, domain) {
        if (getCookie(name)) {
            document.cookie = name + "=" + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + "; max-age=0";
        }
    };

    return {
        setCookie: setCookie,
        getCookie: getCookie,
        deleteCookie: deleteCookie,
        CLASS_NAME: "Game.Cookie"
    };
}();
/// <reference path="game.cookie.js" />

/**
 * @namespace game
 */
var game = game || {};

/**
 * HTML5 LocalStorage / SessionStorage recubrimiento game
 *
 * @namespace
 * @requires game.cookie.js para fallback 
 */
game.storage = {
    /**
    * Comprueba si el navegador tiene la función localStorage en correcto funcionamiento y sino almacenará los datos en Cookie
     * @returns {Boolean} verdadero si el navegador tiene la función localStorage
    */
    hasStorage: function hasStorage() {
        try {
            localStorage.setItem("ls", "ls");
            localStorage.removeItem("ls");
            return true;
        } catch (exception) {
            return false;
        }
    },

    /**
    * Retorna el valor especificado por la clave del localStorage
    *
    * @param {string} key El nombre de la clave
    * @returns {string|number|boolean|object} El valor de la clave, o null si no existe o ha expirado
    */
    getLocalItem: function getLocalItem(key) {
        return this.getItem("localStorage", key);
    },

    /**
    * Retorna el valor especificado por la clave del sessionStorage
    *
    * @param {string} key El nombre de la clave
    * @returns {string|number|boolean|object} El valor de la clave, o null si no existe o ha expirado
    */
    getSessionItem: function getSessionItem(key) {
        return this.getItem("sessionStorage", key);
    },

    /**
    * Retorna el objeto seleccionado por la clave
    *
    * @param {string} storageName nombre del almacen
    * @param {string} key El nombre de la clave
    * @returns {string|number|boolean|object} delvuelve el valor almacenado
    * @private
    */
    getItem: function getItem(storageName, key) {
        var storage = window[storageName];
        if (storage && this.hasStorage()) {
            // Check item expiration
            var now = new Date().getTime();
            if (storage[key] !== undefined && storage[key] !== null) {
                try {
                    var obj = JSON.parse(storage[key]);
                    if (obj.expires === undefined || obj.expires === null || now <= obj.expires) {
                        // Item found
                        return obj.value;
                    } else {
                        // Item expired, remove it
                        storage.removeItem(key);
                    }
                } catch (err) {
                    // Error parsing JSON
                }
            }
        } else {
            return game.cookie.getCookie(key);
        }
        return null;
    },

    /**
    * Stores a value for the given key.
    *
    * @param {string} key The name of the key.
    * @param {string|number|boolean|object} value The value to be stored for
    *     the key.
    * @param {number} maxAge The value validity time in seconds.
    */
    setLocalItem: function setLocalItem(key, value, maxAge) {
        this.setItem("localStorage", key, value, maxAge);
    },

    /**
    * Stores a value for the given key.
    *
    * @param {string} key The name of the key.
    * @param {string|number|boolean|object} value The value to be stored for
    *     the key.
    * @param {number} maxAge The value validity time in seconds.
    */
    setSessionItem: function setSessionItem(key, value, maxAge) {
        this.setItem("sessionStorage", key, value, maxAge);
    },

    /**
    * Stores a value for the given key.
    *
    * @param {string} storageName nombre del almacen
    * @param {string} key El nombre de la clave
    * @param {string|number|boolean|object} value valor a guardar
    * @param {number} maxAge The value validity time in seconds.
    * @private
    */
    setItem: function setItem(storageName, key, value, maxAge) {
        var storage = window[storageName];
        if (storage && this.hasStorage()) {
            // Persistent item with expiration
            var obj = {
                value: value,
                expires: maxAge ? new Date().getTime() + maxAge * 1000 : undefined
            };
            // Store item
            try {
                var json = JSON.stringify(obj);
                storage[key] = json;
            } catch (err) {
                // Error serializing JSON
            }
        } else {
            if (storageName === "sessionStorage") {
                game.cookie.setCookie(key, value, maxAge, "/"); // Volatile cookie
            } else {
                if (maxAge) {
                    game.cookie.setCookie(key, value, maxAge, "/"); // Volatile cookie
                } else {
                    game.cookie.setCookie(key, value, 10 * 365 * 24 * 3600, "/"); // "Persistent" cookie, for 10 years
                }
            }
        }
    },

    /**
    * Deletes the stored value for the given key.
    *
    * @param {string} key The name of the key.
    */
    deleteLocalItem: function deleteLocalItem(key) {
        this.deleteItem("localStorage", key);
    },

    /**
    * Deletes the stored value for the given key.
    *
    * @param {string} key The name of the key.
    */
    deleteSessionItem: function deleteSessionItem(key) {
        this.deleteItem("sessionStorage", key);
    },

    /**
    * Deletes the stored value for the given key.
    *
    * @param {string} storageName nombre del almacen
    * @param {string} key El nombre de la clave
    * @private
    */
    deleteItem: function deleteItem(storageName, key) {
        var storage = window[storageName];
        if (storage) {
            // Remove item
            storage.removeItem(key);
        } else {
            game.cookie.deleteCookie(key, "/");
        }
    },

    /**
    * Deletes all expired values.
    *
    * @private
    */
    cleanup: function cleanup() {
        var self = game.storage;

        var storage = window.localStorage;
        if (storage) {
            for (var x = 0; x < storage.length; x++) {
                // Check item expiration, remove it if expoired
                var akey = storage.key(x);
                self.getItem(storage, akey);
            }
        }

        storage = window.sessionStorage;
        if (storage) {
            for (var i = 0; i < storage.length; i++) {
                // Check item expiration, remove it if expoired
                var key = storage.key(i);
                self.getItem(storage, key);
            }
        }
    },

    CLASS_NAME: "Game.Storage"
};

// Do a cleanup on load and on unload
game.storage.cleanup();

if (window.addEventListener) {
    window.addEventListener('unload', game.storage.cleanup, false);
} else if (window.attachEvent) {
    window.attachEvent('onunload', game.storage.cleanup);
}
/// <reference path="game.api.js" />

var game = game || {
  api: {}
};

game.api.cart = function () {
  "use strict";

  var refreshTooltip = function refreshTooltip(deferredoptions, qUnitCallback) {
    var ajaxOptions = { url: "/Cart/Tooltip" };

    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      addItems = function addItems(skus, sender, promotionId, preorderId, preorderLocatorNumber, affiliatedId, storeCode, dataLink, serialNumber, deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        affiliatedId = null,
        ajaxOptions = {
      url: "/Cart/AddItems", type: "POST",
      data: { skus: skus, sender: sender, promotionId: promotionId, affiliatedId: affiliatedId, preorderId: preorderId, preorderLocatorNumber: preorderLocatorNumber, storeCode: storeCode, dataLink: dataLink, serialNumber: serialNumber, __RequestVerificationToken: __RequestVerificationToken }
    };
    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      addPack = function addPack(sku, listGroup1, listGroup2, skus, deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxOptions = {
      url: skus ? '/Cart/AddPackExtended' : '/Cart/AddPack', type: "POST", cache: false,
      data: { sku: sku, listGroup1: listGroup1, listGroup2: listGroup2, skus: skus, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      deleteItem = function deleteItem(itemUid, deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxOptions = {
      url: '/Cart/DeleteItem', type: "POST",
      data: { itemUid: itemUid, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      clean = function clean(deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxOptions = {
      url: '/Cart/Clean', type: "POST",
      data: { __RequestVerificationToken: __RequestVerificationToken }
    };
    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      refreshShoppingList = function refreshShoppingList(deferredoptions, qUnitCallback) {
    var ajaxOptions = { url: "/Cart/ShoppingList" };

    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      refreshNotAvailableShoppingList = function refreshNotAvailableShoppingList(deferredoptions, qUnitCallback) {
    var ajaxOptions = { url: "/Cart/NotAvailableShoppingList" };

    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      setItemAmount = function setItemAmount(itemUid, amount, deferredoptions, qunitcallback) {
    var token = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/Cart/SetItemAmount",
      type: "POST",
      //headers: game.api.getHeaders(),
      data: {
        itemUid: itemUid,
        amount: amount,
        __RequestVerificationToken: token
      }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      addPromotionalCode = function addPromotionalCode(promotionalCode, deferredoptions, qunitcallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/Cart/AddPromotionalCode", type: "POST",
      data: { promotionalCode: promotionalCode, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  };

  return {
    refreshTooltip: refreshTooltip,
    addItems: addItems,
    addPack: addPack,
    deleteItem: deleteItem,
    clean: clean,
    refreshShoppingList: refreshShoppingList,
    refreshNotAvailableShoppingList: refreshNotAvailableShoppingList,
    setItemAmount: setItemAmount,
    addPromotionalCode: addPromotionalCode
  };
}();
/// <reference path="game.api.js" />

var game = game || {
  api: {}
};

game.api.address = function () {
  var getCities = function getCities(provinceCode, deferredoptions, qunitcallback) {
    var ajaxoptions = { url: "/Address/GetCities", data: { provinceCode: provinceCode } };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      getLocations = function getLocations(postalCode, deferredoptions, qunitcallback) {
    var ajaxoptions = { url: "/Address/GetLocations", data: { postalCode: postalCode } };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      addDeliveryAddress = function addDeliveryAddress(address, deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: '/Address/AddDeliveryAddress',
      type: "POST",
      //headers: game.api.getHeaders(),
      //contentType: 'application/json; charset=utf-8',
      data: Object.assign({}, game.api.formData('address', address), { __RequestVerificationToken: __RequestVerificationToken })
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qUnitCallback);
  },
      summaryDeliveryAddress = function summaryDeliveryAddress(address, deferredoptions, qunitcallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/purchase/SummaryDeliveryAddress",
      type: "POST",
      //contentType: 'application/json; charset=utf-8',
      //traditional: true,
      data: Object.assign({}, game.api.formData('address', address), { __RequestVerificationToken: __RequestVerificationToken })
    };
    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      deleteDeliveryAddress = function deleteDeliveryAddress(addressId, deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: '/Address/DeleteDeliveryAddress',
      type: "POST",
      //headers: game.api.getHeaders(),
      data: { addressId: addressId, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qUnitCallback);
  },
      getDeliveryAddress = function getDeliveryAddress(addressId, deferredoptions, qUnitCallback) {
    var ajaxoptions = { url: '/Address/GetDeliveryAddress', data: { addressId: addressId } };

    return game.api.ajax(ajaxoptions, deferredoptions, qUnitCallback);
  },
      setDefaultDeliveryAddress = function setDefaultDeliveryAddress(addressId, deferredoptions, qUnitCallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: '/Address/SetDefaultDeliveryAddress',
      type: "POST",
      //headers: game.api.getHeaders(),
      //contentType: 'application/json; charset=utf-8',
      data: { addressId: addressId, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qUnitCallback);
  };

  return {
    getCities: getCities,
    getLocations: getLocations,
    addDeliveryAddress: addDeliveryAddress,
    summaryDeliveryAddress: summaryDeliveryAddress,
    deleteDeliveryAddress: deleteDeliveryAddress,
    getDeliveryAddress: getDeliveryAddress,
    setDefaultDeliveryAddress: setDefaultDeliveryAddress
  };
}();
/* globals $ */

/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="game.api.js" />
/// <reference path="game.enums.js" />
/// <reference path="game.layout.js" />
/// <reference path="game.login.js" />
/// <reference path="game.navigation.js" />
/// <reference path="game.properties.js" />
/// <reference path="game.request.js" />
/// <reference path="game.ui.js" />
/// <reference path="game.utils.js" />

/**
 * @namespace game
 */
var game = game || {};

game.cart = function () {
  "use strict";

  var
  //#region VARIABLES
  __areTaskInProgress = false,
      // Si hay alguna petición en progreso
  __$document = $(document),

  //#endregion

  //#region Controls
  Control = game.ui.Control,
      summaryCartHeader = new Control("#summaryCartHeader"),
      summary = function () {
    var tooltipSummaryBasket = new Control("#toolTipSummaryBasket", { hideClass: "hide" }),
        _isOverCartSummary = false,
        //Si el ratón está sobre el summary del carro
    _isOverCartHeader = false,
        // Si el ratón está sobre el icono del carro

    onRateLimitMouseoverCartHeader = function onRateLimitMouseoverCartHeader() {
      if (!_isOverCartSummary && !_isOverCartHeader) {
        tooltipSummaryBasket.hide();
      }
    },


    // Vuelve a cargar el tooltip del carrito de la compra y el label de envío gratis. 
    refreshTooltip = function refreshTooltip() {
      game.api.cart.refreshTooltip({ done: function done(response) {
          summaryCartHeader.html(response);
        } });
    },


    // Borra el contenido del carro de la compra
    clean = function clean() {
      game.api.cart.clean({
        done: refreshTooltip,
        fail: { notAuthenticated: function notAuthenticated() {
            game.login.showLogin();
          }, error: null }
      });
    };

    // Events
    __$document.on('mouseover', summaryCartHeader.selector, function () {
      tooltipSummaryBasket.show();
      _isOverCartHeader = true;

      game.utils.rateLimit("mouseoverCartHeader", 300, onRateLimitMouseoverCartHeader);
    });
    __$document.on('mouseout', summaryCartHeader.selector, function () {
      _isOverCartHeader = false;

      game.utils.rateLimit("mouseoverCartHeader", 300, onRateLimitMouseoverCartHeader);
    });
    __$document.on('click', summaryCartHeader.selector, function () {
      tooltipSummaryBasket.show();
    });

    __$document.on('mouseover', "#toolTipSummaryBasket", function () {
      _isOverCartSummary = true;
    });
    __$document.on('mouseout', "#toolTipSummaryBasket", function () {
      _isOverCartSummary = false;
      game.utils.rateLimit("mouseoverCartHeader", 300, onRateLimitMouseoverCartHeader);
    });

    __$document.on('click', ".icon-trash", function () {
      deleteItem(this.dataset.uid);
    });

    __$document.on('click', "#clearBasket", clean);

    //Redirection to Summary Cart
    __$document.on('click', "#go-to-cart", function () {
      game.navigation.redirectionTo("/comprar");
    });

    return {
      refreshTooltip: refreshTooltip,
      show: function show() {
        tooltipSummaryBasket.show();
      }
    };
  }(),
      modalAddToCart = function () {
    var modalAddToCart = new Control("#modalAddToCart"),


    // Muestra la ventana de productos relacionados al añadir al carro. 
    loadAddedCartRelated = function loadAddedCartRelated(html) {
      modalAddToCart.html(html);

      modalAddToCart.fadeIn();
      game.layout.backgroundModal.fadeIn();
    };

    __$document.on('click', "#btModalBuyEnd", function () {
      var urlComprar = game.utils.getBasePath() + "/comprar"; //Página del resumen de compra

      game.navigation.redirectionTo(urlComprar);
    });

    __$document.on('click', "#btnModalAddToCartClose, #btModalContinueBuy", function () {
      modalAddToCart.fadeOut();
      game.layout.closeModals();
    });

    return {
      load: loadAddedCartRelated,
      close: function close() {
        modalAddToCart.fadeOut();
      }
    };
  }(),
      buyButtons = function () {
    __$document.on('click', ".buy-button, .reserveBuy", function (event) {
      var data = this.dataset,
          sku = data.sku,
          preorderId = data.preorderid || data.campaingId,
          preorderLocatorNumber = data.preorderlocatornumber || data.locatorId,
          sender = data.sender,
          dataLink = data.dataLink,
          promotionId = data.promotionid,
          storeCode = data.storeCode;

      if (__areTaskInProgress || !sku) return;

      addItems(sku, sender, promotionId, preorderId, preorderLocatorNumber, storeCode, dataLink);

      $(this).trigger('addItemsDone');
    });

    return {
      attachBuyEvents: function attachBuyEvents() {
        return;
      }
    };
  }(),


  // Añade un producto al carro de la compra
  // @param {Number} sku Sku del producto
  // @param {Number} [sender] El origen desde donde se agrega al carro
  // @param {Number} [promotionId] Código de promoción para las ofertas flash (Identificador de promoción [Opcional] es para los productos desde ofertas flash, en el resto va a null)
  // @param {Number} [preorderId] El preorderId del producto si es reserva (Para las reservas es necesario este parámetro)
  // @param {Number} [preorderLocatorNumber] El preorderLocatorNumber del producto si es reserva (Este parámetro solo se rellena desde la zona de socios, cuando finaliza la compra de una reserva, el resto a null)
  addItems = function addItems(sku, sender, promotionId, preorderId, preorderLocatorNumber, storeCode, dataLink, serialNumber) {
    if (__areTaskInProgress) return;
    __areTaskInProgress = true;

    var // TODO: Harcodeamos de momento el affiliatedId a null para resolver el problema de las reservas.
    affiliatedId = null; // game.storage.getLocalItem(Game.Properties.getProperty("affiliatedId")) || null;

    sender = sender || null;
    promotionId = promotionId || null;
    preorderId = preorderId || null;
    preorderLocatorNumber = preorderLocatorNumber || null, storeCode = storeCode || null;

    game.api.cart.addItems(sku, sender, promotionId, preorderId, preorderLocatorNumber, affiliatedId, storeCode, dataLink, serialNumber, {
      done: function done(response) {
        modalAddToCart.load(response);
        summary.refreshTooltip();
      },
      fail: {
        notAuthenticated: function notAuthenticated() {
          var type = preorderId ? game.enums.callBackActionType.reserve : game.enums.callBackActionType.product;
          //if (preorderId) {
          game.login.showLogin(sku, sender, promotionId, preorderId, preorderLocatorNumber, storeCode, dataLink, type);
          //} else {
          //    game.login.showLogin(sku, sender, promotionId, game.enums.callBackActionType.product);
          //}
        }
      },
      always: function always() {
        __areTaskInProgress = false;
      }
    });
  },


  // Añade un producto al carro de la compra
  // @param {Number} sku Sku del producto
  // @param {Number} [preorderId] El preorderId del producto si es reserva
  // @param {Number} [preorderLocatorNumber] El preorderLocatorNumber del producto si es reserva
  addPack = function addPack(sku, listGroup1, listGroup2, skuList) {
    if (__areTaskInProgress) return;
    __areTaskInProgress = true;

    game.api.cart.addPack(sku, listGroup1, listGroup2, skuList, {
      done: function done(response) {
        modalAddToCart.load(response);
        summary.refreshTooltip();
      },
      fail: { notAuthenticated: function notAuthenticated() {
          game.login.showLogin(sku, listGroup1, listGroup2, skuList, game.enums.callBackActionType.pack);
        } },
      always: function always() {
        __areTaskInProgress = false;
      }
    });
  },


  // Elimina un elemento del carrito de la compra
  // @param {String} itemUid Identificador del elemento del carrito que se procederá a eliminar
  deleteItem = function deleteItem(itemUid, deferredoptions) {
    if (__areTaskInProgress) return;
    __areTaskInProgress = true;

    game.api.cart.deleteItem(itemUid, deferredoptions || {
      done: function done() {
        summary.refreshTooltip();
      },
      fail: { notAuthenticated: function notAuthenticated() {
          game.login.showLogin();
        } },
      always: function always() {
        __areTaskInProgress = false;
      }
    });
  };

  return {
    closeModal: modalAddToCart.close,
    addItems: addItems,
    addPack: addPack,
    deleteItem: deleteItem,
    refreshTooltip: summary.refreshTooltip,
    attachBuyEvents: buyButtons.attachBuyEvents
  };
}();
/* globals $, grecaptcha*/

/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="game.api.js" />
/// <reference path="game.cart.js" />
/// <reference path="game.layout.js" />
/// <reference path="game.navigation.js" />
/// <reference path="game.properties.js" />
/// <reference path="game.request.js" />
/// <reference path="game.search.js" />
/// <reference path="game.storage.js" />
/// <reference path="game.stores.js" />
/// <reference path="game.ui.js" />

/**
 * @namespace game
 */
var game = game || {};

game.login = function () {
  var __$document = $(document),
      __GoogleCaptchaSiteKey = null,
      Control = game.ui.Control,
      loginCallbackAction = {
    type: null, //Acción que se realizará tras hacer login.
    args: null // Argumentos de callback
  },
      messages = function () {
    __$document.on('keyup', "#txtLoginUser, #txtLoginPassword, #txtRegisterMail, #txtRecoverPasswordEmail", function () {
      if (this.value) game.ui.alerts.close();
      return false;
    });

    return {
      errorFieldsEmpty: "Los campos no pueden estar vacios.",
      errorEmailNotValid: "El email no es válido",
      errorSystemFailure: "Se ha producido un error de sistema, inténtelo más tarde.",
      errorPasswordFormatInvalid: "El formato de contraseña no es válido.",
      errorPasswordsDontMatch: "Las contraseñas no coinciden."
    };
  }(),
      modals = function () {
    var modals = [new Control(".modalGame-login-register"), //Modal login
    new Control(".modalGame-recovery-pass"), //Modal recuperar contraseña
    new Control(".modalGame-confirm-pass"), //Modal confirmación alta usuario
    new Control("#modalGame-closeSession") //Modal cierre de sesión
    ],
        map = { login: 0, recoveryPass: 1, confirmPass: 2, txtCloseSession: 3 },


    // Oculta todos los modales
    fadeOutAll = function fadeOutAll(background, velocity) {
      if (background) {
        game.layout.backgroundModal.fadeOut(velocity);
      }

      modals.forEach(function (element) {
        element.fadeOut();
      });
    },
        fadeIn = function fadeIn(modal, background) {
      if (background) game.layout.backgroundModal.fadeIn();
      modals[isNaN(modal) ? map[modal] : modal].fadeIn();
    },


    // Muestra la ventana modal del login
    showLogin = function showLogin() {

      if (arguments.length) {
        if (arguments[0].originalEvent) {
          arguments[0].stopPropagation();
          arguments[0].preventDefault();
          loginCallbackAction.type = null;
          loginCallbackAction.args = null;
        } else {
          loginCallbackAction.type = arguments[arguments.length - 1];
          loginCallbackAction.args = arguments;
        }
      }

      game.ui.alerts.close();

      fadeIn(map.login, true);

      headerMessage.show(loginCallbackAction.type || 'Ops, es necesario logarse para acceder a esta sección');
    },


    // Muestra el div de recuperar contraseña
    showRememberPassword = function showRememberPassword() {
      fadeOutAll(false);
      fadeIn(map.recoveryPass, true);
    };

    __$document.on('click', "#btnCloseModalLogin, #btnCloseModalCookie, #btnCloseModalRecoverPassword, #btnCloseModalEndSession", function () {
      fadeOutAll(true);
    });

    __$document.on('click', "#btnCloseModalConfirmRegistration", function () {
      modals.fadeOutAll(true);
      //Forzamos autologin
      loginForm.doAutoLogin(registerForm.loginData());
    });

    //Cabecera pulsan sobre login
    __$document.on('click', "li.login, .sign, #header .login", showLogin);

    //Click en recuperar password
    __$document.on('click', '#btnForgetPassword', showRememberPassword);

    return {
      fadeIn: fadeIn,
      fadeOut: function fadeOut(modal, background) {
        if (background) game.layout.backgroundModal.fadeOut();
        modals[map[modal]].fadeOut();
      },
      showLogin: showLogin,
      fadeOutAll: fadeOutAll
    };
  }(),
      loginForm = function () {
    var tooltipMember = new Control("#itemMember"),
        txtLoginUser = new Control("#txtLoginUser", {
      isValid: function isValid() {
        var value = txtLoginUser.val();

        if (!value || !game.utils.validateEmail(value)) {
          game.ui.alerts.add(!value ? messages.errorFieldsEmpty : messages.errorEmailNotValid, 'warning');
          return false;
        }

        return true;
      }
    }),
        txtLoginPassword = new Control("#txtLoginPassword", {
      isValid: function isValid() {
        if (!txtLoginPassword.val()) {
          game.ui.alerts.add(messages.errorFieldsEmpty, 'warning');
          return false;
        }
        return true;
      }
    }),
        submit = function submit() {
      $("#btnLoginSubmit").click();
    },
        send = function send() {
      game.ui.alerts.close();
      if (game.ui.validateControls([txtLoginUser, txtLoginPassword])) {
        if ($('#recaptcha').data('rendered')) grecaptcha.execute();else submit();
        return true;
      }
      return false;
    },


    // Realiza el login tras el registro
    doAutoLogin = function doAutoLogin(loginData) {
      //Colocamos los datos de registro en el formulario de login 
      txtLoginUser.val(loginData.user);
      txtLoginPassword.val(loginData.password);
      submit();
    },
        actionTypes = function () {
      var actionTypes = {};
      actionTypes[game.enums.callBackActionType.section] = function (url) {
        document.location = url;
      };
      actionTypes[game.enums.callBackActionType.product] = function () {
        game.cart.addItems.apply(this, arguments);
      };
      actionTypes[game.enums.callBackActionType.pack] = function () {
        game.cart.addPack.apply(this, arguments);
      };
      actionTypes[game.enums.callBackActionType.reserve] = function () {
        game.cart.addItems.apply(this, arguments);
      };
      actionTypes[game.enums.callBackActionType.clickAndCollect] = function () {
        game.stores.showClickAndPick.apply(this, arguments);
      };
      actionTypes[game.enums.callBackActionType.clickAndCollectReserveProduct] = function () {
        game.stores.reserveProduct.apply(this, arguments);
      };
      actionTypes[game.enums.callBackActionType.addComment] = null;
      actionTypes[game.enums.callBackActionType.task] = function () {
        document.location.hash = arguments[0];
        document.location.reload(true);
      };
      actionTypes[game.enums.callBackActionType.sendNotifyRequest] = function () {
        game.product.sendNotifyRequest.apply(this, arguments);
      };
      actionTypes[game.enums.callBackActionType.showPreordersModal] = function () {
        game.stores.showPreordersModal.apply(this, arguments);
      };

      return actionTypes;
    }(),
        loadingLogin = new Control("#loadingLogin", { hideClass: 'hide' }),
        //bullet cargando cuando realizamos login

    always = function always() {
      loadingLogin.hide();
      game.cart.refreshTooltip();
    },
        onLoginBegin = function onLoginBegin() {
      loadingLogin.show();
      game.login.isAutenticathed = false;
    },


    // Obtiene la respuesta del login si ha sido o no correcta
    onResponseLogin = function onResponseLogin(result, textStatus, xHR) {
      //Guardamos en cookie para recordar aunque finalice sesión sen server
      if (result.StatusCode && result.StatusCode !== 200) {
        xHR.status = result.StatusCode;
        onErrorLogin(xHR, result.ErrorThrown, result.ErrorThrown);
      } else {
        game.api.login.refreshTooltip({
          done: function done(response) {
            tooltipMember.html(response);
            $(document).trigger("forceHeaderUpdate");

            var newToken = tooltipMember.find('[name=__RequestVerificationToken]').val();
            $('input[name="__RequestVerificationToken"]').each(function () {
              this.value = newToken;
            });

            game.login.isAutenticathed = true;

            // ocultamos los modales
            modals.fadeOutAll(true, 'fast');

            var actionType = actionTypes[loginCallbackAction.type];
            if (actionType) {
              actionType.apply(this, loginCallbackAction.args);
            } else if (location.search.startsWith('?login')) {
              location.href = unescape(location.search.split('=')[1]);
            }

            always();
          }
        });
      }
    },
        onErrorLogin = function onErrorLogin(xHR, textStatus, errorThrown) {
      if (xHR.status === 403) {
        if (!$('#recaptcha').data('rendered')) {
          grecaptcha.render('recaptcha', {
            'sitekey': __GoogleCaptchaSiteKey,
            'size': 'invisible',
            'callback': submit
          });
          $('#recaptcha').data('rendered', true);
        } else {
          grecaptcha.reset();
        }
      } else {
        if ($('#recaptcha').data('rendered')) grecaptcha.reset();
      }
      game.ui.alerts.add(errorThrown, 'warning');

      game.login.isAutenticathed = false;

      always();
    };

    //Modal pulsan sobre login
    __$document.on('click', "#btnLogin", send);

    __$document.on('keydown', '#txtLoginUser, #txtLoginPassword, #btnLogin', function (event) {
      if (event.keyCode !== 13) return true;
      send();
      event.preventDefault();
      event.stopPropagation();
      return false;
    });

    return {
      send: send,
      doAutoLogin: doAutoLogin,
      onLoginBegin: onLoginBegin,
      onResponseLogin: onResponseLogin,
      onErrorLogin: onErrorLogin
    };
  }(),
      registerForm = function () {
    var txtRegisterMail = new Control("#txtRegisterMail", {
      isValid: function isValid() {
        var value = txtRegisterMail.val();

        if (!value || !game.utils.validateEmail(value)) {
          game.ui.alerts.add(!value ? messages.errorFieldsEmpty : messages.errorEmailNotValid, 'warning');
          return false;
        }

        return true;
      }
    }),
        txtRegisterCode = new Control("#txtRegisterCode", {
      isValid: function isValid() {
        if (!txtRegisterCode.val()) {
          game.ui.alerts.add(messages.errorFieldsEmpty, 'warning');
          return false;
        }

        return true;
      }
    }),
        txtRegisterPassword = new Control("#txtRegisterPassword", {
      isValid: function isValid() {
        if (!txtRegisterPassword.val()) {
          game.ui.alerts.add(messages.errorFieldsEmpty, 'warning');
          return false;
        }

        return true;
      }
    }),
        txtRegisterPasswordBis = new Control("#txtRegisterPasswordBis", {
      isValid: function isValid() {
        if (txtRegisterPassword.val() !== txtRegisterPasswordBis.val()) {
          game.ui.alerts.add(messages.errorPasswordsDontMatch, 'warning');
          return false;
        }

        return true;
      }
    }),
        loadingRegistering = new Control("#loadingRegistering", { hideClass: 'hide' }),
        //bullet cargando cuando realizamos registro

    // Valida los campos de registro
    validateRegisterFields = function validateRegisterFields() {
      return txtRegisterCode.isValid() && txtRegisterPassword.isValid() && txtRegisterPasswordBis.isValid();
    },
        send = function send() {
      game.ui.alerts.close();

      if (validateRegisterFields()) {
        createWebUser(txtRegisterMail.val(), txtRegisterPassword.val(), txtRegisterCode.val());
      }
    },


    // Crea un usuario web
    createWebUser = function createWebUser(email, password, code) {
      loadingRegistering.show();

      game.api.login.createWebUser(email, password, code, {
        done: function done() {
          modals.fadeIn('confirmPass', false);
          modals.fadeOut('login', false);

          //Autologin
          loginForm.doAutoLogin(registerForm.loginData());
        },
        always: function always() {
          loadingRegistering.hide();
        }
      });
    },
        frmRegisterFirstStep = new Control("#frmRegisterFirstStep", { hideClass: 'hide' }),
        frmRegisterLastStep = new Control("#frmRegisterLastStep", { hideClass: 'hide' }),

    //msgSendEmailError = new Control("#msgSendEmailError"),
    //msgReviewEmail = new Control("#msgReviewEmail"),
    btnRegister = new Control('#btnRegister'),


    // Envia el email para la validación del usuario
    sendEmailRegistration = function sendEmailRegistration() {
      loadingRegistering.show();
      //msgReviewEmail.hide();
      //msgSendEmailError.hide();

      if (txtRegisterMail.isValid()) {

        game.api.login.sendRegistrationEmail(txtRegisterMail.val(), {
          done: function done() {
            frmRegisterFirstStep.hide();
            frmRegisterLastStep.show();
          },
          always: function always() {
            loadingRegistering.hide();
          }
        });
      } else {
        game.ui.alerts.add("Revisa el email");
        //msgReviewEmail.show();
      }
    };

    __$document.on('click', "#btnContinueRegister", sendEmailRegistration);

    __$document.on('keydown', '#txtRegisterMail, #btnContinueRegister', function (event) {
      if (event.keyCode !== 13) return true;
      sendEmailRegistration();
      event.preventDefault();
      event.stopPropagation();
      return false;
    });

    __$document.on('click', "#btnBackRegister", function () {
      frmRegisterFirstStep.show();
      frmRegisterLastStep.hide();
    });

    //Modal pulsan sobre registro
    __$document.on('click', "#btnRegister", send);

    __$document.on('keydown', '#txtRegisterCode, #txtRegisterPassword, #txtRegisterPasswordBis, #btnContinueRegister', function (event) {
      if (event.keyCode !== 13) return true;
      send();
      event.preventDefault();
      event.stopPropagation();
      return false;
    });

    //Comprobar checkbox de aceptación de condiciones para registro
    __$document.on('click', "#chkAceptConditionsLegal", function () {
      btnRegister.enabled(this.checked);
    });

    return {
      loginData: function loginData() {
        return { user: txtRegisterMail.val(), password: txtRegisterPassword.val() };
      },
      send: send
    };
  }(),
      rememberPasswordForm = function () {
    var txtRecoverPasswordEmail = new Control("#txtRecoverPasswordEmail", {
      isValid: function isValid() {
        var value = txtRecoverPasswordEmail.val();

        if (!value || !game.utils.validateEmail(value)) {
          game.ui.alerts.add(!value ? messages.errorFieldsEmpty : messages.errorEmailNotValid, 'warning');
          return false;
        }

        return true;
      }
    }),
        loadingRememberPassword = new Control("#loadingRememberPassword", { hideClass: 'hide' }),
        submit = function submit() {
      $("#btnRememberPasswordSubmit").click();
    },


    // Respuesta a recuperar contraseña
    onResponseRememberPassword = function onResponseRememberPassword() {
      game.ui.alerts.add("Muchas gracias, te acabamos de mandar un mail para que puedas recuperar la contraseña.");
      loadingRememberPassword.hide();
    },


    // Inicio petición al recuperar la contraseña
    onResponseRememberPasswordBegin = function onResponseRememberPasswordBegin() {
      loadingRememberPassword.show();
      game.ui.alerts.close();
    },


    // Error al recuperar la contraseña
    onErrorRememberPassword = function onErrorRememberPassword(xHR, textStatus, errorThrown) {
      loadingRememberPassword.hide();
      game.ui.alerts.add(errorThrown, 'warning');
    };

    //Click en enviar recuperar password
    __$document.on('click', "#btnRememberPassword", function () {
      //TODO si ha introducido el email en la ventana de login, lo mostramos automáticamente en la de recuperación de contraseña (le ahorramos escribir los mismo 2 veces)
      if (game.ui.validateControl(txtRecoverPasswordEmail)) submit();
    });

    return {
      onResponseRememberPassword: onResponseRememberPassword,
      onResponseRememberPasswordBegin: onResponseRememberPasswordBegin,
      onErrorRememberPassword: onErrorRememberPassword
    };
  }(),


  // Muestra el mensaje en la cabecera de la ventana de login
  headerMessage = function () {
    var loginHeaderMessage = new Control("#loginHeaderMessage", { hideClass: 'hide' }),
        //Titular de la ventana de login

    messages = function () {
      var messages = {};

      messages[game.enums.callBackActionType.product] = "Ops, es necesario logarse para añadir productos al carro";
      messages[game.enums.callBackActionType.reserve] = "Ops, es necesario logarse para realizar una reserva";
      messages[game.enums.callBackActionType.section] = "Ops, es necesario logarse para acceder a esta sección";
      return messages;
    }(),
        show = function show(message) {
      var headerMessageTemplate = "<i class='fa iconGame fa-warning'></i>{{$this}}";

      message = messages[message] || "Ops, es necesario logarse para realizar la operación";
      if (!!message && isNaN(message)) {
        loginHeaderMessage.html(headerMessageTemplate.fastformat(message));
        loginHeaderMessage.show();
      }
    };

    return {
      show: show
    };
  }(),
      resetSession = function resetSession(silentMode) {
    //Loading
    game.api.login.userLogOut({
      done: function done() {
        if (!silentMode) {
          // El modo silencioso limpia la cookie de login sin avisar al usuario, para sesiones erróneas en servidor.
          game.login.isAutenticathed = false;
        }
        modals.fadeIn('txtCloseSession', true);
        game.utils.rateLimit("redirect to member section", 1000, function () {
          game.navigation.reloadPage();
        });
      }
    });
  },
      newsletter = function () {
    var loadingNewsletter = new Control("#loadingNewsletter", { hideClass: "hide" }),
        txtRegisterNewsletter = new Control("#txtRegisterNewsletter", {
      isValid: function isValid() {
        return game.utils.validateEmail(txtRegisterNewsletter.val());
      }
    }),
        lblSubscribeNewsletterSuccesfully = new Control("#lblSubscribeNewsletterSuccesfully"),
        frmSubscribeNewsletter = new Control(".newsletterActive", { hideClass: 'hide' }),


    // Suscribe al newsletter un email
    subscribeToNewsLetter = function subscribeToNewsLetter() {
      if (txtRegisterNewsletter.isValid()) {
        var email = txtRegisterNewsletter.val();

        loadingNewsletter.show();

        game.api.login.subscribeToNewsLetter(email, {
          done: function done() {
            frmSubscribeNewsletter.hide();
            lblSubscribeNewsletterSuccesfully.fadeIn();
          },
          always: function always() {
            loadingNewsletter.hide();
          }
        });
      } else {
        game.ui.alerts.add("Introduce un email válido para suscribirte al newsletter");
      }
    };

    return {
      subscribeToNewsLetter: subscribeToNewsLetter
    };
  }(),


  // Inicialización de la clase login
  init = function init(isAutenticathed, showLogin, googleCaptchaSiteKey) {
    $(function () {
      __GoogleCaptchaSiteKey = googleCaptchaSiteKey;
      game.login.isAutenticathed = isAutenticathed;
      if (showLogin) {
        modals.showLogin();
      }
    });
  };

  __$document.on('click', '#btnCloseSession', resetSession);
  __$document.on('click', "#btnSendNewsletter", newsletter.subscribeToNewsLetter);
  __$document.on('keydown', "#txtRegisterNewsletter", function (event) {
    if (event.keyCode === 13) {
      newsletter.subscribeToNewsLetter();
      event.preventDefault();
      event.stopPropagation();
      return false;
    }
  });

  return {
    init: init,
    onLoginBegin: loginForm.onLoginBegin,
    onResponseLogin: loginForm.onResponseLogin,
    onErrorLogin: loginForm.onErrorLogin,
    login: loginForm.send,
    showLogin: modals.showLogin,
    isAutenticathed: false,
    closeModal: modals.fadeOutAll,
    resetSession: resetSession,
    onResponseRememberPasswordBegin: rememberPasswordForm.onResponseRememberPasswordBegin,
    onResponseRememberPassword: rememberPasswordForm.onResponseRememberPassword,
    onErrorRememberPassword: rememberPasswordForm.onErrorRememberPassword
  };
}();

game.api.login = function () {
  var refreshTooltip = function refreshTooltip(deferredoptions, qUnitCallback) {
    var ajaxOptions = { url: "/Login/Index" };

    return game.api.ajax(ajaxOptions, deferredoptions, qUnitCallback);
  },
      userLogOut = function userLogOut(deferredoptions, qunitcallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/Login/Logout",
      //headers: game.api.getHeaders(),
      type: "POST",
      data: { __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      createWebUser = function createWebUser(email, password, code, deferredoptions, qunitcallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/Login/CreateWebUser",
      type: "POST",
      cache: false,
      data: { email: email, password: password, code: code, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      sendRegistrationEmail = function sendRegistrationEmail(email, deferredoptions, qunitcallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/Login/SendRegistrationEmail",
      type: "POST",
      //headers: game.api.getHeaders(),
      cache: false,
      data: { email: email, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  },
      subscribeToNewsLetter = function subscribeToNewsLetter(email, deferredoptions, qunitcallback) {
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val(),
        ajaxoptions = {
      url: "/Login/SubscribeToNewsLetter",
      type: "POST",
      data: { email: email, __RequestVerificationToken: __RequestVerificationToken }
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  };

  return {
    createWebUser: createWebUser,
    sendRegistrationEmail: sendRegistrationEmail,
    userLogOut: userLogOut,
    refreshTooltip: refreshTooltip,
    subscribeToNewsLetter: subscribeToNewsLetter
  };
}();
/* globals $*/
/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="game.api.js" />
/// <reference path="game.cart.js" />
/// <reference path="game.enums.js" />
/// <reference path="game.properties.js" />
/// <reference path="game.request.js" />
/// <reference path="game.responsive.js" />
/// <reference path="game.search.js" />
/// <reference path="game.styles.js" />
/// <reference path="game.ui.js" />
/// <reference path="game.utils.js" />

/**
 * @namespace game
 */
var game = game || {};

game.filters = function () {
  "use strict";

  var FilterModel = function () {
    var FilterModel = function FilterModel(model) {
      //this.FirstSearch = false; // bool
      this.MinPrice = model && model.MinPrice !== undefined ? model.MinPrice : null; // Double
      this.MaxPrice = model && model.MaxPrice !== undefined ? model.MaxPrice : null; // Double
      this.Head = model && model.Head || null; // string
      this.SKU = model && model.SKU || null; // string
      this.Order = 1; // int
      this.CategoryFilter = model && model.CategoryFilter || [];
      this.Category = model && model.Category || null;
      this.TotalPages = null;
    };

    function categoryToUrl(item) {
      return item.id + ':' + item.type + ':' + item.source;
    }

    var keySeparator = '_',
        interkeySeparator = '+';

    function compress(u) {
      var first = true;
      if (!u) return u;
      var i,
          m,
          j = 0,
          k = '',
          t,
          s,
          r,
          o;
      for (i = 3; i < 10; i++) {
        m = u.match(new RegExp('(.{' + i + '}).*\\1'));

        if (m) {
          r = m[1] + String.fromCharCode(97 + j);
          t = u.replace(new RegExp(m[1], 'g'), String.fromCharCode(97 + j));
          s = (k ? k + interkeySeparator : k) + r + keySeparator + t;
          o = (k ? k + keySeparator : k) + u;
          if (s.length < o.length || first) {
            k = (k ? k + interkeySeparator : k) + r;
            j++;
            i--;
            u = t;
          }

          first = false;
        }
      }
      return (k ? k + keySeparator : k) + u;
    }

    function uncompress(u) {
      if (!u) return u;
      var t = u.split(keySeparator),
          k = t[0],
          s = t[1];

      if (s) k.split(interkeySeparator).reverse().forEach(function (j) {
        return s = s.replace(new RegExp(j[j.length - 1], "g"), j.substring(0, [j.length - 1]));
      });

      return s || k;
    }

    FilterModel.prototype.toUrl = function () {
      var categoryFilter = compress(this.CategoryFilter.map(function (item) {
        return categoryToUrl(item);
      }).join()),
          category = this.Category ? categoryToUrl(this.Category) : '',

      //exclusiveEditions = this.ExclusiveEditions.join(),
      //pegis = this.Pegis.join(),
      price = this.MinPrice || this.MaxPrice ? this.MinPrice + ',' + this.MaxPrice : '',
          result = (categoryFilter !== '' ? '&cf=' + categoryFilter : '') + (category !== '' ? '&ca=' + category : '') + (
      /*(exclusiveEditions !== '' ? '&ex=' + exclusiveEditions : '') +
      (pegis !== '' ? '&p=' + pegis : '') +*/
      price !== '' ? '&pr=' + price : '');

      return '/buscar/' + this.Head + (result ? '/o=' + this.Order + result : '');
    };

    FilterModel.prototype.toView = function () {
      $('.search-filters-group input').attr('checked', false);

      /*this.ExclusiveEditions.forEach(function (item) {
        var check = document.querySelector('input[data-genre="EXCLUSIVEEDITION"][data-key="' + decodeURI(item) + '"]');
        if (check) check.checked = true;
      });
        this.Pegis.forEach(function (item) {
        var check = document.querySelector('input[data-genre="PEGI"][data-key="' + decodeURI(item) + '"]');
        if (check) check.checked = true;
      });*/

      this.CategoryFilter = this.CategoryFilter.map(function (item) {
        var check = document.querySelector('input[data-key="' + item.id + '"][data-type="' + item.type + '"][data-source="' + item.source + '"]');
        if (check) check.checked = true;else return null;
        return item;
      });

      var categoryFilterCounter = this.CategoryFilter.length;
      if (categoryFilterCounter) this.CategoryFilter = this.CategoryFilter.filter(function (item) {
        return item;
      });
      if (categoryFilterCounter !== this.CategoryFilter.length) {
        state.CurrentProducts = 0;
        state.HotProducts = 0;
        state.Page = 0;
        search();
      }
      if (this.CategoryFilter.length) collapseCategories();

      if (this.MinPrice || this.MaxPrice) slider.values({ min: this.MinPrice, max: this.MaxPrice });

      game.search.setCategory(this.Category);
    };

    function categoryFromUrl(v) {
      var values = v.split(':');return { id: values[0], type: values[1], source: values[2] };
    }

    function fromUrl() {
      var params = window.location.pathname.split('/'),
          model = new FilterModel(),
          i,
          categories = params[3] && params[3].split('&');

      if (categories) {
        for (i = 0; i < categories.length; i++) {
          var category = categories[i].split('='),
              key = category[0],
              value = category[1];

          if (key === 'cf') uncompress(value).split(',').forEach(function (v) {
            return model.CategoryFilter.push(categoryFromUrl(v));
          });
          if (key === 'ca') model.Category = categoryFromUrl(value);
          //if (key === 'ex') model.ExclusiveEditions = value.split(',');
          //if (key === 'p') model.Pegis = value.split(',');
          if (key === 'pr') {
            value = value.split(',');
            model.MinPrice = +value[0];
            model.MaxPrice = +value[1];
          }
          if (key === 'o') model.Order = value;
        }
      }

      model.Page = 0;
      model.Head = params[2] || (window.location.search.startsWith('?q=') ? window.location.search.substring(3) : params[1]);

      return model;
    }

    FilterModel.get = function () {
      var result = window.history.state ? window.history.state : fromUrl(),
          model = new FilterModel(result);

      //model.FirstSearch = true;
      return model;
    };

    return FilterModel;
  }(),
      state = new FilterModel(),
      __$document = $(document),


  // Elementos del DOM
  Control = game.ui.Control,
      filterString = new Control("#filterString", { hideClass: 'hide' }),
      xhrLastFilter = null,
      xhrLastSearch = null,
      filtering = false,

  // Funcion que verifica todos los elementos checkeados
  filter = function filter() {
    if (filtering) return;
    filtering = true;

    if (state === null) state = FilterModel.get();

    if ((state.TotalPages === null || state.Page <= state.TotalPages) && state.Head) {
      game.search.noResults.hide();

      if (state.Page === 0) {
        if (xhrLastSearch) xhrLastSearch.abort();
        if (xhrLastFilter) xhrLastFilter.abort();
        game.search.showLoading();
      }

      search();
    } else {
      filtering = false;
      game.search.hideLoading();
      game.search.hideMoreResultsListener();
    }
  },
      search = function search() {
    state.FirstSearch = state.FirstSearch === undefined;
    state.Page = state.Page || 0;

    xhrLastSearch = game.api.filters.getSearch(state, {
      done: function done(response) {
        $("body, html").removeClass("modal-open");

        state.TotalResults = response.TotalResults;
        state.TotalPages = response.TotalPages;

        if (response.Products.length) {
          state.CurrentProducts = (state.CurrentProducts || 0) + response.Products.length;
          if (state.TotalPages === state.Page || state.SKU) state.TotalResults = state.CurrentProducts;
          appendProducts(response.Products, state.Page === 0);
        }

        if (state.TotalPages === state.Page || state.SKU) {
          game.search.hideMoreResultsListener();
        } else {
          game.search.showMoreResultsListener();
        }

        if (response.TotalResults === 0) {
          game.search.noResults.show();

          if (state.Category) {
            var categoryName = document.querySelector('#search-drop-button-text').innerText;

            document.querySelector('#noResults h4').innerText = 'No hemos encontrado nada para ' + state.Head + ' en ' + categoryName;
            document.querySelector('#noResults p').innerHTML = '<a href="/buscar/' + state.Head + '">\xBFQuieres repetir la b\xFAsqueda para todos los departamentos?</a>';
          } else {
            document.querySelector('#noResults h4').innerText = 'No hemos encontrado nada...';
            document.querySelector('#noResults p').innerText = 'Inténtalo nuevamente cambiando los criterios de búsqueda.';
          }
          game.search.hideMoreResultsListener();
        } else {
          setTimeout(game.styles.lazyLoadImages, 200);
        }

        if (!state.SKU) {
          var url = state.toUrl();

          if (state.Page) {
            window.history.replaceState(state, "Buscando " + state.Head, url);
          } else {
            window.history.pushState(state, "Buscando " + state.Head, url);
          }

          state.Page++;
        }
        filtering = false;
      },
      fail: { error: function error() {} },
      always: function always() {
        game.search.hideLoading();
        xhrLastSearch = null;
      }
    });

    if (state.Page === 0 && !state.SKU) {
      document.querySelector('.search-filters').classList.add('with-filters');

      xhrLastFilter = game.api.filters.getFilters(state, {
        done: function done(response) {
          appendFilters(response);

          state.toView();

          filtering = false;
        },
        fail: { error: function error() {} },
        always: function always() {
          game.search.hideLoading();
          xhrLastFilter = null;
        }
      });
    }
  },


  // Inicializa el objeto de JqueryUI Slider
  // @param {object} options {min: initial min value, max: initial max value}
  slider = function () {
    var priceRangeTemplate = "{{min}} € - {{max}} €",
        // Template para mostrar los precios en el slider del rango de precios
    values = function values(options) {
      $("#slider").slider('values', [options.min, options.max]);
      priceRange.html(priceRangeTemplate.fastformat(options));
    },
        initialValues = { min: null, max: null },
        priceRange = new Control('#priceRange'),
        init = function init(options) {
      initialValues.min = options.min;
      initialValues.max = options.max;

      $("#slider").slider({
        range: true,
        step: 1,
        min: initialValues.min,
        max: initialValues.max,
        values: [initialValues.min, initialValues.max],
        slide: function slide(event, ui) {
          var values = { min: ui.values[0], max: ui.values[1] };

          priceRange.html(priceRangeTemplate.fastformat(values));

          game.utils.rateLimit("sliderPrice", 1000, function () {
            state.CurrentProducts = 0;
            state.HotProducts = 0;
            state.Page = 0;
            state.MinPrice = values.min;
            state.MaxPrice = values.max;
            collapseCategories();
            window.scroll(0, 0);
            filter();
          });
        }
      });

      if (options.min === options.max) {
        priceRange.html("Precio único: " + options.min + " €");
      } else {
        priceRange.html(priceRangeTemplate.fastformat(options));
      }
    };

    return { init: init, values: values };
  }(),
      searchFilters = new Control("#search-filters", {
    top: function top(value) {
      var $control = searchFilters._init();
      if (value === undefined) return $control.parent().offset().top;
      $control.css({ top: value });
    },
    bottom: function bottom(value) {
      searchFilters._init().css({ bottom: value });
    },
    init: function init() {
      searchFilters._init().trigger("scrollUpdate");
      mobileChanges();
    }
  }),
      searchFiltersCollapsable = new Control("#search-filters-collapse"),
      searchFiltersCollapsableBtn = new Control("[data-target='#search-filters-collapse']"),
      filtersDesktopScroll = function filtersDesktopScroll(e) {
    // Atención:
    //        El evento scrollUpdate se asigna en bindEvents y se crea en game.styles
    //        a aquellos elementos que tienen "data-scrollspy-listener"
    //
    //        Hay que hacer pruebas de rendimiento pero no va mal
    if (!game.responsive.isResponsiveModeBoolean) {
      // Sobremesa
      // Se muestra el listado de filtros porque no estamos en móvil
      searchFilters.addClass("in");

      // Desde game.styles se captura el evento scroll sólo cuando algún elemento requiere de él.
      //    En esta función (sin optimizar) se actualiza la posición de los filtros en modo sobremesa
      //
      //    (Nota:
      //        Por algún motivo en safari no localiza search-filters con el documento preparado,
      //        así que de momento se declara cada vez que sucede el scroll)

      // Es necesario recalcular estas dimensiones para asegurar la compatibilidad con Safari ya que hay que esperar a la carga completa
      var scrollY = e.scrollY || window.scrollY || pageYOffset,
          parentTop = searchFilters.top(),
          filtersTop = Math.max(parentTop - scrollY, $("#l-HeaderRow2").height());

      searchFilters.top(filtersTop);

      var filtersScrollBottom = $("#l-footer").offset().top - $(window).height();
      if (filtersScrollBottom <= scrollY) {
        searchFilters.bottom(scrollY - filtersScrollBottom);
      } else {
        searchFilters.bottom(0);
      }

      // ----------------------
      // Evitamos la propagación del scroll en los elementos scrollable-prevent
      // Fuente: http://stackoverflow.com/questions/36488478/prevent-scrolling-of-child-element-to-propagate-in-angular-2
      //
      //    Compatibilidad: Chrome + Firefox + Edge
      //        (En explorer no se implementa porque el soporte a la mitad de la función cambiaría y
      //        no es tan relevante como para construir todo el polifyll)

      if (game.responsive.browserDetect.browser !== "Explorer") {
        var scrollables = document.getElementsByClassName("scrollable-prevent"),
            onwheel = function onwheel(e) {
          var el = this,
              conditions = el.scrollTop + el.offsetHeight > el.scrollHeight && e.deltaY > 0 || el.scrollTop === 0 && e.deltaY < 0;

          // Condición extra que evita que se pare el scroll de la página cuando el scrollable no tiene scroll visible
          conditions = conditions && el.scrollHeight > el.offsetHeight;

          if (conditions) {
            e = e || window.event;
            if (e.preventDefault) e.preventDefault();
            e.returnValue = false;
          }
        };

        for (var i = 0, k = scrollables.length; i < k; i++) {
          scrollables[i].addEventListener("wheel", onwheel, false);
        }
      }
    }
  },
      mobileChanges = function mobileChanges() {
    if (game.responsive.isMobileBrowser) searchFilters._init().removeAttr("style");
    searchFiltersCollapsable.toggleClass("in", !game.responsive.isMobileBrowser);
    searchFiltersCollapsable._init().removeAttr("style");
    searchFiltersCollapsableBtn.toggleClass("collapsed", game.responsive.isMobileBrowser);

    $("body, html").removeClass("modal-open").removeAttr("style");
  },
      init = function init(sku) {
    state = FilterModel.get();
    state.SKU = sku;

    if (state && !sku) {
      var url = state.toUrl();
      window.history.replaceState(state, "Buscando " + state.Head, url);
    }
    searchFilters.init();
  };

  __$document.on("scrollUpdate", '#search-filters', function (e) {
    filtersDesktopScroll(e);
  });

  __$document.on("changeResponsiveViewMode", mobileChanges);

  __$document.on("shown.bs.collapse", "#search-filters-collapse", function () {
    $("body, html").removeClass("modal-open").addClass("modal-open");
    return false;
  });
  __$document.on("hidden.bs.collapse", "#search-filters-collapse", function () {
    $("body, html").removeClass("modal-open").removeAttr("style");
    return false;
  });

  __$document.on("shown.bs.collapse", '.search-filters-group .collapsable-group', function (e) {
    e.stopPropagation();
  });

  __$document.on("hidden.bs.collapse", '.search-filters-group .collapsable-group', function (e) {
    e.stopPropagation();
  });

  __$document.on('change', '.search-filters-group input', function () {
    var self = this;
    collapseFilters();

    state.CurrentProducts = 0;
    state.HotProducts = 0;
    state.Page = 0;
    window.scroll(0, 0);

    setTimeout(function () {
      if (self.checked) {
        state.CategoryFilter.push({ id: self.dataset.key, type: self.dataset.type, source: self.dataset.source, title: self.dataset.genre, name: self.name });
      } else {
        state.CategoryFilter = state.CategoryFilter.filter(function (c) {
          return c.id !== self.dataset.key || c.type !== self.dataset.type || c.source !== self.dataset.source;
        });
      }
      filter();
    });
  });

  __$document.on('click', '.do-collapse-categories', function () {
    collapseCategories(this);
  });

  function collapseCategories(checkFilter) {
    if (checkFilter && checkFilter.classList.contains('collapsed')) {
      [].forEach.call(document.querySelectorAll(checkFilter.dataset.target + ' label'), function (label) {
        label.classList.remove('hidden');
      });
      checkFilter.classList.remove('collapsed');
    } else {
      var target = checkFilter ? checkFilter.dataset.target : '.search-filters-group';
      [].forEach.call(document.querySelectorAll(target), function (target) {
        var checked = target.querySelectorAll('input:checked'),
            visibleItems = 5;

        if (checked.length === 0) {
          var filter = [];
          for (var i = 1; i <= visibleItems; i++) {
            filter.push('label:nth-of-type(' + i + ')');
          }
          [].forEach.call(target.querySelectorAll(filter.join(',')), function (label) {
            label.classList.remove('hidden');
          });
          [].forEach.call(target.querySelectorAll('label:nth-of-type(' + visibleItems + ')~label'), function (label) {
            label.classList.add('hidden');
          });
        } else {
          target.querySelector('.do-collapse-categories').classList.remove('hidden');

          [].forEach.call(target.querySelectorAll('label'), function (label) {
            label.classList.add('hidden');
          });
          [].forEach.call(checked, function (input) {
            var label = input.parentElement.classList.remove('hidden');
          });
        }
      });

      if (checkFilter) checkFilter.classList.add('collapsed');else {
        [].forEach.call(document.querySelectorAll(target + ' button'), function (item) {
          item.classList.add('collapsed');
        });
      }
    }
  }

  function collapseFilters() {
    [].forEach.call(document.querySelectorAll('.search-filters-group:not(.is-template)'), function (b) {
      if (b.querySelector('input:checked') === null) {
        remove(b);
      } else {
        var collapseFilters = b.querySelector('.do-collapse-categories');
        if (!collapseFilters) return;
        if (collapseFilters.classList.contains('collapsed')) {
          collapseFilters.click();
        }
        collapseFilters.click();
      }
    });
  }

  function remove(item) {
    if (item) item.parentElement.removeChild(item);
  }

  function appendFilters(filters) {
    var template = document.querySelector('#search-filters-groups .is-template');

    if (filters.length > 0) document.querySelector('.search-filters').classList.add('with-filters');else document.querySelector('.search-filters').classList.remove('with-filters');

    [].forEach.call(document.querySelectorAll('.search-filters-group:not(.is-template)'), function (s) {
      remove(s);
    });
    filters.forEach(function (filter) {
      if (filter.Key === "precio") {
        slider.init({ min: 0, max: +filter.Categories[1].id });
        return;
      }

      if (document.querySelector('[id="search-filters-group-' + filter.Key + '"]') === null) {
        var filterDiv = template.cloneNode(true),
            id = filterDiv.id.replace('#', filter.Key),
            filterCollapseButton = filterDiv.querySelector('.group-title'),
            filterCollapseButtonText = filterCollapseButton.querySelector('.cm-txt'),
            filterLabelContainer = filterDiv.querySelector('.collapsable-group'),
            filterLabelTemplate = filterLabelContainer.querySelector('label').cloneNode(true),
            visibleItems = 5;

        template.parentElement.appendChild(filterDiv);

        filterDiv.id = id;
        filterCollapseButton.dataset.target = '#' + id + ' .collapsable-group';
        filterCollapseButtonText.innerText = filter.Description;
        filterDiv.classList.remove('hidden');
        filterDiv.classList.remove('is-template');
        remove(filterLabelContainer.querySelector('label'));

        filter.Categories.forEach(function (category, index) {
          var filterLabel = filterLabelTemplate.cloneNode(true),
              filterCheckbox = filterLabel.querySelector('[type=checkbox]'),
              filterText = filterLabel.querySelector('.cm-txt'),
              name = category.productCategory !== null ? category.productCategory.Name : category.id,
              key = category.productCategory !== null ? category.productCategory.LuceneID : category.id,
              description = category.productCategory !== null ? category.productCategory.Description || category.productCategory.Name : category.id !== "-1" ? category.id : "TP";

          if (index >= visibleItems) filterLabel.classList.add('hidden');

          filterCheckbox.dataset.type = category.Type;
          filterCheckbox.dataset.source = category.Source;
          filterCheckbox.dataset.genre = filter.Key;
          filterCheckbox.dataset.counter = category.counter;
          filterCheckbox.title = filter.Description;

          filterCheckbox.name = name;
          filterCheckbox.dataset.key = key;
          filterText.innerHTML = description + ' <em class="u-regular u-txt_primary">(' + category.counter + ')</em>';
          filterLabelContainer.appendChild(filterLabel);
        });

        if (filter.Categories.length <= visibleItems) {
          filterDiv.querySelector('.do-collapse-categories').classList.add('hidden');
        }
        //else {
        filterDiv.querySelector('.do-collapse-categories').dataset.target = '#' + id;
        //}
      }
    });
  }

  var divOfferTemplate, divGoodieTemplate;
  function appendProducts(products, clean) {
    var template = document.querySelector('.search-container .is-template'),
        hotProducts = products.filter(function (p) {
      return p.HotProduct;
    }),
        lastProductSKU = hotProducts.length > 0 ? hotProducts[hotProducts.length - 1].SKU : null,
        lastChildNSKU = function () {
      for (var i = 5; i > 0; i--) {
        if (hotProducts.length - i >= 0) {
          return hotProducts[hotProducts.length - i].SKU;
        }
      }
    }(),
        spanSearchInfo = document.querySelector('.search-info .cm-txt'),
        spanHighlight = document.querySelector('.search-highlight-title span');

    if (state.SKU) remove(spanSearchInfo);else spanSearchInfo.innerHTML = 'Mostrando ' + state.CurrentProducts + ' resultados de ' + state.TotalResults + ' para la b\xFAsqueda <strong id="search-string">' + decodeURI(state.Head).split('-').join(' ') + '</strong>';

    state.HotProducts = (state.HotProducts || 0) + hotProducts.length;
    if (state.HotProducts) {
      spanHighlight.innerText = state.HotProducts + ' ' + (state.HotProducts > 1 ? 'resultados destacados' : 'resultado destacado');
      spanHighlight.classList.remove('hidden');
    } else {
      spanHighlight.classList.add('hidden');
    }

    divOfferTemplate = divOfferTemplate || function () {
      var d = template.querySelector('.price'),
          t = d.cloneNode(true);remove(d);return t;
    }();
    divGoodieTemplate = divGoodieTemplate || function () {
      var d = template.querySelector('.right-side-presents .item'),
          t = d.cloneNode(true);remove(d);return t;
    }();

    if (clean) {
      [].forEach.call(document.querySelectorAll('.search-item:not(.is-template)'), function (item) {
        return remove(item);
      });
    }
    products.forEach(function (product) {
      var divProduct = template.cloneNode(true),
          anchorFigure = divProduct.querySelector('.figure'),
          image = anchorFigure.querySelector('img'),
          imageHasGoodies = anchorFigure.querySelector('.stick'),
          divExclusiveEdition = divProduct.querySelector('.advertising-wrap'),
          anchorName = divProduct.querySelector('.title .cm-txt'),
          anchorPlatforms = divProduct.querySelector('.info-wrap .btn'),
          spanPlatforms = anchorPlatforms.querySelector('.cm-txt'),
          anchorRating = divProduct.querySelector('.info-wrap .reviews-anchor'),
          anchorNoRating = divProduct.querySelector('.info-wrap .no-reviews-anchor'),
          divOffers = divProduct.querySelector('.prices-wrap'),
          divGoodies = divProduct.querySelector('.right-side-presents'),
          divNoGoodies = divProduct.querySelector('.right-side-no-presents'),
          divClassName = product.SKU === lastProductSKU ? "last" : product.SKU === lastChildNSKU ? "last-child-n" : null;

      if (product.HotProduct) divProduct.classList.add('search-item-highlight');
      if (divClassName) divProduct.classList.add(divClassName);
      divProduct.id = "search-item-" + product.SKU;

      anchorFigure.href = anchorName.href = anchorPlatforms.href = '/' + product.Navigation;

      image.dataset.src = product.ImageUrl;
      image.alt = image.title = anchorName.innerText = product.Name;

      if (!product.HaveGoodies) remove(imageHasGoodies);

      if (!product.ExclusiveEdition) remove(divExclusiveEdition);

      spanPlatforms.innerText = product.FamilyName || product.Platforms.map(function (p) {
        return p.Name;
      }).join("|");

      if (product.Rating === 0) {
        if (anchorNoRating) {
          anchorNoRating.href = '/' + product.Navigation + '#valoracion';
          remove(anchorRating);
        }
      } else {
        anchorRating.classList.add('points-' + product.Rating);
        anchorRating.href = '/' + product.Navigation + '#valoracion';
        remove(anchorNoRating);
      }

      product.Offers.forEach(function (offer) {
        var divOffer = divOfferTemplate.cloneNode(true),
            h4Type = divOffer.querySelector('.buy--type'),
            spanType = h4Type.querySelector('.cm-txt'),
            spanPriceInt = divOffer.querySelector('.int'),
            spanPriceDecimal = divOffer.querySelector('.decimal');

        divOffer.classList.add('buy-' + offer.ClassName);
        if (offer.ButtonText.match(/agotado|proximámente/i) !== null) {
          remove(h4Type);
        } else {
          if (offer.ButtonText.split(' -').length > 1) spanType.classList.add("long-text");
          spanType.innerText = offer.ButtonText;
        }

        spanPriceInt.innerText = offer.SellPriceIntegerPart;
        if (offer.SellPriceDecimalPart !== '00') spanPriceDecimal.innerText = '\'' + offer.SellPriceDecimalPart;

        divOffers.appendChild(divOffer);
      });

      if (product.HasGoodies) {
        var divGoodiesCarousel = divGoodies.querySelector('.carousel-game'),
            spanGoodieTitle = divGoodiesCarousel.querySelector('.cm-txt'),
            buttonLeft = divGoodiesCarousel.querySelector('.left'),
            buttonRight = divGoodiesCarousel.querySelector('.right');

        if (product.AllGoodies.length) {
          spanGoodieTitle.innerText = "ED. GAME CONTIENE";
          product.AllGoodies.forEach(function (goodie, index) {
            var divGoodie = divGoodieTemplate.cloneNode(true),
                anchorGoodie = divGoodie.querySelector('.u-block'),
                imageGoodie = anchorGoodie.querySelector('.thumb');

            if (index === 0) divGoodie.classList.add('active');

            anchorGoodie.href = '/' + product.Navigation + '#product-carousel-presents';

            imageGoodie.src = goodie.ImageUrl;
            imageGoodie.alt = goodie.Description;
            imageGoodie.title = goodie.Description;

            buttonLeft.dataset.target = '#search-item-' + product.SKU + ' .search-carousel-presents.carousel-game';
            buttonLeft.dataset.target = '#search-item-' + product.SKU + ' .search-carousel-presents.carousel-game';

            divGoodiesCarousel.insertBefore(divGoodie, buttonLeft);
          });
        } else {
          spanGoodieTitle.innerText = "ED. GAME CONTIENE REGALO";

          remove(buttonLeft);
          remove(buttonRight);
        }

        remove(divNoGoodies);
      } else {
        divNoGoodies.querySelector('.description>div').innerText = product.HighlightText;
        divNoGoodies.querySelector('.description>a').href = '/' + product.Navigation + '#descripcion';
        remove(divGoodies);
      }

      divProduct.classList.remove('hidden');
      divProduct.classList.remove('is-template');
      template.parentElement.insertBefore(divProduct, template);
    });
  }

  $(window).on('popstate', function (e) {
    searchFilters.init();
    if (e.originalEvent.state) {
      state = new FilterModel(e.originalEvent.state);
      state.toView();
    }
  });

  return {
    filter: filter, slider: slider, init: init, searchFilters: searchFilters, filtering: false
  };
}();

game.api.filters = function () {
  var search = function search(data, deferredoptions, qUnitCallback) {
    var ajaxoptions = {
      url: '/api/search',
      dataType: "json",
      traditional: true,
      type: "POST",
      contentType: 'application/json; charset=utf-8',
      data: JSON.stringify(data),
      async: true
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qUnitCallback);
  },
      filters = function filters(data, deferredoptions, qUnitCallback) {
    var ajaxoptions = {
      url: '/api/filters',
      dataType: "json",
      traditional: true,
      type: "POST",
      contentType: 'application/json; charset=utf-8',
      data: JSON.stringify(data),
      async: true
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qUnitCallback);
  };

  return {
    getSearch: search,
    getFilters: filters
  };
}();
/// <reference path="game.properties.js" />

/**
 * @namespace game
 */
var game = game || {};

game.pages = function () {
    var VALUES = {
        search: "/buscar/{{id}}"
    },


    // Valores para desarrollo
    OVERRIDES = {},
        getPage = function getPage(key) {
        var value = OVERRIDES[key];
        if (value === undefined) {
            value = VALUES[key];
        }
        return value;
    },
        getSearch = function getSearch(id) {
        /// <summary>Obtiene el nombre de seccion por el id</summary>
        /// <param type="String" name="searchString">cadena de búsqueda</param>
        /// <returns type="Json">Nombre de la sección por id</returns>
        var page = getPage("search").fastformat({ id: id });
        return page;
    };

    return {
        getSearch: getSearch
    };
}();
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* globals $ */
/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="game.cart.js" />
/// <reference path="game.enums.js" />
/// <reference path="game.filters.js" />
/// <reference path="game.layout.js" />
/// <reference path="game.navigation.js" />
/// <reference path="game.pages.js" />
/// <reference path="game.properties.js" />
/// <reference path="game.request.js" />
/// <reference path="game.storage.js" />
/// <reference path="game.ui.js" />
/// <reference path="game.utils.js" />
/// <reference path="game.cookie.js" />

/**
 * @namespace game
 */
var game = game || {};

game.search = function () {
  var __$document = $(document),
      __$window = $(window),
      __numberOfPages = 0,
      Control = game.ui.Control,


  // properties
  __pagination = true,
      __keyboardEventsEnabled = true,
      // Si la clase tiene activados los eventos de teclado

  searcher = function () {
    var _defaultFamily = null,
        loadingImageSearch = new Control(".load-autosearch"),
        listFamilySearch = new Control("#LisFamily_search"),
        labelFilter = new Control('#labelFilter'),
        textSearch = function () {
      var control = new Control("#searchinput", {
        isValid: function isValid() {
          var value = control.val(game.utils.formatUrlSearch(control.val()));
          return value.length >= 3;
        }
      }),
          render = function () {
        var render = {},
            searchAutocompleteIcon = "https://media.game.es/Img-statics/img-statics/icon-auto-search.png",
            searchAutocompleteSiteIcon = "https://media.game.es/Img-statics/img-statics/icon-auto-search-microsite.png";

        render[game.constants.search.allResults] = "<li><a href='#' title='{{URL}}'><span>{{label}}</span></a></li>";
        render[game.constants.search.noResults] = "<a><i>{{label}}</i></a>";
        render[game.constants.search.url] = "<li class='ui-state-focus'><a data-url='{{URL}}'><img src='" + searchAutocompleteSiteIcon + "' /> {{label}}</a></li>";
        render[game.constants.search.mixed] = "<li class='ui-state-focus'><a data-url='{{URL}}'><img src='" + searchAutocompleteSiteIcon + "' /> {{label}}</a></li>";
        render[game.constants.search.direct] = "<li><a><img src='" + searchAutocompleteIcon + "' /> {{label}}</a></li>";

        return render;
      }(),
          navigation = function () {
        var navigation = {};

        navigation[game.constants.search.allResults] = function (item) {
          var searchString = item.SKU;
          return game.pages.getSearch(searchString.toLowerCase());
        };
        navigation[game.constants.search.noResults] = function () {
          return null;
        };
        navigation[game.constants.search.url] = navigation[game.constants.search.mixed] = function (item) {
          return game.utils.getBasePath() + "/" + item.URL;
        };
        navigation['default'] = function (item) {
          //El resto que son productos con SKU ui.item.type = null
          var searchString = item.value;
          return game.pages.getSearch(game.utils.formatUrlSearch(searchString.toLowerCase()));
        };
        return navigation;
      }();

      $(function () {
        var $control = control._init();

        //Personalización del método render
        $control.autocomplete({
          renderItem: function renderItem(ul, item) {
            item.type = item.type !== null && item.type !== undefined ? item.type : game.constants.search.direct;
            var renderText = render[item.type];
            if (renderText) return $(render[item.type].fastformat(item)).appendTo(ul);

            return game.constants.stringEmpty;
          },
          source: function source(request, response) {
            var searchString = game.utils.formatUrlSearch(request.term.trim()),
                searchShowAllResults = "Mostrar todos los resultados...";

            if (searchString !== game.constants.stringEmpty) {
              loadingImageSearch.show();
              game.api.search.autocomplete(searchString, {
                //Autocomplete no permite interfaz promise!, no refactorizar
                success: function success(json) {
                  if (json.length > 0) {
                    //Añadimos resultado para todos
                    json.push({
                      Name: searchShowAllResults,
                      SKU: searchString, //Almacenamos el término de búsqueda en el SKU para buscar (FER no me termina de gustar, TODO refactorizar en futuro)
                      Mode: game.constants.search.allResults
                    });
                  }

                  //Añadimos el resto de resultados, type será null, salvo para los personalizados
                  response($.map(json, function (name) {
                    return {
                      label: name.Name,
                      value: name.Name,
                      SKU: name.SKU,
                      type: name.Mode,
                      URL: name.URL
                    };
                  }));
                },
                fail: function fail() {},
                always: function always() {
                  loadingImageSearch.hide();
                }
              });
            }
          },
          minLength: 3,
          select: function select(event, ui) {
            var result = (navigation[ui.item.type] || navigation['default'])(ui.item);

            if (result) game.navigation.redirectionTo(result);
          }
        });
      });

      __$document.on('keypress', "#searchinput", function (e, data, ui) {
        if (e.which === 13) {
          if (ui) {
            var result = (navigation[ui.item.type] || navigation['default'])(ui.item);
            if (result) game.navigation.redirectionTo(result);
          } else {
            submitSearch();
          }
          e.preventDefault();
          e.stopPropagation();
        }
      });

      return {
        val: control.val,
        notify: control.notify,
        isValid: control.isValid
      };
    }(),
        submitSearch = function submitSearch() {
      if (!validateSearchString()) return;

      var searchString = textSearch.val();

      var searchStringAndFamily = searchString,
          searchPage = game.pages.getSearch(searchStringAndFamily),

      //dropQuery = window.history.state && window.history.state.dropQuery ? "?" + window.history.state.dropQuery : "";
      dropQuery = drop.getCurrent();

      // game.navigation.redirectionTo(searchPage);
      if (dropQuery) game.navigation.redirectionTo(searchPage + "/ca=" + dropQuery.id + ":" + dropQuery.type + ":" + dropQuery.source);else game.navigation.redirectionTo(searchPage);
    },
        validateSearchString = function validateSearchString() {
      textSearch.val(game.utils.formatUrlSearch(textSearch.val()));

      if (!textSearch.isValid()) {
        textSearch.notify("Debe introducir un mínimo de 3 caracteres para realizar la búsqueda", { position: "bottom", className: 'error' });
        searchLoading.hide();
        return false;
      }
      return true;
    };

    // Evento del botón de buscar (o buscar todos los resultados)
    __$document.on('click', "#submitsearch", submitSearch);

    return {
      val: textSearch.val,
      isValid: validateSearchString
    };
  }(),
      searchLoading = new Control("#SearchLoading"),
      search = function () {
    var searchStatus = {
      searchString: null, //Almacena la cadena de búsqueda
      loadPageInProgress: false //Si hay una petición de paginación en curso
    },
        numberOfElements = new Control('#number-of-elements'),
        numberOfTotalElements = new Control('#number-of-total-elements'),


    //displayError = new Control("#noResults", { hideClass: 'js-hide' }),

    searchQuickActions = new Control(".search-quick-actions"),


    //searchStringLabel = new Control("#search-string", { hideClass: 'hide' }),

    noResults = new Control("#noResults", { hideClass: 'hide' }),
        moreResultsListener = new Control("#moreResultsListener", {
      // Verifica si el elemento esta en el marco de la ventana
      isInView: function isInView(scrollY) {
        var viewBottom = scrollY + __$window.height(),
            elemTop = moreResultsListener._init().offset().top;
        return elemTop <= viewBottom;
      },
      triggerScrollUpdate: function triggerScrollUpdate() {
        moreResultsListener._init().trigger("scrollUpdate", { scrollY: window.scrollY || pageYOffset });
      },
      hideClass: 'hide'
    }),
        displayResults = new Control("#searchItemsWrap", {
      _existsResults: null,
      existsResults: function existsResults() {
        this._existsResults = this._existsResults === null ? this._init().find('.search-item').length > 0 : this._existsResults;
        return this._existsResults;
      }
    }),
        searchLoadingWrap = new Control('.search-loading-wrap', { hideClass: 'hide' }) /*,
                                                                                       lazyImages = new Control('.not-loaded', {
                                                                                       loadVisibles: function () {
                                                                                       var $control = lazyImages._init(true),
                                                                                       images = $.makeArray($control),
                                                                                       viewBottom = __$window.scrollTop() + __$window.height(),
                                                                                       image, $image;
                                                                                       for (var i = 0, x = images.length; i < x; i++) {
                                                                                       image = images[i];
                                                                                       $image = $(image);
                                                                                       var elemTop = $image.offset().top;
                                                                                       if (elemTop <= viewBottom) {
                                                                                       if (image.dataset.src) {
                                                                                       image.addEventListener('load', function() {
                                                                                       image.classList.remove('not-loaded');
                                                                                       });
                                                                                       image.src = image.dataset.src;                  
                                                                                       image.dataset.src = '';
                                                                                       }
                                                                                       } else {
                                                                                       return;
                                                                                       }
                                                                                       }
                                                                                       }
                                                                                       })*/;

    __$document.on("scrollUpdate", '#moreResultsListener', function (e) {

      //lazyImages.loadVisibles();
      game.styles.lazyLoadImages();

      if (moreResultsListener.isVisible() && moreResultsListener.isInView(e.scrollY || window.scrollY || pageYOffset)) {
        game.filters.filter();
      }
    });

    // Se limpian los estilos si ha habido cambio móvil vs sobremesa
    __$document.on("changeToMobile", function () {
      moreResultsListener.triggerScrollUpdate();
    });
    __$document.on("changeToDesk", function () {
      //$("#search-filters-collapse").addClass("in");
      moreResultsListener.triggerScrollUpdate();
    });

    return {
      /*performSearch: performSearch,*/
      append: function append(html, page, goToTop) {
        displayResults.append(html, page, goToTop);
      },
      showLoading: function showLoading() {
        searchLoadingWrap.show();
      },
      hideLoading: function hideLoading() {
        searchLoadingWrap.hide();
      },
      triggerScrollUpdate: function triggerScrollUpdate() {
        moreResultsListener.triggerScrollUpdate();
      },
      noResults: noResults,
      moreResultsListener: moreResultsListener
    };
  }(),
      viewMode = function () {
    var viewButtons = [{ control: new Control("#searchBtn-list"), action: function action() {
        $(".search-shared").attr("class", "search-shared search-list");
      } }, { control: new Control("#searchBtn-grid-1"), action: function action() {
        $(".search-shared").attr("class", "search-shared search-grid smaller-grid");
      } }, // Smaller grid
    { control: new Control("#searchBtn-grid-2"), action: function action() {
        $(".search-shared").attr("class", "search-shared search-grid");
      } // Grid
    }],
        setViewMode = function setViewMode(index) {
      game.storage.setLocalItem('viewResultsGrid', index);
      index = index % 3;
      viewButtons.forEach(function (e, i) {
        e.control.active(i === index);
      });
      viewButtons[index].action();
      // Esperamos a que se complete la transición del modo de vista.
      setTimeout(search.triggerScrollUpdate, 350);
    };

    __$document.on("click", '#searchBtn-list, #searchBtn-grid-1, #searchBtn-grid-2', function () {
      var option = this.id[this.id.length - 1];
      option = isNaN(option) ? 3 : parseInt(option);
      setViewMode(option);
    });

    __$document.on("changeToMobile", function () {
      setViewMode(3);
    });

    var pfx = ["webkit", "moz", "MS", "o", ""],
        type = "TransitionEnd";
    for (var p = 0; p < pfx.length; p++) {
      if (!pfx[p]) type = type.toLowerCase();
      __$document.on(pfx[p] + type, ".search-shared .search-item", search.triggerScrollUpdate);
    }

    return {
      init: function init() {
        if (game.responsive.isMobileBrowser) {
          setViewMode(3);
        } else {
          setViewMode(game.storage.getLocalItem('viewResultsGrid'));
        }
      }
    };
  }(),


  // Habilita los eventos del teclado (el enter en búsquedas)
  enableKeyboardEvents = function enableKeyboardEvents(enable) {
    __keyboardEventsEnabled = enable;
  },


  // Se usa desde qQunit para testing interno
  testFastSearch = function testFastSearch(searchStr, qUnitCallback) {
    game.api.search.getSearchAutoComplete({
      done: function done(json) {
        if (qUnitCallback !== null) qUnitCallback(json.length > 0);
      },
      fail: function fail() {
        if (qUnitCallback !== null) qUnitCallback(false);
      }
    });
  },


  // Drop de departamentos
  drop = function () {

    var selected = null,
        Adders = /** @class */function () {
      function Adders(options) {
        this.PARAMS = {
          activeClass: 'isActive',
          dropButtonTextId: 'search-drop-button-text',
          dataKey: 'search-adder',
          cookieName: 'GAMESearchCategory',
          defaults: {}
        };
        if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === 'object') {
          if (typeof options.dataKey === 'string' && options.dataKey !== defaults.dataKey) this.PARAMS = Object.assign({}, this.PARAMS, options);else throw 'dataKey is required.';
        }
        return this;
      }

      Adders.prototype.bindEvents = function () {
        var _this = this;

        this.items.forEach(function (x) {
          if (!JSON.parse(x.node.dataset.searchAdderBinded || false)) {
            x.node.setAttribute('data-search-adder-binded', true); // IE
            x.node.addEventListener('click', function (event) {
              event.preventDefault();
              _this.setDropQuery(x).updateDropButtonText();
            });
          }
        });
        return this;
      };

      Adders.prototype.getItems = function () {
        var _this2 = this;

        this.dropButtonText = window[this.PARAMS.dropButtonTextId];
        this.items = Array.prototype.map.call(document.querySelectorAll("[data-" + this.PARAMS.dataKey + "]"), function (x) {
          var options = Object.assign({}, _this2.PARAMS.defaults, game.utils.parseOptions(x.getAttribute("data-" + _this2.PARAMS.dataKey)));
          return {
            node: x,
            options: options
          };
        });
        return this;
      };

      Adders.prototype.setDropQuery = function (adder) {

        var location = window.location.pathname;

        if (!adder) {
          // Carga de pantalla
          location = window.location.href;
          var params = game.utils.getQueryParams();
          if (!params || !params.ID) return;
          adder = this.items.find(function (x) {
            return x.options.ID === params.ID;
          });
        }
        if (!adder) return; // Sólo en errores
        //window.history.pushState(Object.assign({}, adder.options, { dropQuery: $.param(adder.options) }), adder.options.Name, location);
        selected = adder;
        game.utils.triggerEvent("@searchCategoryChanged", adder);

        return this;
      };

      Adders.prototype.updateDropButtonText = function () {
        if (this.dropButtonText) {
          var innerHTML = selected ? selected.node.innerHTML : 'Todos los departamentos';
          this.dropButtonText.innerHTML = innerHTML;
        }
        return this;
      };

      Adders.prototype.update = function () {
        this.getItems().bindEvents().updateDropButtonText().setDropQuery();
        return this;
      };

      return Adders;
    }(),
        components = new Adders();
    $(document).ready(components.update.bind(components));
    // Ejemplo de evento capturable por cualquier otro script
    //document.addEventListener("@searchCategoryChanged", event => console.log("@searchCategoryChanged", event.detail))

    return {
      getCurrent: function getCurrent() {
        if (selected) return { id: selected.options.ID, type: selected.options.Type, source: selected.options.Source };
        return null;
      },
      setCurrent: function setCurrent(category) {
        if (category) selected = components.items.find(function (item) {
          return item.options.ID === category.id;
        });else selected = null;
        components.updateDropButtonText();
      }
    };
  }(),


  // Inicialización de la clase search
  init = function init(familys, fastSearchTimeout) {
    game.api.search.fastSearchTimeout = fastSearchTimeout;

    // Creación de variables localStorage
    if (!game.storage.getLocalItem("viewResultsGrid")) game.storage.setLocalItem("viewResultsGrid", game.properties.getProperty("viewResultsGrid"));
    viewMode.init();
  };

  //Sobreescribmos los métodos de render del autocomplete, para luego personalizarlos
  //TODO Ojo que esto puede afectar a otros si existen en la página
  $.widget("ui.autocomplete", $.ui.autocomplete, {
    options: {
      appendTo: "#searchBox",
      messages: {
        noResults: "No hay resultados.",
        results: function results(amount) {
          return amount + (amount > 1 ? " resultados encontrados." : " resultado encontrado.");
        }
      },
      renderItem: null,
      renderMenu: null
    },
    _renderItem: function _renderItem(ul, item) {
      return $.isFunction(this.options.renderItem) ? this.options.renderItem(ul, item) : this._super(ul, item);
    },
    _renderMenu: function _renderMenu(ul, items) {
      if ($.isFunction(this.options.renderMenu)) this.options.renderMenu(ul, items);
      this._super(ul, items);
    }
  });

  __$window.on('resize', function () {
    // Esperamos a que se complete la transición del modo de vista.
    setTimeout(search.triggerScrollUpdate, 350);
  });

  return {
    enableKeyboardEvents: enableKeyboardEvents,
    testFastSearch: testFastSearch,
    setPagination: search.setPagination,
    /*performSearch: search.performSearch,*/
    searchString: function searchString(value) {
      if (value) return searcher.val(value.replace(/&#(\d+);/g, function (s, s1) {
        return String.fromCharCode(parseInt(s1));
      }));
      return searcher.val();
    },
    currentPage: 0,
    numberOfPages: function numberOfPages(value) {
      if (value === undefined) {
        return __numberOfPages;
      }
      __numberOfPages = value;
      search.moreResultsListener.toggle(__numberOfPages > 0);
      return __numberOfPages;
    },
    append: function append(html, page, goToTop) {
      search.append(html, page, goToTop);
    },
    init: init,
    originalSearchString: null,
    showLoading: search.showLoading,
    hideLoading: search.hideLoading,
    hideMoreResultsListener: function hideMoreResultsListener() {
      search.moreResultsListener.toggle(false);
      document.querySelector('#searchItemsWrap').classList.add('search-completed');
    },
    showMoreResultsListener: function showMoreResultsListener() {
      search.moreResultsListener.toggle(true);
    },
    type: 0,
    orderType: function orderType() {
      return 1;
    },
    noResults: {
      hide: function hide() {
        search.noResults.hide();
      },
      show: function show() {
        search.noResults.show();
      }
    },
    setCategory: function setCategory(category) {
      drop.setCurrent(category);
    },
    getCategory: function getCategory() {
      return drop.getCurrent();
    }
  };
}();

game.api.search = function () {
  var autocomplete = function autocomplete(searchString, deferredoptions, qunitcallback) {
    var ajaxoptions = {
      type: "POST",
      contentType: "application/json; charset=utf-8",
      url: '/buscar/autocompletado',
      dataType: "json",
      data: JSON.stringify({ query: searchString.split(' ').join('-') }),
      success: deferredoptions.success,
      fail: function fail() {},
      timeout: game.api.search.fastSearchTimeout // tiempo que se configura en el web.config
    };

    return game.api.ajax(ajaxoptions, deferredoptions, qunitcallback);
  };

  return { fastSearchTimeout: 0, autocomplete: autocomplete };
}();
/* globals $, Hammer */

/// <reference path="../external/jquery/jquery-1.11.2.js" />
/// <reference path="../external/hammer/hammer.js" />
/// <reference path="game.properties.js" />
/// <reference path="game.product.js" />
/// <reference path="game.responsive.js" />

/**
 * @namespace game
 */
var game = game || {};

game.carousel = function () {
    "use strict";

    var
    //#region Variables
    __$document = $(document),
        _$carouselTouch = null,
        // Carousel Bootstrap
    _$highlightCarousel = null,
        // Carousel Bootstrap de la ficha de producto
    _$carousels = null,
        // Carousel Game (tipo regalos de ficha de producto)
    //#endregion Variables

    //#region Funciones Carousel Bootstrap
    // Limpia las acciones que se están realizando
    _cleanCarousel = function _cleanCarousel() {
        var $videos = _$highlightCarousel.find("video");

        // Pausar todos los videos que se estuvieran reproduciendo
        if ($videos.length > 0) $videos.each(function () {
            this.pause();
        });
        // Reiniciar el ciclo (si estuviera parado, la comprobación ya la realiza Bootstrap)
        _$highlightCarousel.carousel("cycle");
    },


    // Inicia las acciones necesarias cuando el video está visible
    _videoVisible = function _videoVisible($item) {
        var videoTag = $item.find("video").get(0);

        // Pausar el carousel mientras se "emite" el video actual
        _$highlightCarousel.carousel('pause');
        // Iniciar la reproduccion del item en particular
        videoTag.play();
        videoTag.addEventListener("ended", function () {
            _cleanCarousel();
        });
    },

    //#endregion

    // #region Funciones Carousel-Game
    _carouselGameControlClicked = function _carouselGameControlClicked() {
        var carousel = this.dataset.target,
            type = this.dataset.slide,
            $carousel = $(carousel),
            $active = $('.active', $carousel),
            $first = $('.item', $carousel).first(),
            $last = $('.item', $carousel).last(),
            $next = null;

        if (type === "prev") {
            $next = $active.index() === $first.index() ? $last : $active.prev();
        } else {
            $next = $active.index() === $last.index() ? $first : $next = $active.next();
        }

        $active.removeClass('active');
        $next.addClass('active');

        if (game.product) game.product.tooBigElements.initTooBigElements($("[data-jsaction='too-big']", $(".item", carousel)));
    },


    // Asigna los eventos Swipe
    _bindSwipeEventToCarousel = function _bindSwipeEventToCarousel($carousel) {
        Hammer($carousel.get(0)).on("swipeleft", function () {
            $carousel.carousel('next');
        });

        Hammer($carousel.get(0)).on("swiperight", function () {
            $carousel.carousel('prev');
        });
    },
        _bindSwipeEventToCarouselGame = function _bindSwipeEventToCarouselGame($carousel) {
        Hammer($carousel.get(0)).on("swipeleft", function () {
            $carousel.find(".right").click();
        });

        Hammer($carousel.get(0)).on("swiperight", function () {
            $carousel.find(".left").click();
        });
    },

    // #endregion

    //#region Constructor de clase
    _init = function _init() {
        _$highlightCarousel = $("#section-carousel");
        _$carouselTouch = $('.carousel.carousel-touch');
        _$carousels = $('.do-carousel-game');

        // Si es un navegador Touch se asignan los eventos Swipe
        if (game.responsive.isTouchBrowser) {
            _$carouselTouch.each(function () {
                _bindSwipeEventToCarousel($(this));
            });

            _$carousels.each(function () {
                _bindSwipeEventToCarouselGame($(this));
            });
        }
    };
    //#endregion

    // Eventos de actualización al hacer resize
    __$document.on("changeResponsiveViewMode", function () {
        //_$carousels.carousel(1);    
        _$carousels.each(function () {
            var $items = $('.item', this);

            $items.removeClass('active');
            $items.first().addClass('active');
        });
        // if (_$highlightCarousel.length > 0) changeHighlightCarouselSrc(game.responsive.isResponsiveModeBoolean);
    });

    // Adaptaciones de la variante de carousel Bootstrap
    __$document.on('slide.bs.carousel', _$highlightCarousel, function () {
        // Por si se ha reactivado el carousel y estaba pausado
        _cleanCarousel();
    });

    __$document.on('slid.bs.carousel', _$highlightCarousel, function () {
        if (!game.responsive.isMobileBrowser) {
            var $item = _$highlightCarousel.find(".active");
            if ($item.hasClass("item-video")) _videoVisible($item);
        }
    });

    // Eventos de los controles del Carousel-Game (los eventos por separado facilitan la llamada desde el swipe touch)
    __$document.on("click", ".do-carousel-game .carousel-game-control", _carouselGameControlClicked);

    $(_init);
}();
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Classlist, array completo... object assign, includes, query selector all


var game = game || {};

game.productCarousel = function () {
  "use strict";

  var breakpoints, carousels;

  // Utils
  var between = function between(a, b, c) {
    return a >= b && a <= c;
  },
      sessionStorageEnabled = function sessionStorageEnabled() {
    if ((typeof sessionStorage === 'undefined' ? 'undefined' : _typeof(sessionStorage)) === 'object') {
      try {
        var name = 'test-sessionStorageEnabled',
            value = 'test-sessionStorageEnabled';
        sessionStorage.setItem(name, value);
        sessionStorage.removeItem(name);
        return true;
      } catch (e) {
        return false;
      }
    }
  };

  var Breakpoints = function () {

    /**
     * Inicialización de clase
     * @param {any} breakpoints Anchos que marcan los cambios de RWD. Si no se aportan, se utilizan los de por defecto (que coinciden con los del CSS).
     */
    function Breakpoints(breakpoints) {
      this.breakpoints = breakpoints || [{ key: 'xs', value: 0 }, { key: 'sm', value: 544 }, { key: 'md', value: 768 }, { key: 'lg', value: 992 }, { key: 'xl', value: 1366 }, { key: 'xxl', value: 1920 }];
      this.setBreakpoint();
    }

    /**
     * Establece el breakpoint actual.
     */
    Breakpoints.prototype.setBreakpoint = function () {
      var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
          value = Math.max.apply(null, this.breakpoints.filter(function (x) {
        return x.value <= width;
      }).map(function (x) {
        return x.value;
      }));
      // alert(width + ',' + value + ',' + document.body.offsetWidth + ',' + window.innerWidth + ',' + window.outerWidth);
      this.current = this.breakpoints.find(function (x) {
        return x.value === value;
      }).key;
    };
    return Breakpoints;
  }();

  var Movable = function () {
    /**
     * Inicialización de clase
     * @param {any} node Nodo del scrollbar
     * @param {any} transformKey transformKey
     */
    function Movable(node, transformKey) {
      this.node = node;
      this.transformKey = transformKey;
    }

    /**
     * Mueve al elemento
     */
    Movable.prototype.transform = {
      set: function set(deltaX) {

        this.node.style[this.transformKey] = 'translateX(' + deltaX + 'px)';
      },
      get: function get() {
        return parseFloat(this.node.style[this.transformKey].replace(/[^0-9.-]/g, '')) || 0;
      }
    };

    return Movable;
  }();

  var Carousel = function () {

    /**
     * Inicialización de clase
     * @param {HTMLElement} wrapperNode El nodo que contiene a cada carrusel
     * @param {any} config Parámetros de configuración personalizables
     */
    function Carousel(wrapperNode, config) {
      this.set(wrapperNode, config);
      this.build();
      this.move();
    }

    /**
     * Construye cada carrusel. Debe llamarse cada vez que puedan haber cambiado las condiciones (resize).
     */
    Carousel.prototype.build = function () {
      // Saber si es está activo
      this.isActive = this.items.nodes.length > this.items.shown[breakpoints.current];
      if (this.isActive) this.wrapper.node.classList.add('scrollable');else this.wrapper.node.classList.remove('scrollable');

      // Actualizar el item.current
      this.items.current = Math.min(this.items.current, this.items.nodes.length - this.items.shown[breakpoints.current]);

      // Fijar ancho del scrollbar
      var scrollbarRatio = this.items.shown[breakpoints.current] / this.items.nodes.length;
      this.scrollbar.node.style.width = scrollbarRatio * 100 + '%';

      // Obtener el ratio entre scrollbar y contenido
      this.animatable.contentWidth = Array.prototype.reduce.call(this.items.nodes, function (last, node, index, array) {
        return last + node.offsetWidth;
      }, 0);
      this.animatable.ratio = this.scrollbar.node.parentNode.clientWidth / this.animatable.contentWidth || 1;

      // Capturar posición actual
      this.scrollbar.transform.get.call(this.scrollbar);
      this.animatable.transform.get.call(this.animatable);

      // Fijar clases por primera vez
      this.updateInView();
      this.updateButtons();
      this.lazy();
    };

    /**
     * Actualiza el nuevo hijo activo, y posteriormente fija el nuevo scroll.
     * @param {string} movement 'jump' | 'slide' | undefined
     * @param {any} behaviour Parámetros de configuración personalizables
     */
    Carousel.prototype.move = function (movement, behaviour) {
      if (!this.isActive) return;

      var animatableX = this.animatable.transform.get.call(this.animatable) || 0,
          scrollbarX = this.scrollbar.transform.get.call(this.scrollbar) || 0;

      switch (behaviour) {
        case 'jump':
          animatableX = -1 * this.items.nodes[this.items.current].offsetLeft;
          scrollbarX = -1 * animatableX * this.animatable.ratio;
          break;

        case 'slide':
          scrollbarX = Math.max(0, Math.min(scrollbarX + movement, this.scrollbar.node.parentNode.clientWidth - this.scrollbar.node.offsetWidth));
          animatableX = -1 * scrollbarX / this.animatable.ratio;
          break;

        default:
          // Reload          
          animatableX = -1 * this.items.nodes[this.items.current].offsetLeft;
          scrollbarX = -1 * animatableX * this.animatable.ratio;
          break;
      }

      this.scrollbar.transform.set.call(this.scrollbar, scrollbarX);
      this.animatable.transform.set.call(this.animatable, animatableX);
    };

    /**
     * Captura por primera vez los parámetros y componentes. Sólo debe llamarse en la primera carga.
     * @param {HTMLElement} wrapperNode El nodo que contiene a cada carrusel
     * @param {any} config Parámetros de configuración personalizables
     */
    Carousel.prototype.set = function (wrapperNode, config) {

      this.config = Object.assign({}, {
        itemsClassname: 'product-carousel-item',
        scrollbarClassname: 'product-carousel-scroll',
        animatableClassname: 'product-carousel-animatable',
        animationClassname: 'is-smooth',
        storageName: "product-carousel-" + window.location.href + "-" + config.index + "-current",
        current: 0, // Fijar el current como index permite almacenarlo fácilmente en sessionstorage
        itemsShown: { xs: 2, sm: 3, md: 4, lg: 5, xl: 5, xxl: 5 },
        next: 'next',
        prev: 'previous'
      }, config || {});

      // Identificación de nodos
      this.wrapper = {
        node: wrapperNode
      };

      this.items = {
        nodes: this.wrapper.node.getElementsByClassName(this.config.itemsClassname),
        current: this.storage.get(this.config.storageName) || this.config.current,
        shown: this.config.itemsShown
      };

      this.animatable = new Movable(this.wrapper.node.getElementsByClassName(this.config.animatableClassname)[0], ['transform', '-webkit-transform', 'webkit-transform', '-moz-transform', 'moz-transform'].find(function (x) {
        return typeof document.body.style[x] !== 'undefined';
      }));
      this.scrollbar = new Movable(this.wrapper.node.getElementsByClassName(this.config.scrollbarClassname)[0], ['transform', '-webkit-transform', 'webkit-transform', '-moz-transform', 'moz-transform'].find(function (x) {
        return typeof document.body.style[x] !== 'undefined';
      }));

      this.setAnimatableStyle();
    };

    /**
     * Establece la posición como relativa (en caso de no estar establecida ya).
     * Esto es necesario para capturar correctamente el "offsetLeft" de sus hijos, pues se obtiene respecto del primer padre con posición relativa, absoluta o fija.
     * Sólo en la construcción de la clase.
     */
    Carousel.prototype.setAnimatableStyle = function () {
      if (typeof this.animatable.node === 'undefined' || ['relative', 'absolute', 'fixed'].includes(window.getComputedStyle(this.animatable.node).position)) return;else this.animatable.node.style.position = 'relative';
    };

    /**
     * Permite fijar o capturar los parámetros establecidos en la sesión.
     * Gracias a ello, podemos recuperar la última posición de cada scroll.
     */
    Carousel.prototype.storage = {
      set: function set(name, current) {
        if (sessionStorageEnabled) sessionStorage.setItem(name, current);else game.storage.setLocalItem(name, current);
      },
      get: function get(name) {
        return parseInt(sessionStorage.getItem(name) || game.storage.setLocalItem(name)) || 0;
      }
    };

    /**
     * Calcula quién será el próximo primer elemento al pulsar en siguiente o anterior
     * @param {string} movement 'next' | 'previous'
     */
    Carousel.prototype.updateCurrent = function (movement) {
      var index = 0;
      if (typeof movement === 'undefined') {
        Array.prototype.forEach.call(this.items.nodes, function (node, i, array) {
          // Añadimos 20 a la captura del current
          var x = -1 * this.animatable.transform.get.call(this.animatable) + 20;
          if (x >= node.offsetLeft && x <= node.offsetLeft + node.offsetWidth) index = i;
        }.bind(this));
      } else {
        var jump = this.items.shown[breakpoints.current],
            max = this.items.nodes.length - jump,
            min = 0,
            increase = jump * Number(movement === this.config.next) + -1 * jump * Number(movement === this.config.prev); // prev: -1, next: 1

        index = Math.max(min, Math.min(this.items.current + increase, max));

        // Función para cíclico
        /* if (index === this.items.current) index = index === min ? max : min; */
      }
      this.items.current = index;
      this.storage.set(this.config.storageName, this.items.current);
    };

    /**
     * Actualiza los elementos del carrusel que están visibles
     */
    Carousel.prototype.updateInView = function () {
      Array.prototype.forEach.call(this.items.nodes, function (node, index, nodes) {
        if (between(index, this.items.current, this.items.current + this.items.shown[breakpoints.current] - 1)) node.classList.add('is-in-view');else node.classList.remove('is-in-view');

        if (index === this.items.current + this.items.shown[breakpoints.current] - 1) node.classList.add('is-in-view-last');else node.classList.remove('is-in-view-last');
      }.bind(this));
    };

    /**
     * Actualiza los elementos del carrusel que están visibles
     */
    Carousel.prototype.updateButtons = function () {
      var next = this.wrapper.node.parentNode.querySelector('[do-scroll="' + this.config.next + '"]'),
          prev = this.wrapper.node.parentNode.querySelector('[do-scroll="' + this.config.prev + '"]');
      //.classList.add('hidden');

      next.classList.remove('hidden');
      prev.classList.remove('hidden');

      switch (this.items.current) {
        case 0:
          prev.classList.add('hidden');
          break;
        case this.items.nodes.length - this.items.shown[breakpoints.current]:
          next.classList.add('hidden');
          break;
        default:
          // nothing
          break;
      }
    };

    /**
     * Comportamiento Lazy
     */
    Carousel.prototype.lazy = function () {
      var rect = this.wrapper.node.getBoundingClientRect();
      if (rect.bottom > 0 && rect.top < window.innerHeight) {
        // In
        this.wrapper.node.classList.add('is-in-view');
        Array.prototype.filter.call(this.items.nodes, function (node, index, nodes) {
          if (node.classList.contains('is-in-view')) {
            var source = new Image(),
                image = node.querySelector('img.cover');

            source.src = image.getAttribute('data-src');
            source.onload = function () {
              image.src = image.getAttribute('data-src');
              node.classList.add('is-load');
            };
          }
        });
      } else {
        // Out
        this.wrapper.node.classList.remove('is-in-view');
      }
    };

    return Carousel;
  }();

  var Events = function () {
    var unlistenMouse = function unlistenMouse(event) {
      document.body.removeEventListener('mousemove', this.onMousemoveListener, false);
      this.carousel.wrapper.node.classList.add(this.carousel.config.animationClassname);
      return Boolean(event.stopPropagation()); // false
    },
        listenMouse = function listenMouse(event) {
      this.onMousemoveListener = onMousemove.bind(this);
      this.startX = event.clientX;
      this.carousel.wrapper.node.classList.remove(this.carousel.config.animationClassname);
      document.body.addEventListener('mousemove', this.onMousemoveListener, false);
    },
        onMousedown = function onMousedown(event) {
      // Sólo actuamos cuando se ha pulsado en el contenedor
      var movement = event.clientX < this.carousel.scrollbar.node.getBoundingClientRect().left ? this.carousel.config.prev : event.clientX > this.carousel.scrollbar.node.getBoundingClientRect().left + this.carousel.scrollbar.node.offsetWidth ? this.carousel.config.next : false;
      if (movement && this.carousel.scrollbar.node.parentNode === event.currentTarget) this.update.call(this, movement);else listenMouse.call(this, event);

      return Boolean(event.stopPropagation()); // false
    },
        onMousemove = function onMousemove(event) {
      event.preventDefault(); // Prevenimos la selección de texto, imágenes, etc.
      requestAnimationFrame(function () {
        if (typeof event.movementX === 'undefined') {
          this.update.call(this, event.clientX - this.startX);
          this.startX = event.clientX;
        } else this.update.call(this, event.movementX);
      }.bind(this));

      return Boolean(event.stopPropagation()); // false
    };

    /**
      * Inicialización de clase
      * @param {Carousel} carousel Carrusel al que se asocian los eventos
      */
    function Events(carousel) {
      this.carousel = carousel;

      // Eventos de pulsar en botones
      Array.prototype.forEach.call(carousel.wrapper.node.parentNode.querySelectorAll('[do-scroll]'), function (button, index, array) {
        button.addEventListener('click', function () {
          this.update(button.getAttribute('do-scroll'));
        }.bind(this), false);
      }.bind(this));

      // Eventos del ratón sobre el scrollbar
      carousel.scrollbar.node.parentNode.addEventListener('mousedown', onMousedown.bind(this), false);
      document.body.addEventListener('mouseup', unlistenMouse.bind(this), false);
      document.body.addEventListener('mouseleave', unlistenMouse.bind(this), false);

      // Eventos touch (HammerJS)
      if (game.responsive.browserDetect.touchSupport) {
        Hammer(carousel.wrapper.node).on("swiperight", function (event) {
          this.update(this.carousel.config.prev);
        }.bind(this)).on("swipeleft", function (event) {
          this.update(this.carousel.config.next);
        }.bind(this));
      }

      // Cambio de tamaño de pantalla (reconstrucción de todos los parámetros)
      window.addEventListener("window-resize", function (event) {
        breakpoints.setBreakpoint();
        this.update(null, true);
      }.bind(this), false);

      // Cambio de scroll
      var needPerfomance = game.responsive.isMobileBrowser && game.responsive.isTouchBrowser || game.responsive.browserDetect.browser && game.responsive.browserDetect.browser.toLowerCase().indexOf('explorer') !== -1;
      window.addEventListener('window-scroll', function (event) {
        this.carousel.lazy.call(this.carousel);
      }.bind(this), false);

      $(document).on("doLazyDone", function () {
        this.carousel.lazy.call(this.carousel);
      }.bind(this));
    }

    /**
      * Actualiza el contenido en función de los parámetros
      * @param {string|number} movement Tipo o cantidad de movimiento
      * @param {bool} rebuild Necesidad de reconstruir los parámetros
      */
    Events.prototype.update = function (movement, rebuild) {
      if (rebuild) this.carousel.build();

      if (typeof movement === 'string') {
        this.carousel.updateCurrent(movement);
        this.carousel.move(movement, 'jump');
      } else {
        this.carousel.move(movement, 'slide');
        this.carousel.updateCurrent();
      }
      this.carousel.updateButtons();
      this.carousel.updateInView();
      this.carousel.lazy();

      // this.carousel.updateInView();
    };
    return Events;
  }();

  // Inicialización de la clase 
  $(function () {
    breakpoints = new Breakpoints();
    carousels = document.getElementsByClassName('product-carousel');

    // Inicialización para cada carrusel
    Array.prototype.forEach.call(carousels, function (node, index, array) {
      var carousel = new Carousel(node, { index: index }),
          events = new Events(carousel);
    });

    // Inicialización de los tooltip
    $(".product-carousel-item a").tooltip({ title: 'Ver ficha' });
  });

  window.addEventListener("resize", function (event) {
    game.utils.rateLimit('window-resize', 20, function () {
      var evt = new CustomEvent('window-resize');window.dispatchEvent(evt);
    });
  });

  window.addEventListener('scroll', function (event) {
    game.utils.rateLimit('window-scroll', 20, function () {
      var evt = new CustomEvent('window-scroll');window.dispatchEvent(evt);
    });
    return true;
  });

  (function () {

    if (typeof window.CustomEvent === "function") return false;

    function CustomEvent(event, params) {
      params = params || { bubbles: false, cancelable: false, detail: undefined };
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
  })();
  return {};
}();

/**
 * @namespace game
 */
var game = game || {};

game.loader = function () {

    var ID = 'gameLoader',
        MESSAGE_CLASS = 'loader-message',
        TEMPLATE = '<div class="loader-railway">' + '<div class="loader-train"></div>' + '</div>';

    var _loader = function _loader() {
        if (!document.body) return false;

        var loader = document.getElementById(ID);
        if (!loader) {
            loader = document.createElement('div');
            loader.id = ID;
            loader.innerHTML = TEMPLATE;
            document.body.appendChild(loader);
        }
        return loader;
    };

    var completed = function completed() {
        var loader = _loader();

        if (!loader) return false;

        if (loader.classList.contains("running")) {
            loader.className = loader.className.replace("running", "complete");
            loader.classList.add("complete");
        };
        setTimeout(function () {
            loader.className = loader.className.replace("complete", "");
        }, 300);
    };

    var inProgress = function inProgress(message) {
        var loader = _loader();

        if (!loader) return false;

        var oldMessage = loader.querySelector('.' + MESSAGE_CLASS);

        if (oldMessage && !loader.classList.contains("running")) oldMessage.parentNode.removeChild(oldMessage);

        loader.className += " running";

        if (message) {
            var messageContainer = document.createElement('DIV');
            messageContainer.classList.add(MESSAGE_CLASS);
            messageContainer.innerHTML = '<p><img src="https://media.game.es/Img-statics/img-statics/load-auto-search.gif" alt="Cargando..." title="Cargando..." /><br />' + message + '</p>';
            loader.appendChild(messageContainer);
        }
    };

    return {
        completed: completed,
        inProgress: inProgress
    };
}();
/**
 * @namespace game
 */
var game = game || {};

game.header = function () {
  'use strict';

  var header, userNav, menu, items, parents, notparents, searchForm;

  var PARAMS = {
    classes: {
      all: 'navigation-item',
      link: 'navigation-item-link',
      list: 'navigation',
      shown: 'shown',
      open: 'open',
      isParent: 'do-parent',
      notPrevent: 'do-not-prevent'
    },
    ids: {
      header: 'header',
      user: 'header-core-user',
      menu: 'menuWrap',
      searchForm: 'searchBox'
    },
    datas: {
      parent: 'index',
      target: 'parent-index'
    }
  };

  var bindEvents = function bindEvents() {

    notparents.forEach(function (notparent) {
      notparent.addEventListener('mouseenter', function (event) {
        if (!game.responsive.isResponsiveModeBoolean) {
          updateShown(event.currentTarget.parentNode, true);
        }
      });
      notparent.addEventListener('click', function (event) {
        if (!event.currentTarget.dataset.toggle && !event.currentTarget.querySelector('[data-search-adder]') && !event.currentTarget.querySelector('[data-toggle]') && !event.currentTarget.classList.contains(PARAMS.classes.notPrevent)) event.stopPropagation();
      });
      notparent.addEventListener('touchend', function (event) {
        if (!game.responsive.isResponsiveModeBoolean) event.stopPropagation();
      });
    });

    parents.forEach(function (parent) {

      if (!parent.parentNode.dataset.binded) {
        parent.parentNode.dataset.binded = true;
        parent.parentNode.addEventListener('mouseleave', function (event) {
          if (!game.responsive.isResponsiveModeBoolean) {
            updateShown(event.currentTarget);
            event.currentTarget.parentNode.classList.remove(PARAMS.classes.shown);
          }
        });
      }

      if (!parent.dataset.binded) {
        parent.dataset.binded = true;
        parent.addEventListener('mouseenter', function (event) {
          // Sustituto del hover
          if (!game.responsive.isResponsiveModeBoolean) {
            updateShown(event.currentTarget.parentNode, event.currentTarget, true);
            if (event.currentTarget.parentNode !== menu && event.currentTarget.parentNode !== userNav && event.currentTarget.parentNode !== searchForm && event.currentTarget.classList.contains(PARAMS.classes.isParent)) {
              updatePosition(event.currentTarget);
            }
          }
        });
        parent.addEventListener('touchend', function (event) {
          // Hemos de prevenir el evento para tablets en tamaño desktop sin influir en los click de ratón
          if (!game.responsive.isResponsiveModeBoolean) {
            event.preventDefault();
            event.stopPropagation();
            if (event.currentTarget.parentNode === menu || event.currentTarget.parentNode === userNav || event.currentTarget.parentNode === searchForm) updateShown(false, event.currentTarget);else {
              updateShown(event.currentTarget.parentNode, event.currentTarget);
              if (event.currentTarget.classList.contains(PARAMS.classes.isParent) && event.currentTarget.classList.contains(PARAMS.classes.shown)) {
                updatePosition(event.currentTarget);
              }
            }
            return false;
          }
        });
      }

      var anchor = Array.prototype.map.call(parent.children, function (x) {
        return x;
      }).find(function (x) {
        return x.tagName.toLowerCase() === 'a';
      });
      if (!anchor.dataset.binded) {
        anchor.dataset.binded = true;
        anchor.addEventListener('click', function (event) {
          // En móvil NO hay posicionamiento de los hijos
          if (game.responsive.isResponsiveModeBoolean) {
            event.preventDefault();
            event.stopPropagation();
            updateShown(event.currentTarget.parentNode.parentNode, event.currentTarget.parentNode);
            return false;
          }
        });
      }

      // Para forzar que se cierre el autocomplete de jquery
    });
    var headerdrop = window['header-core-search-drop'];
    if (headerdrop && headerdrop.dataset.binded) {
      headerdrop.dataset.binded = true;
      headerdrop.addEventListener('mouseenter', function (event) {
        $("#searchinput").autocomplete("close");
      });
    }
    // Al pulsar fuera de la cabecera, se oculta el menú
    // TODO: Hay que pasar esto a pulsar un fondo semitransparent o transparente
    document.addEventListener('click', function (event) {
      updateShown();
    });
    $(document).on("changeResponsiveViewMode", updateBackgrounds);
    $(document).on("forceHeaderUpdate", bindEvents);
  },
      updateBackgrounds = function updateBackgrounds() {
    Array.prototype.forEach.call(menu.querySelectorAll('.' + PARAMS.classes.link), function (x) {
      var current = window.getComputedStyle(x, null).backgroundImage;
      if (!game.responsive.isResponsiveModeBoolean && x.parentNode.parentNode === menu && current && current.toLowerCase() !== 'none') {
        x.style.backgroundImage = current.replace('-n-m.', '-n.');
      } else if (game.responsive.isResponsiveModeBoolean) {
        x.style.backgroundImage = current.replace('-n.', '-n-m.');
      }
    });
  },
      getNodes = function getNodes() {
    header = window[PARAMS.ids.header];
    userNav = window[PARAMS.ids.user];
    menu = window[PARAMS.ids.menu];
    searchForm = window[PARAMS.ids.searchForm];
    if (menu) {
      items = Array.prototype.map.call(header.getElementsByClassName(PARAMS.classes.all), function (x) {
        return x;
      });
      parents = items.filter(function (x) {
        return x.classList.contains(PARAMS.classes.isParent);
      });
      notparents = items.filter(function (x) {
        return !x.classList.contains(PARAMS.classes.isParent);
      });
    }
  },
      updatePosition = function updatePosition(element) {
    var elementRect = element.getBoundingClientRect(),
        menuRect = menu.getBoundingClientRect(),
        searchFormRect = searchForm.getBoundingClientRect(),
        target = Array.prototype.find.call(element.children, function (x) {
      return x.classList.contains(PARAMS.classes.list);
    });

    if (!target) return;
    target.style.opacity = '0';
    var auxTranslate = target.offsetHeight / 2,
        auxTop = Math.max(element.parentNode.parentNode.parentNode === searchForm ? searchFormRect.bottom : menuRect.bottom, elementRect.top + element.offsetHeight / 2 - auxTranslate);

    target.style.top = auxTop - Math.max(target.offsetHeight - (window.innerHeight - auxTop) + 25, 0) + 'px';
    target.style.left = (menuRect.right > elementRect.right + target.offsetWidth ? elementRect.right : elementRect.left - target.offsetWidth) + /*- (menu.classList.contains(PARAMS.classes.open) ? Math.min(1145/2, document.body.offsetWidth/2) : 0)*/'px';
    target.style.opacity = '1';
  },
      updateShown = function updateShown(context, current, force) {
    Array.prototype.forEach.call(context ? context.children : parents, function (x) {
      if (current && x === current) {
        if (typeof force === 'boolean') current.classList.toggle(PARAMS.classes.shown, force);else current.classList.toggle(PARAMS.classes.shown);
      } else x.classList.remove(PARAMS.classes.shown);
    });
  },
      init = function init() {
    getNodes();
    if (menu && items) {
      updateBackgrounds();
      bindEvents();
    }
  };
  $(document).ready(init);
}();
var game = game || {};

game.bannerCountdown = function () {
  'use strict';

  var needPerfomance = false,
      // game.responsive.isMobileBrowser && game.responsive.isTouchBrowser || game.responsive.browserDetect.browser.toLowerCase().indexOf('explorer') !== -1,


  Components = /** @class */function () {
    function Components() {
      this.PARAMS = {
        dataKey: 'banner-countdown',
        template: '\n            <span class="do-days is-days banner-countdown-el"></span>\n            <span class="do-hours is-hours banner-countdown-el"></span>\n            <span class="do-minutes is-minutes banner-countdown-el"></span>\n            <span class="do-seconds is-seconds banner-countdown-el"></span>\n            <span class="do-milliseconds is-milliseconds banner-countdown-el"></span>\n          ',
        keys: {
          days: 'días',
          hours: 'horas',
          minutes: 'minutos',
          seconds: 'segundos',
          milliseconds: 'milisegundos'
        },
        showDays: false,
        showMilliseconds: false
      };
      return this;
    }

    Components.prototype.bindEvents = function () {
      if (!this.documentBinded) {
        this.documentBinded = true;
        $(document).on("@bannerCountdown.update", components.update.bind(components));
      }
      return this;
    };

    Components.prototype.getItems = function () {
      var _this2 = this;

      this.items = Array.prototype.map.call(document.querySelectorAll('[data-' + this.PARAMS.dataKey + ']'), function (x) {
        var options = Object.assign({}, _this2.PARAMS, game.utils.parseOptions(x.getAttribute('data-' + _this2.PARAMS.dataKey)));
        x.innerHTML = _this2.PARAMS.template;
        options.endTime = moment(options.endTime);

        return {
          node: x,
          options: options,
          serverTimeOffset: moment.duration(moment(options.serverTime).diff(moment())),
          childs: {
            days: { wrap: x.querySelector('.do-days'), digits: [] },
            hours: { wrap: x.querySelector('.do-hours'), digits: [] },
            minutes: { wrap: x.querySelector('.do-minutes'), digits: [] },
            seconds: { wrap: x.querySelector('.do-seconds'), digits: [] },
            milliseconds: { wrap: x.querySelector('.do-milliseconds'), digits: [] }
          }
        };
      });
      return this;
    };

    Components.prototype.fillZero = function (value) {
      var valueAsString = String(value);
      return valueAsString.length === 1 ? valueAsString = '0' + valueAsString : valueAsString;
    };

    Components.prototype.updateHTML = function (item) {
      var _this = this,
          remaining = moment.duration(item.options.endTime.diff(moment().add(item.serverTimeOffset))),
          days = Math.max(remaining.days(), 0),
          params = {
        days: _this.fillZero(days),
        hours: _this.fillZero(Math.max(remaining.hours() + (item.options.showDays ? 0 : days * 24), 0)),
        minutes: _this.fillZero(Math.max(remaining.minutes(), 0)),
        seconds: _this.fillZero(Math.max(remaining.seconds(), 0)),
        milliseconds: _this.fillZero(Math.max(remaining.milliseconds(), 0))
      };

      if (!item.options.showDays && item.childs.days) {
        item.childs.days.wrap.parentNode.removeChild(item.childs.days.wrap);
        delete item.childs.days;
      }
      if (!item.options.showMilliseconds && item.childs.milliseconds) {
        item.childs.milliseconds.wrap.parentNode.removeChild(item.childs.milliseconds.wrap);
        delete item.childs.milliseconds;
      }

      for (var key in item.childs) {

        var child = item.childs[key],
            currentParam = params[key];

        if (child.wrap.innerHTML === '') {
          for (var i = 0, j = currentParam.length; i < j; i++) {
            var digit = document.createElement("span");
            digit.innerHTML = currentParam[i];
            child.digits.push(digit);
            child.wrap.appendChild(digit);
          }
          var title = document.createElement("span");
          title.classList.add("banner-countdown-el-title");
          title.innerHTML = this.PARAMS.keys[key];
          child.wrap.appendChild(title);
          /*
          */
        } else {
          for (var k = 0, l = currentParam.length; k < l; k++) {
            child.digits[k].innerHTML = currentParam[k];
          }
        }
      }

      if (remaining.as("milliseconds") > 0) game.utils.customRequest(needPerfomance || !item.options.showMilliseconds ? 1000 : 33, this.updateHTML.bind(this, item));else this.stop(item);
      return this;
    };

    Components.prototype.stop = function (item) {
      $(item.node).trigger("@banner-countdown.ends", [item]);
      return this;
    };

    Components.prototype.update = function () {
      var _this3 = this;

      this.getItems().bindEvents();

      this.items.forEach(function (item) {
        _this3.updateHTML(item);
      });

      return this;
    };

    return Components;
  }(),
      components = new Components();

  $(document).ready(components.update.bind(components));
  return {
    components: components
  };
}();
/// <reference path="game.ui.js" />
/// <reference path="game.responsive.js" />
/* globals $ */
/**
 * @namespace game
 */
var game = game || {};

game.styles = function () {

  var
  //#region Variables
  scrollingStatus = {
    latestKnownScrollY: 0,
    ticking: false,
    triggerScroll: false
  },


  // Ventana
  __$document = $(document),
      __$window = $(window),
      bodyAndHtml = new game.ui.Control("html, body"),
      //Body y html, necesario para según qué interacciones (scroll, etc)
  body = new game.ui.Control("body#body"),
      html = new game.ui.Control("html"),


  // Cabecera
  headerLimit = null,
      //Limite para considerar que se ha hecho scroll (altura cabecera)
  headerSemiLimit = null,
      //Limite para considerar que se ha hecho el primer scrol (elimina fila superior);

  headerRow1 = new game.ui.Control("#l-HeaderRow1", { height: function height() {
      return this._init().height();
    } }),
      //Primera fila de la cabecera
  headerRow2 = new game.ui.Control("#l-HeaderRow2", { height: function height() {
      return this._init().height();
    } }),
      // Segunda fila
  headerRow3 = new game.ui.Control("#menuWrap", { height: function height() {
      return this._init().height();
    } }),
      // Tercera fila
  headerRow4 = new game.ui.Control("#l-HeaderRow4", { height: function height() {
      return this._init().height();
    } }),
      // Cuarta fila
  dropNavMenu = new game.ui.Control("#dropNavMenu"),
      // Botón que despliega el menu
  //#endregion

  // Elementos con acción de scroll tipo scrollspy
  scrollspyListener = new game.ui.Control("[data-scrollspy-listener]", {
    init: function init() {
      if (this._init.length > 0) scrollingStatus.triggerScroll = true;
    },
    trigger: function trigger() {
      var $control = this._init();$control.trigger.apply($control, arguments);
    }
  }),


  //#region Funciones

  /**
  * Inicia el intervalo para comprovar la navegación (http://www.html5rocks.com/en/tutorials/speed/animations/)
  */
  onScroll = function onScroll() {
    var needPerfomance = game.responsive.isMobileBrowser && game.responsive.isTouchBrowser || game.responsive.browserDetect.browser && game.responsive.browserDetect.browser.toLowerCase().indexOf('explorer') !== -1;

    scrollingStatus.latestKnownScrollY = window.scrollY || pageYOffset || document.documentElement.scrollTop;

    var interval = void 0;
    if (!scrollingStatus.ticking) {
      interval = setInterval(function () {
        update();
        scrollingStatus.ticking = false;
      }, needPerfomance ? 500 : 150);
    }
    scrollingStatus.ticking = true;

    var timer = void 0;
    clearTimeout(timer);
    timer = setTimeout(function () {
      scrollingStatus.ticking = false;
      clearInterval(interval);
    }, needPerfomance ? 600 : 200);
  },


  /**
  * Our animation callback
  */
  update = function update() {
    if (scrollingStatus.triggerScroll) game.utils.customRequest(100, function () {
      return scrollspyListener.trigger({ type: "scrollUpdate", scrollY: scrollingStatus.latestKnownScrollY });
    });

    _lazyLoadImages.loadVisibles();
    scrollOrNot();
  },


  /*
  * Calcula el límite para añadir las clases scrolled o semiscrolled al body
  */
  scrollLimitCalc = function scrollLimitCalc(isMobile) {
    headerLimit = isMobile ? 37 : 28 + 75 + 65; // headerRow1.height() : headerRow1.height() + headerRow2.height() + headerRow3.height() + headerRow4.height();
    headerSemiLimit = isMobile ? 37 : 28;
  },


  /*
  * Añade la clase scrolled o semiscrolled al body
  * Requiere html y body a la vez por compatibilidad con todos los navegadores
  */
  scrollOrNot = function scrollOrNot() {
    // Aseguramos que no de error de javascript (TODO: ¿Orden de lectura incorrecto? No se ha localizado el fallo)
    body.toggleClass("scrolled", scrollingStatus.latestKnownScrollY > headerLimit);
    body.toggleClass("semi-scrolled", scrollingStatus.latestKnownScrollY > headerSemiLimit);
  },


  /*
  * Actualiza el menú de la cabecera para dispositivos touch
  * TODO: Cambiar función al cambiar toda la cabecera
  */
  touchHeader = function touchHeader() {
    var topLevelLinks = headerRow3.find("a.level0", { forEach: function forEach(cb) {
        $.makeArray(this._init()).forEach(cb);
      } });

    topLevelLinks.forEach(function (topLevelLink) {
      topLevelLink.href = "javascript:void(0)";
    });

    __$document.on("touchstart", headerRow3.selector + ' a.level0, ' + headerRow3.selector + ' div.level0', function (evt) {
      var allParents = $(".touched"),
          currentParent = $(evt.currentTarget).closest(".e-dropdown");

      allParents.removeClass("touched");
      currentParent.addClass("touched");
    });
  },
      _lazyLoadImages = new game.ui.Control('.do-lazy-load', {
    loadVisibles: function loadVisibles(force) {
      var $control = force ? this._init(true) : this._init(true).filter(':visible'),
          images = $.makeArray($control),
          viewBottom = __$window.scrollTop() + __$window.height();

      __$document.on("changeResponsiveViewMode", function () {
        images.forEach(function (image) {
          image.src = game.responsive.isResponsiveModeBoolean ? image.dataset.srcMob || image.dataset.src : image.dataset.src;
        });
      });

      images.forEach(function (image) {
        var $image = $(image);
        var elemTop = $image.offset().top;
        if (elemTop <= viewBottom) {
          //setTimeout(function () {
          $image.error(function () {
            this.onerror = null;this.src = '/Content/img/no_disponible.png';
          });
          image.src = game.responsive.isResponsiveModeBoolean ? image.dataset.srcMob || image.dataset.src : image.dataset.src;
          image.addEventListener('load', function () {
            this.classList.remove('do-lazy-load');
          });

          __$document.trigger({ type: "doLazyDone", node: $image[0] });
          //}, 0);
        } else {
          return;
        }
      });
    }
  }),
      getNextImage = function getNextImage(dir, $item) {
    var $next = dir === 'left' ? $item.next().find("img[data-src]") : $item.prev().find("img[data-src]");
    if ($next.length === 0) $next = dir === 'left' ? $item.parent().find("img[data-src]").first() : $item.parent().find("img[data-src]").last();
    return $next;
  },
      lazyCarousel = new game.ui.Control('.do-lazy-carousel', {
    load: function load(dir) {
      var $control = this._init(true).find(".item.active"),
          items = $.makeArray($control);

      __$document.on("changeResponsiveViewMode", function () {
        items.forEach(function (item) {
          var image = $(item).find("img[data-src]")[0];
          if (image) image.src = game.responsive.isResponsiveModeBoolean ? image.dataset.srcMob || image.dataset.src : image.dataset.src;
        });
      });

      items.forEach(function (item) {
        var $item = $(item),
            $current = $item.find("img[data-src]"),
            $next,
            sourceCase = game.responsive.isResponsiveModeBoolean && $current.data("srcMob") ? "srcMob" : "src";

        $next = dir ? getNextImage(dir, $item) : getNextImage('right', $item).add(getNextImage('left', $item));

        $current.attr("src", $current.data(sourceCase));
        if ($next.length) {
          $next.each(function () {
            var $this = $(this);
            $this.attr("src", $this.data(sourceCase));
          });
        } else {
          $item.parents('.do-lazy-carousel').removeClass('do-lazy-carousel');
        }
      });
    }
  });

  //#endregion
  function rgbToHsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b),
        min = Math.min(r, g, b);
    var h,
        s,
        l = (max + min) / 2;

    if (max === min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);break;
        case g:
          h = (b - r) / d + 2;break;
        case b:
          h = (r - g) / d + 4;break;
      }
      h /= 6;
    }

    return [Math.floor(h * 360), Math.floor(s * 100), Math.floor(l * 100)];
  }

  function checkMenuColor(menu) {
    var rgb = window.getComputedStyle(menu).backgroundColor.split(',').map(function (c) {
      return +c.match(/\d+/)[0];
    }),
        hsl = rgbToHsl(rgb[0], rgb[1], rgb[2]);
    if (hsl[2] > 70) {
      var headerText = menu.querySelector('.header-text');
      headerText && headerText.removeAttribute('style');
    }
  }

  //#region Constructor de clase
  $(function () {
    // Si hay elementos dependientes del scroll se activa el trigger
    scrollspyListener.init();

    // Funciones referentes al header
    scrollLimitCalc();
    scrollOrNot();
    if (game.responsive.isTouchBrowser) touchHeader();

    var menuColor = document.querySelectorAll('.do-menu-color-text');
    [].forEach.call(menuColor, checkMenuColor);

    // Inicializaciones bootstrap
    $('[data-toggle="tooltip"],[data-jstoggle="tooltip"],[data-tooltip]').tooltip();

    _lazyLoadImages.loadVisibles();
    lazyCarousel.load();
  });
  //#endregion

  // Eventos
  window.addEventListener('scroll', onScroll, false);

  __$document.on('click', '.do-lazy-loader', function () {
    setTimeout(function () {
      _lazyLoadImages.loadVisibles();
    }, 0);
  });

  __$document.on("slid.bs.carousel", '.do-lazy-carousel', function () {
    lazyCarousel.load();
  });

  /**
  * Muestra u oculta el menú dropdown
  * TODO: Cambiar a la función nativa de Bootstrap cuando se cambie la cabecera
  */
  __$document.on("click", dropNavMenu.selector, function () {
    headerRow3.toggleClass("open");
    dropNavMenu.parent().toggleClass("open");
    // bodyAndHtml.toggleClass("u-overflow-hidden-mob"); // Evitamos el doble scroll al desplegarse el menu
    bodyAndHtml.toggleClass("header-submenu-open"); // Evitamos el doble scroll al desplegarse el menu
  });

  __$document.on("changeResponsiveViewMode", function (evt) {
    // Recalculamos los límites de altura
    scrollLimitCalc(evt.mode);
    scrollOrNot();
  });

  __$document.on("changeToMobile", function () {
    headerRow3.removeClass("open");
    dropNavMenu.parent().removeClass("open");
    bodyAndHtml.removeClass("header-submenu-open"); // Evitamos el doble scroll al desplegarse el menu
    // bodyAndHtml.removeClass("u-overflow-hidden-mob");
    // No necesario hasta que tengamos el carousel nuevo activo _self.changeCarouselSrc(true);
  });

  __$document.on("changeToDesk", function () {
    // No necesario hasta que tengamos el carousel nuevo activo _self.changeCarouselSrc(false);
  });

  __$document.on('show.bs.modal', function () {
    html.toggleClass("modal-open", true);
  });

  __$document.on('hidden.bs.modal', function () {
    if ($(".modal.in").length === 0) {
      bodyAndHtml.removeClass("modal-open");
    }
  });

  // TOGGLE ICON
  __$document.on("click", ".toggle-icon", function (e) {
    var $currentBtn = $(e.currentTarget);
    $currentBtn.children(".icon").toggleClass("hide");
  });

  return {
    lazyLoadImages: function lazyLoadImages() {
      _lazyLoadImages.loadVisibles();
    }
  };
}();